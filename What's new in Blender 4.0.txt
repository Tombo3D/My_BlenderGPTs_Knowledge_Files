This work is licensed under the GNU General Public License v3.0 or later (GPL).
For more information, see https://www.gnu.org/licenses/gpl-3.0.html.


What's new in Blender 4.0

'''''

Blender 4.0 Table Of Contents

Section 1. Blender 4.0: Animation & Rigging¶
Section 2. Blender 4.0: Geometry Nodes¶
Section 3. Blender 4.0: Modeling¶
Section 4. Blender 4.0: Sculpt, Paint, Texture¶
Section 5. Blender 4.0: Shading & Texturing¶
Section 6. Blender 4.0: Cycles¶
Section 7. Blender 4.0: Color Management¶
Section 8. Blender 4.0: Compositor & Sequencer¶
Section 9. Blender 4.0: Import & Export¶
Section 10. Blender 4.0: Core¶
Section 11. Blender 4.0: User Interface¶
Section 12. Blender 4.0: 3D Viewport¶
Section 13. Blender 4.0: Node Editor¶
Section 14. Blender 4.0: Keymap¶
Section 15. Blender 4.0: Add-ons¶
Section 16. Blender 4.0: Python API¶
Section 17. Blender 4.0: Asset Bundles¶

'''''

1. Blender 4.0: Animation & Rigging¶

Blender 4.0: Animation & Rigging
¶
Pose Library
¶
The pose library uses the newly introduced asset shelf to make pose
assets available in the 3D viewport.
Pose library in the asset shelf
Bone Collections and Colors
¶
New bone collections replace both legacy numbered layers and bone
groups. Bone collections can be named and are no longer limited to a
fixed number. Colors are now specified individually for each bone,
replacing bone group colors. (Design
#108941
,
998136f7a7
### Commit Summary: Anim: replace Bone Groups & Armature Layers with Bone Collections · 998136f7a7 - blender - Blender Projects
### Commit Details:
Armature layers (the 32 little dots) and bone groups are replaced with
Bone Collections:

- Bone collections are stored on the armature, and have a name that is
  unique within that armature.
- An armature can have an arbitrary number of bone collections (instead
  of the fixed 32 layers).
- Bones can be assigned to zero or more bone collections.
- Bone collections have a visibility setting, just like objects in scene
  collections.
- When a bone is in at least one collection, and all its collections in
  are hidden, the bone is hidden. In other cases (in any visible
  collection, or in no collection at all), the bone visibility is
  determined by its own 'hidden' flag.
- For now, bone collections cannot be nested; they are a flat list just
  like bone groups were. Nestability of bone collections is intended to
  be implemented in a later 4.x release.
- Since bone collections are defined on the armature, they can be used
  from both pose mode and edit mode.

Versioning converts bone groups and armature layers to new bone
collections. Layers that do not contain any bones are skipped. The old
data structures remain in DNA and are unaltered, for limited forward
compatibility. That way at least a save with Blender 4.0 will not
immediately erase the bone group and armature layers and their bone
assignments.

Shortcuts:

- M/Shift+M in pose/edit mode: move to collection (M) and add to
  collection (shift+M). This works similar to the M/Shift+M menus for
  objects & scene collections.
- Ctrl+G in pose mode shows a port of the old 'bone groups' menu. This
  is likely to be removed in the near future, as the functionality
  overlaps with the M/Shift+M menus.

This is the first commit of a series; the bone collections feature will
be improved before the Blender 4.0 release. See
#108941
for more info.

Pull request:
#109976
-------
)
Bone colors can be defined on the armature (edit mode) bones, as well
  as on the pose bones (also see
Gotchas: edit bones, pose bones, bone
  bones
).
  The "edit mode" colors are shared between all users of the armature,
  and are available in edit mode as well as pose mode. The "pose mode"
  colors can be different per armature object (in the same way that each
  armature object has its own pose), and thus allow per-character
  customization of colors. The pose mode colors work as override on the
  edit mode colors; setting the pose color to "default" will show the
  edit mode color.
  (
042c5347f4
### Commit Summary: Anim: move bone colors from bone groups to individual bones · 042c5347f4 - blender - Blender Projects
### Commit Details:
Move control over the color of bones from bone groups to the bones
themselves. Instead of using bone groups (which are defined on the pose,
and thus owned by the object), the color is stored on:

- the bone (`struct Bone`, or RNA `armature.bones['bone_name'].color`)
- a possible override on the pose bone (`struct bPoseChannel`, or RNA
  `ob.pose.bones['bone_name'].color`).

When the pose bone is set to its default color, the color is determined
by the armature bone. In armature edit mode, the armature bone colors
are always used, as then the pose data is unavailable.

Versioning code converts bone group colors to bone colors. If the
Armature has a single user, the group color is stored on the bones
directly. If it has multiple users, the group colors will be stored on
the pose bones instead.

The bone group color is not removed from DNA for forward compatibility,
that is, to avoid immediate dataloss when saving a 3.6 file with 4.0.

This is part of the replacement of bone groups & armature layers with
bone collections. See the design task at
#108941
.

Pull request:
#109976
-------
)
The Select Grouped operator (Shift+G) can now select by bone color and
  by bone collection. This works based on the active bone; it selects
  all the other bones with the same color resp. sharing one or more bone
  collections. This is slightly different than before, where all
  selected bones were taken into account.
  (
e41fbfd6e9
### Commit Summary: Anim: add 'select grouped: bone collection' pose mode operator · e41fbfd6e9 - blender - Blender Projects
### Commit Details:
Add 'Bone Collection' to the 'Select Grouped' operator in pose mode.
This removes the 'Same Layer' option, and replaces it with 'Same Bone
Collection'. It selects all the bones that are in the same collections
as the active bone.

When there are multiple armatures in pose mode, the bone collections are
matched by name.
-------
,
c230c52626
### Commit Summary: Anim: implement 'Select Grouped' by bone color · c230c52626 - blender - Blender Projects
### Commit Details:
The pose mode 'Select Grouped' operator can now select by bone color.
This compares either the theme palette index, or the full custom color.
In other words, if custom colors are visually very similar but binary
not equal, they will be treated as different.

The last bytes of the custom colors (so `solid[3]`, `active[3]`, and
`selected[3]`) aren't used for these comparisons, as the values are
inconsistently either 0 or 255 depending on how the color was set. There
is no way to influence this with the color picker in the GUI, and AFAIK
the alpha channel isn't used for drawing either.
-------
,
d5329eeea2
### Commit Summary: Anim: armature edit mode 'select by bone collection' operator · d5329eeea2 - blender - Blender Projects
### Commit Details:
In the armature edit mode 'select similar' operator, replace 'select by
layer' with 'select by bone collection.
-------
,
e59944dba4
### Commit Summary: Anim: armature edit mode 'select by bone color' operator · e59944dba4 - blender - Blender Projects
### Commit Details:
In the armature edit mode 'select similar' operator, replace the 'select
by same bone group' operator with 'select by same bone color'.
-------
,
62639080bc
### Commit Summary: Anim: armature edit mode, replace 'bone layers' operator with collections · 62639080bc - blender - Blender Projects
### Commit Details:
In armature edit mode, replace the 'bone layers' operator with the 'move
to bone collection' operator. This operator now works in both pose mode
and edit mode, and is available with the 'M' hotkey in either mode.
-------
)
The Bone Layer operators (M, Shift+M) have been replaced by bone
  collection operators.
  (
b48031df8e
### Commit Summary: Anim: armature edit mode, make Shift+M consistent with pose mode · b48031df8e - blender - Blender Projects
### Commit Details:
Replace the 'armature layers' operator (which would toggle visibility of
armature layers) with the 'bone collections' menu (which allows assigning
to and unassigning from bone collections). The functionality of these
operators is quite different, but it unifies the behaviour between
armature pose and edit modes.

Selecting which bone collections are visible in the 3D Viewport may be
reintroduced after nestable bone collections are implemented. Otherwise
the list of bone collections will likely become unwieldy.
-------
)
Bone collections can be added to linked armatures via library
  overrides.
The Armature property
show_group_colors
has been renamed to
show_bone_colors
.
  (
f78ed7b900
### Commit Summary: Anim: rename Armature `show_group_colors` to `show_bone_colors` · f78ed7b900 - blender - Blender Projects
### Commit Details:
There are no more bone groups, and the colors have been moved to the
bones themselves (
042c5347f4
). Now the
armature property that controls whether they're shown or not also refers
to 'bone colors' instead of 'group colors'.
-------
)
The "Skeleton" panel in the Armature properties has been renamed to
  "Pose".
  (
007cea4653
### Commit Summary: Anim: rename the 'Skeleton' panel to 'Pose' · 007cea4653 - blender - Blender Projects
### Commit Details:
In the Armature properties, rename the 'Skeleton' panel to 'Pose'. This
panel used to house the armature layers, but they have been transformed
into bone collections, which have their own panel. Also the term 'skeleton'
is not used in Blender, so having that as title here felt out of place.

There are some ideas to introduce different 'poses', to disconnect the
mesh binding pose from the animation reference pose. This rename sets
things up for exposing such functionality.
-------
)
See
Bone Collections & Colors:
Upgrading
for an overview of how to change Python code from armature layers & bone
groups to bone collections.
Bendy Bones
¶
A new method of mapping vertices to B-Bone segments for deformation that
takes the rest pose curvature into account has been added.
(
0055ae01ab
### Commit Summary: Anim: implement a new curve-aware vertex to B-Bone segment mapping mode. · 0055ae01ab - blender - Blender Projects
### Commit Details:
Currently vertices are mapped to B-Bone segments without taking the
rest pose curve into account. This is very simple and fast, but causes
poor deformations in some cases where the rest curvature is significant,
e.g. mouth corners in the new Rigify face rig.

This patch implements a new mapping mode that addresses this problem.
The general idea is to do an orthogonal projection on the curve. However,
since there is no analytical solution for bezier curves, it uses the
segment approximation:

* First, boundaries between segments are used for a binary space
  partitioning search to narrow down the mapping to one segment.
* Then, a position on the segment is chosen via linear
  interpolation between the BSP planes.
* Finally, to remove the sharp discontinuity at the evolute surface
  a smoothing pass is applied to the chosen position by blending to
  reduce the slope around the planes previously used in the BSP search.

In order to make per-vertex processing faster, a new array with the
necessary vectors converted to the pose space, as well as some
precomputed coefficients, is built.

The new mode is implemented as a per-bone option in order to ensure
backward compatibility, and also because the new mode may not be
optimal for all cases due to the difference in performance, and
complications like the smoothed but still present mapping
discontinuities around the evolute surface.

Wiki:
https://wiki.blender.org/wiki/Source/Animation/B-Bone_Vertex_Mapping
#110758
#110758
-------
,
Wiki
)
The new mapping is slower to compute, but produces better deformation
when the B-Bone is strongly curved in the rest pose, e.g. in a corner of
the mouth:
Straight Mapping
Curved Mapping
Deformation
Preserve Volume
¶
The long standing issue with Preserve Volume causing distortion when
rotation is combined with scaling has been fixed.
(
f12e9f32b5
### Commit Summary: Fix #32022, #43188, #100373, Armature modifier - Preserve volume + Scale · f12e9f32b5 - blender - Blender Projects
### Commit Details:
Fixes armature deformation bug when Preserve Volume is enabled and deforming bones are both rotated and scaled.

The bug happens because Preserve Volume uses Quaternion to interpolate rotations.  A bone has 3 parts of data describing its deformation: Quaternion(w,x,y,z) rotation (`quat`), Translation(w,x,y,z) (`trans`), and Scaling(4x4 matrix) (`scale`). To calculate deformed position of a vertex `r`, it will be firstly scaled by `scale`, then rotated and translated by `quat & trans`.

The 4x4 scaling matrix `scale` has a 3x3 part `S33` about scaling and shearing along 3 axes, and a vector part `ST3` that further translate the scaled position. i.e. `scale@r = S33@r + ST3`. This enables scaling about an arbitrary "pivot" (a point `r0` satisfies `scale@r0 = r0`).

However, when blending influence of multiple bones, different bones have different scaling pivot (their head position). Since quaternion rotation and translation/scaling are not commutative operations, this is what I believe causing this bug.

How this is fixed:

Note that the translational part `ST3` of the scaling matrix is redundant in functionality with Translational part `trans` in deformation data. There exists an equivalence transformation that simultaneously change `trans` and `ST3`, while keeping the deformation unchanged.

I applied this equivalence transformation to move the pivot to the vertex that the bones are deforming, before blending multiple bone transformations. Note that now the vertex is the pivot, so scaling transformations will not change its position. Further blending/applying of scaling matrices can be avoided.

#108134
-------
,
dee29f4e81
### Commit Summary: Armature: apply new DualQuat scale handling to constraints and crazyspace. · dee29f4e81 - blender - Blender Projects
### Commit Details:
The
f12e9f32b5
patch introduced a new improved method of blending
dual quaternion transformations to handle combined scale and rotation
better. However, the changes were not complete:

* The new math ignored crazyspace computations, which need to compute
  a complete transformation matrix. As an optimization, the new method
  avoided fully computing the scale component, so the matrix would
  have no scale or shear.
* The Armature constraint is supposed to behave identically to the
  modifier, and it was not updated. The constraint also requires
  computing a complete matrix.

This change extracts the new math into a utility function, change
the optimization to be controlled by a parameter, and use the new
function in the constraint.

#111759
-------
)
Example deformation of a rotated and uniformly scaled down joint.
Before
After
NLA Editor
¶
NLA Strips can now be vertically re-ordered. Strips can vertically be
  dragged through existing strips, and locked tracks.
  (
4268ac0ed9
### Commit Summary: Animation: NLA Vertical Reorder · 4268ac0ed9 - blender - Blender Projects
### Commit Details:
Allow NLA strips to be vertically re-ordered. NLA strips can now be dragged through other strips, and locked tracks.

Co-authored-by: Sybren A. Stüvel
#107990
-------
)
Vertically clamp scrolling to view. Preventing infinite scrolling.
  (
7146371964
### Commit Summary: Animation: Vertically locking the NLA so it doesn't scroll to infinity · 7146371964 - blender - Blender Projects
### Commit Details:
Applying vertical scroll lock from
#104516
to NLA editor

#109473
-------
)
Graph Editor
¶
Editing
¶
Interactive sliders for Match Slope, Blend To Ease, Blend Offset,
  Shear Keys, Scale Average, Time Offset, Push/Pull. (
PR#110567
,
PR#110566
,
PR#110544
,
PR#111735
,
PR#111744
,
PR#110540
,
PR#112388
)
New graph editor operators
Butterworth Smoothing filter. (
PR#106952
)
Butterworth Smoothing Filter
Select/deselect handles from current selection. (
PR#111143
)
Performance
¶
The performance of the Graph Editor has been greatly enhanced for when
it comes to dense key data. (
PR#110301
,
PR#110764
,
PR#110788
,
PR#112126
,
In the following test setup with 6000 keys per channel on 62 bones,
performance was improved between 5x and 10x depending on the zoom level.
Performance comparison between 3.6 and 4.0
Animation playback timing was improved, to avoid jitter between frames.
(
#111579
)
FPS Jitter comparison
Weight Paint
¶
Add loop select for faces. (
PR#107653
)
User Interface
¶
Channel list background colors have moved from covering the entire
  background (making text hard to read) to a small rectangle. The
  channel background color is also more subtle and blends in better. As
  the feature now no longer causes hard to read text, the "Channel Group
  Colors" option in the preferences has been enabled by default.
  (
c524fbe623
### Commit Summary: Anim: Improve readability of channel colors in channel list · c524fbe623 - blender - Blender Projects
### Commit Details:
Draw anim channel colors as a little rectangle in the channel list,
instead of taking over the entire channel name background. This keeps
the channel names readable, regardless of the channel colors.

Channel colors are typically set via the bone colors, and since those
are chosen for visual contrast in the 3D Viewport, they aren't
guaranteed to also be a suitable background color for the channel list.
Because of this, it's no longer used as such.

The channel 'data' background (i.e. the keyframe area) is now drawn with
a consistent color, and much more subtle.

This also enables the 'Channel Group Colors' setting in the preferences
by default, as it is now way less obnoxious and invasive.

Design task:
#69059
Reviewed-On:
#112861
-------
)
Improved drawing of locked FCurves. (
PR#106052
)
Multi Editing for FCurve modifiers. (
PR#112419
)
Support adjusting the number of samples used for FPS playback display
  in the preferences.
  (
b150b47720
### Commit Summary: UI: add a preference for the number of samples used for FPS playback · b150b47720 - blender - Blender Projects
### Commit Details:
This was hard coded to 8, which can still result in a number that
jitters making the overall FPS difficult to measure.

The default is still 8, but this is now a preference that can be
increased for values that don't jitter as much.
-------
)
Rename "Bake Curve" to "Keys to Samples". (
PR#111049
)
Rename "Sample Keyframes" to "Bake Keyframes". (
PR#112148
,
PR#112151
)
Keep icons aligned when curves are baked. (
PR#108518
)
Channel Drawing in Blender 3.6
Blender 4.0
Breaking Changes
¶
1-9 hotkeys for switching collection visibility have been removed from
  Pose Mode. (
PR#105120
)
Certain Graph Editor Slider tools had their range changed from 0-1 to
  -1/1: Blend to Neighbor, Breakdown, Ease. (
PR#107173
)
Making Make Vertex Weight Edit modifier Group Add / Remove threshold
  inclusive.
1837bda030
### Commit Summary: Animation: Make Vertex Weight Edit modifier inclusive · 1837bda030 - blender - Blender Projects
### Commit Details:
Update VertexWeighEdit modifier  Group Add / Remove threshold to be inclusive.

Additionally, add 3.6 backwards compatibility (4.0 versioning) to slightly offset Group Add / Remove threshold property value to make exclusive.

#108286
-------
The "Push Rest Pose" and "Relax Rest Pose" operators have been merge
  into "Blend Pose with Rest Pose". (
PR#108309
)
Update NLA "Duplicate hotkey" to be "Duplicate Linked" by default.
  (
8183f21258
### Commit Summary: Animation: Default NLA duplucation hot keys to duplicate linked · 8183f21258 - blender - Blender Projects
### Commit Details:
## Overview

Much like node groups, or a VSE clip, when we duplicate we actually want a _linked_ duplicate. This PR updates the NLA key board for Duplicate linked to `Shift + D`, and Duplicate to `Alt + D`.

Additionally, update Tool tips to reflect duplicate vs linked duplicate.

#110316
-------
)
The "Tab" shortcut to enter tweak mode in the NLA now defaults to
  "full stack evaluation".
  (
b95cf5ff0f
### Commit Summary: Animation: Update NLA "TAB" tweak mode to be full stack evaluation · b95cf5ff0f - blender - Blender Projects
### Commit Details:
This PR updates the key mapping (TAB) for Tweak mode (Lower stack) to Full stack for the NLA editor

[Issue](
#108026
)

#108050
-------
)
The Preserve Volume deformation fix may change deformation in existing
  rigs (see above).
Snapping for the Graph Editor, NLA and Dope Sheet have moved to the
  scene. (
PR#109015
)
Armature Layers and Bone Groups have been removed, and replaced with
  Bone Collections and per-bone colors (see above).
Bones influenced by an Inverse Kinematics (IK) constraint can now be
  keyed visually. This means that when the 'Use Visual Keying'
  preferenced is enabled, visual keying is used on such bones (where in
  Blender 3.6 and older still would create regular keys).
  (
eab95fa2aa
### Commit Summary: Anim: enable visual keying of IK-influenced bones · eab95fa2aa - blender - Blender Projects
### Commit Details:
Enable visual keying of bones that are influenced by an IK constraint.
This wasn't possible before, as the visual keying system only checked
constraints on the bone itself, and not whether the bone was part of an
IK chain.

This commit introduces a new `bPoseChannel::constflag` value
`PCHAN_INFLUENCED_BY_IK` that is set whenever the pose bone is part of
an IK chain.

The `pchan->constflag` field is computed during depsgraph evaluation. If
the depsgraph is active, it is now also written back to the original
pchan, so that it can be used in the "should visual keying be used"
function.
Fixes
:
#76791
"Different results when keyframing visual transforms and
applying transforms manually on IK constraint". Note that visually
keying does *not* copy the visual pose to the current pose. Furthermore,
when visually keying only part of the IK chain, the result of
re-evaluating the IK constraint (for example by moving the scene forward
and then backward by one frame) may still produce a different result, as
the IK chain now has a different start orientation.

Note that commit explicitly does not cover Spline IK constraints. They
can introduce heavy shear, especially with the default settings, which
cannot be represented by keys on loc/rot/scale.

For historical reference:
876cfc837e
introduces the 'use visual keying' preference option, where Blender
automatically chooses whether or not to use visual keying. This is why
there is a function at all that determines whether to use visual keying
or not.
-------
)

'''''


2. Blender 4.0: Geometry Nodes¶

Blender 4.0: Geometry Nodes
¶
Node-Based Tools
¶
Node
tools
### Commit Summary: Node-Based Tools — Blender Manual
### Commit Details:
No details found
-------
are an accessible way to expand Blender and customize tools without
requiring Python.
Edge to mesh node tools demo by Tim Greenberg (passivestar).
Geometry node node groups can now be used as operators from the 3D
  view menus.
Specific nodes are available for controlling tool-specific data:
Edit mode selection is accessible with the
Selection
and
  controllable with the
Set Selection
node.
Sculpt face sets are accessible as well with the
Face Set
and
Set Face Set
nodes.
The
3D Cursor
node gives access to the 3D cursor location and
  rotation.
Documentation is available in the
user manual
### Commit Summary: Node-Based Tools — Blender Manual
### Commit Details:
No details found
-------
.
See the
overview task
for
  more information.
Read the
announcement blog post
.
Watch the
live demo video
.
General
¶
The new
Repeat
zone allows repeating nodes a dynamic number of
  times.
See Manual
### Commit Summary: Repeat Zone — Blender Manual
### Commit Details:
No details found
-------
.
  (
3d73b71a97
### Commit Summary: Geometry Nodes: new Repeat Zone · 3d73b71a97 - blender - Blender Projects
### Commit Details:
This adds support for running a set of nodes repeatedly. The number
of iterations can be controlled dynamically as an input of the repeat
zone. The repeat zone can be added in via the search or from the
Add > Utilities menu.

The main use case is to replace long repetitive node chains with a more
flexible alternative. Technically, repeat zones can also be used for
many other use cases. However, due to their serial nature, performance
is very  sub-optimal when they are used to solve problems that could
be processed in parallel. Better solutions for such use cases will
be worked on separately.

Repeat zones are similar to simulation zones. The major difference is
that they have no concept of time and are always evaluated entirely in
the current frame, while in simulations only a single iteration is
evaluated per frame.

Stopping the repetition early using a dynamic condition is not yet
supported. "Break" functionality can be implemented manually using
Switch nodes in the  loop for now. It's likely that this functionality
will be built into the repeat zone in the future.
For now, things are kept more simple.

Remaining Todos after this first version:
* Improve socket inspection and viewer node support. Currently, only
  the first iteration is taken into account for socket inspection
  and the viewer.
* Make loop evaluation more lazy. Currently, the evaluation is eager,
  meaning that it evaluates some nodes even though their output may not
  be required.

#109164
-------
,
c8cc169d6f
### Commit Summary: Geometry Nodes: add Inspection Index to Repeat Zone · c8cc169d6f - blender - Blender Projects
### Commit Details:
Previously, it was only possible to inspect the data from the first iteration. That
applied to both, the viewer node as well as socket inspection. Now, there is a
new `Inspection Index` setting in the zone properties. It specifies which iteration
should be used by the inspection features.

In theory we could support features like counting the index from the end, but
that can be done separately as well, as it likely requires more UI.

#112818
-------
)
The mesh sharp edge status is accessible in builtin nodes.
  (
4e97def8a3
### Commit Summary: Geometry Nodes: Expose sharp edge status with builtin nodes · 4e97def8a3 - blender - Blender Projects
### Commit Details:
Change the existing "Is Shade Smooth" node to be named "Is Face Smooth"
and add a new "Is Edge Smooth" node. Also give the "Set Shade Smooth"
node the ability to set face or edge smoothness.

The fact that the nodes process "smooth" data reversed from the builtin
"sharp" attributes can be reversed with versioning in a separate commit.

While it's tempting to abstract the sharpness status into a single node,
face and edge smoothness are accessed separately in edit mode, and the
subtlety of interacting with data on different domains would make that
confusing. Instead, a separate "Is Shade Smooth" node group asset will
give all the sharp elements taking into account both builtin attributes.

The fact that sharpness is stored separately on two domains makes the
best design for simple operations non-obvious. For example, you should be
able to remove all sharpness or make everything flat with a single node.
The behavior depends on whether the two attributes exist and the
combination of values between the domains.

---

![image](/attachments/c3f053c4-2b0f-44ac-9227-62071065fe56)

![image](/attachments/fd489fb3-314b-42ff-a5a9-e79578cbdfe7)

#112029
-------
)
A new node and a modification to the "Set Shade Smooth" node to control the sharpness of mesh edges.
The
Mesh to Volume
node now generates a proper fog volume rather
  than a converted SDF.
  (
700d168a5c
### Commit Summary: Volumes: Generate proper fog volume in Mesh to Volume node · 700d168a5c - blender - Blender Projects
### Commit Details:
Currently `Mesh to Volume` creates a volume using
`openvdb::tools::meshToVolume` which is then filled with the specified
density and the class set to Fog Volume. This is wrong because
`meshToVolume` creates a signed distance field by default that needs
to be converted to a Fog Volume with `openvdb::tools::sdfToFogVolume`
to get a proper Fog volume.

Here is the description of what that function does (from OpenVDB):

"The active and negative-valued interior half of the narrow band
becomes a linear ramp from 0 to 1; the inactive interior becomes
active with a constant value of 1; and the exterior, including the
background and the active exterior half of the narrow band, becomes
inactive with a constant value of 0. The interior, though active,
remains sparse."

This means with this commit old files will not look the same.
There is no way to version this as the options for external band width
and not filling the volume is removed (they don't make any sense for a
proper fog volume).

#107279
-------
)
The "Exterior Band Width" and "Fill Interior" options have been
  removed.
The
Points to Curves
node groups point cloud points into curves
  and sorts each curve's points based on a weight.
  (
48b08199d5
### Commit Summary: Geometry Nodes: Points to Curves node · 48b08199d5 - blender - Blender Projects
### Commit Details:
New node to converts groups of points to curves. Groups
of points defined as `Curve Group ID` attribute. `Weight` in curve
is used for sort points in each group. Points of result curves
propagate attributes from original points. Implicit conversion
of other geometry types is not supported currently.

#109610
-------
)
A new debug utility helps to check procedural systems for bad index
  dependence.
  (
cc7da09c1b
### Commit Summary: Geometry: add utility to check for bad geometry element index dependence · cc7da09c1b - blender - Blender Projects
### Commit Details:
Sometimes .blend files have compatibility issues between Blender versions,
because .blend files depended on the specific order of geometry elements
generated by some nodes/modifiers (
#112746
,
#113018
). While we make
guarantees about the order in some places, that is relatively rare, because it
makes future improvements much harder. The functionality in this patch
makes it easier for users to notice when they depend on things that are not
expected to be stable between Blender builds.

This is achieved by adding a new global flag which indicates whether some
algorithms should randomize their output. The functionality can be toggled
on or off by searching for `Set Geometry Randomization`. If there are no
differences (or acceptable minor ones) when the flag is on or off, one can
be reasonably sure that one does not on unspecified behavior (can't be 100%
sure though, because randomization might be missing in some places). If
there are big differences, one should consider fixing the file before it comes
to an actual breakage in the next Blender version.

Currently, the setting is only available when `Developer Extras` is turned on,
because the setting is in no menu.

With this patch, if we get bug reports with compatibility issues caused by
depending on indices, one of the following three cases should always apply:
* We actually accidentally broke something, which requires a fix commit.
* Turning on geometry randomization shows that the .blend file depends on
  things it shouldn't depend on. In this case the user has to fix the file.
* We are missing geometry randomization somewhere, which requires a fix
  commit.

#113030
-------
)
Rotation sockets and eight new rotation nodes are available for
  simpler processing.
See
  Manual
### Commit Summary: Rotation Utility Nodes — Blender Manual
### Commit Details:
No details found
-------
.
  (
34e4bedcd8
### Commit Summary: Nodes: Move rotation socket out of experimental · 34e4bedcd8 - blender - Blender Projects
### Commit Details:
See
#92967
.

#111448
-------
).
Axis Angle to Rotation
Rotation to Axis Angle
Quaternion to Rotation
Rotation to Quaternion
Euler to Rotation
Rotation to Euler
Rotate Vector
Invert Rotation
Simulation zones can now be baked individually.
  (
ad169ba67a
### Commit Summary: Geometry Nodes: support baking individual simulations · ad169ba67a - blender - Blender Projects
### Commit Details:
Previously, it was only possible to bake all simulations at once. This is great
for simple use-cases that, but in more complex setups one can have independent
simulations that should also be baked independently. This patch allows baking
individual simulation zones.

Furthermore, each simulation zone can now also have its own bake path and
simulation frame range. By default the simulation frame range is the scene frame
range, but it can also be customized on the scene or simulation zone level. The
bake path is generated based on the modifier bake path by default, but can be
set to another absolute or relative (to the .blend file) path.

The timeline drawing has been modified as well to be able to show more information
in the case when some simulations are baked and others are not. Instead of showing
a line for every simulation, it shows a condensed view of the important information
using at most two lines:
Is something baked? Is something valid or invalid? Also see
#112232
.

#112723
-------
)
The
Simulation Output
node has a new Skip input.
  (
dd515ebc1d
### Commit Summary: Geometry Nodes: add Skip input to Simulation Output node · dd515ebc1d - blender - Blender Projects
### Commit Details:
This adds a new Skip input to the Simulation Output node (design task:
#112082
).
It is a convenience feature that makes it easy to conditionally forward the
output of the Simulation Input node to the Simulation Output node, without the
need for potentially multiple Switch nodes. When Skip is enabled, the other inputs
of the Simulation Output node are not evaluated, i.e. the nodes in the simulation
zone are ignored.

The implementation adds this new functionality directly to the `LazyFunction`
of the Simulation Output node. It has new inputs that are linked directly
to the Simulation Input node, so that the simulation state can be forwarded.

#112140
-------
)
Modifiers
¶
The "Add Modifier" menu has been changed to a standard menu and is
  extended with custom modifiers from geometry node group assets.
  (
6da4b87661
### Commit Summary: Geometry Nodes: Extend add modifier menu with node group assets · 6da4b87661 - blender - Blender Projects
### Commit Details:
Implements part of
#111538
.

Change the modifier add button to create a menu with submenus.
Extend the submenus dynamically with geometry node group assets.
This makes it much simpler to share and use custom modifiers.

Node groups get a new "Is Modifier" property, which is controllable
in a popover in the node editor header when the group is an asset.

The built in modifier can be rearranged in different categories in
a next step. For now the existing organization is used, except for
the geometry nodes modifier, which is called "Empty Modifier" and
put in the root menu.

The changes in
!110855
and
!110828
will be important to improve
interaction speed with the new UI. Those are planned for 4.0 as well.

#111717
-------
)
When geometry node groups are marked as assets and the "Is Modifier"
  property is enabled, the asset catalog path is used to dynamically
  create the modifier menu.
Assets unassigned to any node group are displayed in a separate
  "Unassigned" category.
  (
d2d4de8c71
### Commit Summary: Geometry Nodes: Show uncategorized assets in separate menus · d2d4de8c71 - blender - Blender Projects
### Commit Details:
In the add modifier menu, 3D viewport menus for node tools, and the node
editor add menu, assets not in catalogs are added to an "No Catalog"
menu rather than not being accessible at all.

This makes the default behavior when adding a node tool "not broken"
so at least something happens by default. The question of "How do I
add a catalog?" is much better than "Why didn't anything happen?"

Implements
#111529
See
#101778
---

![image](/attachments/b943e2c4-f660-4812-b9ab-f7c116b68b98)
![image](/attachments/e6ee94d7-cd14-475f-8fa6-abcc6774fd7e)
![image](/attachments/b1718d0c-4182-49c5-867a-1399082e98f0)

#112355
-------
)
Two new options help to clean up the modifier interface
The node group selector can be disabled, which happens by default
  for node group asset modifiers.
  (
0783debda8
### Commit Summary: Geometry Nodes: Hide node group selector for asset modifiers · 0783debda8 - blender - Blender Projects
### Commit Details:
When adding modifiers from assets in the new modifier menu, switching
the node group the modifier uses afterwards will not be common. The goal
is to replace the builtin modifier directly. In that case it's easier to
just add a new modifier. The "Empty Modifier" item makes it easy to
choose an arbitrary node group anyway.

Combined with hiding the two sub-panels when they are unnecessary,
many node-modifiers will look just as clean as their builtin counterparts.

The option to show the data-block selector is added to the menu
in the node header so it's still accessible though.

#111995
-------
)
Inputs can be forced to be single values to remove the attribute
  toggle.
  (
6875925efa
### Commit Summary: Geometry Nodes: Add option to force inputs to be single values · 6875925efa - blender - Blender Projects
### Commit Details:
Add a checkbox to node group inputs to force inputs to be single values
and not accept varying fields. While this could also be done more
automatically, and it could be argued that requiring the flexibility is
helpful for users who want to use attributes, there are cases where the
field inferencing doesn't work, or the "use attribute" option is just
unhelpful. People use workarounds with primitive nodes to get the same
behavior anyway.

#112745
-------
)
This also removes the attribute toggle in the node tool redo
  panel.
The node group toggle and the attribute toggle are visible in the modifier
No attribute toggle or node group selector
Performance
¶
The
Curve to Mesh
node is significantly faster when the profile
  input is a single point.
When the input point is at the origin, tangent, normal, and radii
  calculations are skipped, giving a 2x improvement.
  (
6e9f54cbda
### Commit Summary: Curves: Avoid calculations in curve to mesh single point case · 6e9f54cbda - blender - Blender Projects
### Commit Details:
When the profile is the default (or manually set to a single point at
the origin), avoid computing tangents and normals, and avoid evaluating
the radius attribute. That data is only used to build the transforms of
the new points. In a simple test case, this changed the total time from
34.4 to 14.7 ms (removing the cost 4.7, 8.4, and 2.1 ms) cost of
calculating tangents, normals, and radii.
-------
)
Handling with many point-domain attributes is improved, with an
  observed 4x improvement.
  (
48fad9cd0c
### Commit Summary: Curves: Optimize curve to mesh with single point profile · 48fad9cd0c - blender - Blender Projects
### Commit Details:
When the profile is a single point, and all the curves are poly curves,
the mesh has the same number of points as the curves, and attributes
can be shared, reducing memory usage and time spend copying. This
doesn't apply to positions yet though. With 8 attributes, the
time for the conversion in a test went from 55 to 14 ms.

When profile is a single point but the curves aren't poly curves,
we can evaluate main point attributes directly into the mesh attribute
arrays rather than using a temporary buffer. In a test with 8
attributes, the time went from 3.7 to 1.6 ms.
-------
)
Further improvements avoiding copying attributes entirely are
  possible when all curves are poly curves.
  (
bef20cd3f1
### Commit Summary: Curves: Share positions array for single point profile at origin · bef20cd3f1 - blender - Blender Projects
### Commit Details:
This is the same as
48fad9cd0c
but applied to the positions
array instead of other generic attributes. For test case with 90k poly
curves, this reduced the conversion time from 1.7 to 1.3 ms, and reduced
memory usage from 67 to 59 MiB (as reported by Blender).
-------
)

'''''


3. Blender 4.0: Modeling¶

Blender 4.0: Modeling
¶
Modifiers
¶
The Add Modifier menu has been changed to a standard menu and now
includes
geometry nodes assets
.
A new "Shift A" shortcut opens the Add Modifier menu in the properties
editor.
Snap and Navigation
¶
You can now press
B
to set
base point
when you transform
objects. This allows for a fast and precise snap from vertex to vertex.
Additionally you can navigate while transforming while holding
Alt
,
and there are different snap symbols for the different snap types
(vertex, mid-point, perpendicular, ...).
Video
All Snap Improvements
It is now possible to navigate while transform (Move, Rotate, Scale,
  Edge Slide, Vert Slide, and Shrink/Fatten), by default you have to
  hold
Alt
and navigate.
  (
33c13ae6e3
### Commit Summary: Transform: support navigation while transforming in 3D view · 33c13ae6e3 - blender - Blender Projects
### Commit Details:
Implements a new option in keymap settings:
- "Navigate during Transform"

Note that with the option enabled, the keymap changes as follows:

|Modal Map (Blender):| Conflict: | Current: | New:
|---|---|---|---
| Increase Proportional Influence | VIEW3D_OT_zoom | Wheel Down | Alt Wheel Down
| Decrease Proportional Influence | VIEW3D_OT_zoom | Wheel Up | Alt Wheel Up
| Adjust Proportional Influence | VIEW3D_OT_rotate | Mouse/Trackpad Pan | Alt Mouse/Trackpad Pan
| Increase Max AutoIK Chain Length | VIEW3D_OT_zoom | Wheel Down | Alt Wheel Down
| Decrease Max AutoIK Chain Length | VIEW3D_OT_zoom | Wheel Up | Alt Wheel Up
| Automatic Constraint | VIEW3D_OT_rotate | Middle Mouse | Alt Middle Mouse
| Automatic Constraint Plane | VIEW3D_OT_move | Shift Middle Mouse | Shift Alt Middle Mouse

Design Task:
#106008
#105764
-------
,
017d4912b2
### Commit Summary: Transform: Use alternative hotkeys for Transform Navigation · 017d4912b2 - blender - Blender Projects
### Commit Details:
In order to avoid navigation hotkey conflicts during transform
operations, this commit implements the "Transform Navigation with Alt"
option.

This option is enabled by default and makes navigation hotkeys require
the `Alt` key during a transforming in the 3D View.

#109754
-------
).
Transform operations now have a new feature to edit the 'Snap Base'
  (
3010f1233b
### Commit Summary: Transform: new feature to edit the 'Snap Base' · 3010f1233b - blender - Blender Projects
### Commit Details:
This commit implements a new modifier key (`B`) for the transform
operators.

This new key allows changing the 'Snap Base' of a transform by snapping
it to a defined point in the scene.

Ref
#66424
# Implementation Details

- This feature is only available in the 3D View.
- This feature is only available for the transform modes:
  - `Move`,
  - `Rotate`,
  - `Scale`,
  - `Vert Slide` and
  - `Edge Slide`.
- The `Snap Base Edit` is enabled while we are transforming and we
  press the key `B`
- The `Snap Base Edit` is confirmed when we press any of the keys:
 `B`, `LMB`, `Enter`
- During um operation, if no snap target is set for an element in the
  scene (Vertex, Edge...), the snap targets to geometry Vertex, Edge,
  Face, Center of Edge and Perpendicular of Edge are set automatically.
- Constraint or similar modal features are not available during the
  `Snap Base Edit` mode.
- Text input is not available during the `Snap Base Edit` mode.
- A prone snap base point is indicated with an small cursor drawing.

#104443
-------
).
Bones now support snapping with "Align Rotation to Target"
  (
dea93845af
### Commit Summary: Fix #108711: Snap with Align Rotation to Target do not align rotation for Empties or Bone · dea93845af - blender - Blender Projects
### Commit Details:
For now it only supports the body of the bone.

Head and tail will be supported later.
-------
and
4d1593c4ad
### Commit Summary: Transform Snap: Improve snap for bones · 4d1593c4ad - blender - Blender Projects
### Commit Details:
In order to better identify which is the normal of the point
(see
#108711
), it is interesting to identify which is the closest bone.

So, instead of testing the snap at each point and then each bone line,
test the bone lines first and after identifying the closest one, test
its points.

With the nearest bone identified, we can use its normal instead.
-------
).
New snap symbols
  (
9c2e768f5b
### Commit Summary: Snap: Show different symbols for different types · 9c2e768f5b - blender - Blender Projects
### Commit Details:
Add a set of symbols to improve visualization of different snap types.

- Circle: Represents snapping to a vertex.
- Two Aligned Lines: Represent snapping to an edge.
- Closed Aligned Square: Represents snapping to a specific part of an edge (center or perpendicular).
- Face-Aligned Circle with Midline: Represents snapping to a face.

#109387
-------
,
fb556c75df
### Commit Summary: Snap: New icons · fb556c75df - blender - Blender Projects
### Commit Details:
For Blender 4.0 we decided to support individual icons for different
snap elements.

This was originally contributed by Erik Abrahamsson as
!107054
with
some contributions by myself (Germano).

This set of icons being simple geometric symbols, that should be
familiar to CAD artists.

Note that Face and Volume share the same icon (circle). This is
deliberate since they communicate a similar functionality - are not
aimed at precision snapping the same way the vertex or perpendicular
are.

Also note that later we should also try to change the icons shown in
the snap menu to match the symbols that the artists see in the preview
window.

———

On the decision process:

The version currently in main (and rolled back here) was an initial
attempt of aggregating more information to the icons (e.g., by aligning
the icons to the target edges) while making them more suitable to
Blender. After presenting both options to (parts of the) community,
there was nothing fundamentally broken found with either option, though
options diverged over personal preference.

With that in mind, in the latest UI module meeting it was agreed to use
the original proposal then.

This final call was proposed by Dalai Felinto on his role of
commissioner (stakeholder) for the snap polishing tasks (
#73993
) and
designer for the related Snap Base design
#66484
.

———

This commit reverts commit
9c2e768f5b
.

The reverted icons (referred originally as minimalistic icons) may be
proposed later as a separate theme option.
-------
).
User Interface
¶
Snapping Menu
The snapping menu has been reworked
(
8e059b569b
### Commit Summary: UI: move 'Face Nearest' snap option to another section · 8e059b569b - blender - Blender Projects
### Commit Details:
The snap mode called "Face Nearest" (and the "Increment" but that's for
another time) doesn't behave like the other snap modes.

Unlike the other snap modes, "Face Nearest" does not act on a Snap
Base (or Snap Source).

It always acts on the origin of individually transformed elements, (such
as each vertex individually).

It works just like the "Project Individual Elements" option.

So this commit makes the following changes:
- `Snap With` was moved to the beginning of the popover
- `Align Rotation to Target` and `Backface Culling` have been moved closer to the snap targets
- `Snap With`, `Target Selection` and `Align Rotation to Target` are no longer hidden by varying the mode and options
- `Project Individual Elements` has been replaced with the `Face Project` option
- `Face Nearest` has been moved to stick together with the `Face Project` option

Co-authored-by: Germano Cavalcante
#108555
-------
).
Snap With
was moved to the beginning of the popover
Align Rotation to Target
and
Backface Culling
were moved closer to
  the snap targets
Snap With
,
Target Selection
and
Align Rotation to Target
are no
  longer hidden by varying the mode and options
Project Individual Elements
has been replaced with the
Face
  Project
option
Face Nearest
has been moved to stick together with the
Face
  Project
option
Shape Keys
¶
The Blend From Shape and Propagate To Shapes operators now respect X
  symmetry
  (
0bd95dd963
### Commit Summary: Mesh Edit: implement X symmetry in the Blend From Shape operator. · 0bd95dd963 - blender - Blender Projects
### Commit Details:
This symmetrizes selection and vertex positions like any other operator.

Pull Request
#105421
-------
,
4d0dbab5b1
### Commit Summary: Mesh Edit: implement X symmetry in the Propagate To Shapes operator. · 4d0dbab5b1 - blender - Blender Projects
### Commit Details:
Since the operator affects shape keys rather than current mesh
coordinates, this only symmetrizes the selection.

Pull Request
#105421
-------
)
UV Editor
¶
Add Invert Pins operator.

'''''


4. Blender 4.0: Sculpt, Paint, Texture¶

Blender 4.0: Sculpt, Paint, Texture
¶
Enhancements
¶
Vertex Paint: Add set vertex colors option to lock alpha (
PR#111002
)
Sculpt: Remove dynamic topology "Smooth Shading" option (
PR#110548
)
Sculpt: Expand Mask inverted fill (
PR#111665
)
Weight Paint: Allow setting weights (Ctrl+X) without paintmask enabled
  (
0b1d2d63fe
### Commit Summary: Allow setting weights (Ctrl+X) without paintmask enabled · 0b1d2d63fe - blender - Blender Projects
### Commit Details:
Currently if there is no selection mode enabled the operator is disabled and greyed
out in the menu. The shortcut doesn't do anything, which can be unexpected and jarring.

With this PR the operator will work when no selection mode is enabled and in that case
fill the entire mesh using the Weight from the active tool.
This is then consistent with vertex paint mode and the "Set Vertex Color" operator.

So now remove the overly-strict `mask_paint_poll` poll (and replace with
more appropriate `weight_paint_mode_poll`).

NOTE: `mask_paint_poll` is now unused, could be removed
#112413
-------
)

'''''


5. Blender 4.0: Shading & Texturing¶

Blender 4.0: Shading & Texturing
¶
Principled BSDF
¶
The Principled BSDF node has been revamped to support a wide ranger of
material types.
Sheen uses a new microfiber shading model, and is the top layer above
  emission and coat. Traditionally sheen has been used for fuzzy cloth,
  but now it can also be used for dust on arbitrary materials.
Coat was placed above the emission layer. This can be used to simulate
  for example an emissive phone screen behind glass. Coat tint and IOR
  inputs were added, so that it can be used for more than a white
  clearcoat.
Subsurface scattering uses the base color instead of a separate color
  input. There is a new subsurface scale input to adjust the RGB radius.
Specular reflection and transmission are now primarily controlled by a
  single index of refraction input. For texturing, a new IOR Level input
  adjust the amount of specular reflection. For artistic purposes,
  specular tint be can set to an arbitrary color.
Metallic surfaces gained edge tinting using the specular tint input.
  This is an artist friendly parameter to render complex index of
  refraction, based on the F82 tint model.
Multiple scattering GGX is more efficient to render in Cycles, and now
  used by default. Layering of the components as a whole is more energy
  conserving, which means existing materials can render slightly darker
  or lighter depending on the scene.
See the
Principled BSDF manual page
### Commit Summary: Principled BSDF — Blender Manual
### Commit Details:
No details found
-------
for details.
Sheen to add layer of dust
Scene by Alaska using assets from Poly Haven.
Metallic tint from white to orange, for materials like gold.
Coat tint from white to blue, for materials like car paint.
BSDF Nodes
¶
The Glossy and Anisotropic BSDF were merged into a single Glossy BSDF
  with anisotropy control. When opening files saved in 4.0 in older
  versions, all "Glossy BSDF" nodes will show up as Anisotropic BSDF
  nodes.
  (
8cde7d8f8a
### Commit Summary: Cycles: Merge Anisotropic BSDF node into Glossy BSDF node · 8cde7d8f8a - blender - Blender Projects
### Commit Details:
Used to be
https://archive.blender.org/developer/D17123
.

Internally these are already using the same code path anyways, there's no point in maintaining two distinct nodes.

The obvious approach would be to add Anisotropy controls to the Glossy BSDF node and remove the Anisotropic BSDF node. However, that would break forward compability, since older Blender versions don't know how to handle the Anisotropy input on the Glossy BSDF node.

Therefore, this commit technically removes the Glossy BSDF node, uses versioning to replace them with an Anisotropic BSDF node, and renames that node to "Glossy BSDF".

That way, when you open a new file in an older version, all the nodes show up as Anisotropic BSDF nodes and render correctly.

This is a bit ugly internally since we need to preserve the old `idname` which now no longer matches the UI name, but that's not too bad.

Also removes the "Sharp" distribution option and replaces it with GGX, sets Roughness to zero and disconnects any input to the Roughness socket.

#104445
-------
)
Normal Map now has better interpolation for the Strength input for
  tangent space normal maps, avoiding the normal going below the surface
  for strength larger than 1. This changes the looks of existing renders
  where Strength was not 1. (
PR#109763
)
The Velvet BSDF node has been renamed to Sheen BSDF, and a new shading
  model ("Microfiber") has been added as the default option. The
  previous model is still available as "Ashikhmin", so existing files
  remain unchanged. (
PR#108869
)
The new model is an implementation of
"Practical
  Multiple-Scattering Sheen Using Linearly Transformed Cosines" by
  Tizian Zeltner, Brent Burley and Matt Jen-Yuan
  Chiang
,
  which approximates the effect of multiple scattering between
  normal-oriented microscopic fibers using LTC distributions.
This BSDF is only supported in Cycles so far, in EEVEE it will be
  rendered as a diffuse BSDF.
Texture Nodes
¶
Noise Texture
¶
New inputs for the Noise Texture node, which generates fractal Perlin
noise.
(
0702c24a36
### Commit Summary: Nodes: Add Lacunarity and Normalize inputs to Noise node · 0702c24a36 - blender - Blender Projects
### Commit Details:
This PR adds the Lacunarity and Normalize inputs to the Noise node
similar to the Voronoi node.

The Lacunarity input controls the scale factor by which each
successive Perlin noise octave is scaled. Which was previously hard
coded to a factor of 2.

The Noise node normalizes its output to the [0, 1] range by default.
The Normalize option makes it possible for the user to disable that.
To keep the behavior consistent with past versions it is enabled by
default.

To make the aforementioned normalization control easer to implement,
the fractal noise code now accumulates signed noise and remaps the
final sum, as opposed to accumulating positive [0, 1] noise.

#110839
-------
)
Normalize: normalize output to be within 0..1 range. This is most
  useful for colors or blending factors, while bump or displacement does
  not need it.
Lacunarity: the factor each successive layer is scaled with.
Voronoi Texture
¶
The Voronoi Texture node has support for fractal noise now, to add
multiple layers of details. There are 3 new inputs.
(
144ad4d20b
### Commit Summary: Nodes: add Fractal Voronoi Noise · 144ad4d20b - blender - Blender Projects
### Commit Details:
Fractal noise is the idea of evaluating the same noise function multiple times with
different input parameters on each layer and then mixing the results. The individual
layers are usually called octaves.
The number of layers is controlled with a "Detail" slider.
The "Lacunarity" input controls a factor by which each successive layer gets scaled.

The existing Noise node already supports fractal noise. Now the Voronoi Noise node
supports it as well. The node also has a new "Normalize" property that ensures that
the output values stay in a [0.0, 1.0] range. That is except for the F2 feature where
in rare cases the output may be outside that range even with "Normalize" turned on.

How the individual octaves are mixed depends on the feature and output socket:
- F1/Smooth F1/F2:
  - Distance/Color output:
    The individual Distance/Color octaves are first multiplied by a factor of
    `Roughness ^ (#layers - 1.0)` then added together to create the final output.
  - Position output:
    Each Position octave gets linearly interpolated with the combined output of the
    previous octaves. The Roughness input serves as an interpolation factor with
    0.0 resutling in only using the combined output of the previous octaves and
    1.0 resulting in only using the current highest octave.
- Distance to Edge:
  - Distance output:
    The Distance octaves are mixed exactly like the Position octaves for F1/Smooth F1/F2.

It should be noted that Voronoi Noise is a relatively slow noise function, especially
at higher dimensions. Increasing the "Detail" makes it even slower. Therefore, when
optimizing a scene one should consider trying to use simpler noise functions instead
of Voronoi if the final result is close enough.

#106827
-------
)
Detail: number of layers to compute.
Roughness: how much influence the higher layers have on the final
  output
Lacunarity: the factor each successive layer is scaled with.
Additionally a "Normalize" property was added, which if checked will
remap the Distance and Color outputs to a [0.0, 1.0] range.
Detail 1.0
2.0
4.0
Roughness 0.25
0.5
1.0
Lacunarity 2.0
4.0
8.0
Lights
¶
Light UV is now available for all light sources in Image Texture node
  (
PR#108691
)
Light sources have slightly different behaviors than before for
  energy preservation and better compatibility with other renders
#108505
,
  including:
Point light and spot light are changed to double-sided sphere lights
  (
PR#108506
PR#109329
).
  Besides, the light normal now points from light center to the
  sampled/intersected position on the sphere, any pipeline that was
  using the light normal should use the Incoming socket of the
  Geometry shader node instead.
Sun light behaves better at large angular diameters, and gives the
  same intensity regardless of the angular diameter.
  (
PR#108996
)
Corrected conversion factor for area lights
  (
482211b7e0
### Commit Summary: Fix wrong conversion from power to radiance of area lights · 482211b7e0 - blender - Blender Projects
### Commit Details:
The correct conversion factor should be 1 / (pi * area), see
#108505
Co-authored-by: Brecht Van Lommel
#109153
-------
)

'''''


6. Blender 4.0: Cycles¶

Blender 4.0: Cycles
¶
Light and Shadow Linking
¶
With light linking, lights can be set to affect only specific objects in
the scene. Shadow linking additionally gives control over which objects
acts as shadow blockers for a light.
(
ba3f26fac5
### Commit Summary: Cycles: light and shadow linking · ba3f26fac5 - blender - Blender Projects
### Commit Details:
With light linking, lights can be set to affect only specific objects in the
scene. Shadow linking additionally gives control over which objects acts a
shadow blockers for a light.

Usage:
https://wiki.blender.org/wiki/Reference/Release_Notes/4.0/Cycles
Implementation:
https://wiki.blender.org/wiki/Source/Render/Cycles/LightLinking
Ref
#104972
Co-authored-by: Brecht Van Lommel
-------
)
This adds more artistic control for lighting by breaking the laws of
physics. For example the environment and characters in a shot might have
different light setups. A character could have a dedicated linked rim
light to make it stand out, and shadow linking could be used to ensure
no objects from the environment block it.
See the
Light Linking in the user
manual
### Commit Summary: Light Linking — Blender Manual
### Commit Details:
No details found
-------
for more details.
Light Linking for Rim Shading
No Rim Light
Rim Light on All Objects
In a future version we plan to support linking to the world lighting,
and add a more convenient user interface to view and manage all light
links in a scene.
Examples
¶
All Lights
Light Linking
Different light per car part, to finely control shape of reflections.
Scene by Fernando Alcala using asset by LRosario.
All Lights
Light Linking
Light linking used to artificially eliminate reflections on the eyes and tree branch.
Scene by Alaska Young and Daniel Bystedt.
Character
Background
Volume
Combined
Distinct lights for character, background and volume.
Scene by Fernando Alcala using Blendswap asset by adi.
Path Guiding
¶
Path Guiding now works on glossy surfaces in addition to diffuse
surfaces. This can significantly reduce noise on glossy surfaces, and
find otherwise missing glossy light paths. (
PR#107782
)
Diffuse Guiding
New Glossy Guiding
Scene by Fernando Alcala and LRosario, made using assets from Blendswap.
Multiple Scattering GGX
¶
The Multiscattering GGX implementation was replaced by an approximation
based on
"Practical multiple scattering compensation for microfacet
models" by Emmanuel
Turquin
.
(
888bdc1419
### Commit Summary: Cycles: Remove MultiGGX code, replace with albedo scaling · 888bdc1419 - blender - Blender Projects
### Commit Details:
While the multiscattering GGX code is cool and solves the darkening problem at higher roughnesses, it's also currently buggy, hard to maintain and often impractical to use due to the higher noise and render time.

In practice, though, having the exact correct directional distribution is not that important as long as the overall albedo is correct and we a) don't get the darkening effect and b) do get the saturation effect at higher roughnesses.

This can simply be achieved by adding a second lobe (
https://blog.selfshadow.com/publications/s2017-shading-course/imageworks/s2017_pbs_imageworks_slides_v2.pdf
) or scaling the single-scattering GGX lobe (
https://blog.selfshadow.com/publications/turquin/ms_comp_final.pdf
). Both approaches require the same precomputation and produce outputs of comparable quality, so I went for the simple albedo scaling since it's easier to implement and more efficient.

Overall, the results are pretty good: All scenarios that I tested (Glossy BSDF, Glass BSDF, Principled BSDF with metallic or transmissive = 1) pass the white furnace test (a material with pure-white color in front of a pure-white background should be indistinguishable from the background if it preserves energy), and the overall albedo for non-white materials matches that produced by the real multi-scattering code (with the expected saturation increase as the roughness increases).

In order to produce the precomputed tables, the PR also includes a utility that computes them. This is not built by default, since there's no reason for a user to run it (it only makes sense for documentation/reproducibility purposes and when making changes to the microfacet models).

#107958
-------
)
This removes the performance and noise disadvantage that used to be
  associated with Multiscattering GGX, making it a safe default pick.
While the directional distribution is no longer theoretically ideal,
  which can lead to slight differences in rendered images, the overall
  effect of the multiscattering correction (preserving energy, avoiding
  darkening at high roughness, and increasing saturation at high
  roughness) still applies.
For highly anisotropic materials, the compensation might not be
  perfect. This is a limitation of the currently known approximation
  methods.
Principled Hair BSDF
¶
A new variant called "Huang" is added, based on the paper
A
Microfacet-based Hair Scattering
Model
by Weizhen Huang, Matthias B.
Hullin and Johannes Hanika (
PR#105600
).
The previous Principled Hair BSDF is now the "Chiang" variant.
Supports elliptical cross-sections, adding more realism as human hairs
  are usually elliptical. The orientation of the cross-section is
  aligned with the curve normal, which can be adjusted using geometry
  nodes. Default is minimal twist.
This is a far-field model, as opposed to the near-field Principled
  Hair BSDF model. The hair is expected to be less noisy, but lower
  roughness values takes longer to render due to numerical integration
  along the hair width. The hair also appears to be flat when viewed
  up-close.
Gives nicer focused reflection when viewed against the light.
For more detailed comparisons, please refer to the original paper and
the
Principled Hair user
manual
### Commit Summary: Principled Hair BSDF — Blender Manual
### Commit Details:
No details found
-------
.
Chiang Model
Microfacet Based Huang Model
Scene by Simon Thommes and Fernando Alcala.
Open Shading Language
¶
Most Cycles-specific microfacet closures were removed since they are
redundant now that Cycles implements the generic
microfacet()
closure of the OSL standard.
(
888bdc1419
### Commit Summary: Cycles: Remove MultiGGX code, replace with albedo scaling · 888bdc1419 - blender - Blender Projects
### Commit Details:
While the multiscattering GGX code is cool and solves the darkening problem at higher roughnesses, it's also currently buggy, hard to maintain and often impractical to use due to the higher noise and render time.

In practice, though, having the exact correct directional distribution is not that important as long as the overall albedo is correct and we a) don't get the darkening effect and b) do get the saturation effect at higher roughnesses.

This can simply be achieved by adding a second lobe (
https://blog.selfshadow.com/publications/s2017-shading-course/imageworks/s2017_pbs_imageworks_slides_v2.pdf
) or scaling the single-scattering GGX lobe (
https://blog.selfshadow.com/publications/turquin/ms_comp_final.pdf
). Both approaches require the same precomputation and produce outputs of comparable quality, so I went for the simple albedo scaling since it's easier to implement and more efficient.

Overall, the results are pretty good: All scenarios that I tested (Glossy BSDF, Glass BSDF, Principled BSDF with metallic or transmissive = 1) pass the white furnace test (a material with pure-white color in front of a pure-white background should be indistinguishable from the background if it preserves energy), and the overall albedo for non-white materials matches that produced by the real multi-scattering code (with the expected saturation increase as the roughness increases).

In order to produce the precomputed tables, the PR also includes a utility that computes them. This is not built by default, since there's no reason for a user to run it (it only makes sense for documentation/reproducibility purposes and when making changes to the microfacet models).

#107958
-------
)
Specifically, the
microfacet()
closure supports the distributions
beckmann
,
sharp
,
ashikhmin_shirley
,
ggx
,
multi_ggx
and
clearcoat
. The
refract
argument supports
0
for pure
  reflection,
1
for pure refraction, and
2
for both (based on
  dielectric Fresnel according to the specified IOR).
Additionally, the three MaterialX microfacet closures
dielectric_bsdf()
,
conductor_bsdf()
and
generalized_schlick_bsdf()
are provided. These only support
beckmann
,
ggx
and
multi_ggx
distributions.
Two Cycles-specific closures remain, but they are for internal use and
  should not be relied upon by user-created OSL shaders.
Metal Hardware Raytracing
¶
The new Apple M3 processor supports hardware ray-tracing. Cycles takes
advantage of this by default, with the MetalRT in the GPU device
preferences set to "Auto".
For the M1 and M2 processors MetalRT is no longer an experimental
feature, and fully supported now. However it is off by default, as
Cycles' own intersection code still has better performance when there is
no hardware ray-tracing.
Other
¶
Performance improvements to geometry upload from
Blender 3.6
continued, with a 1.76x improvement measure for a large mesh
  (
2fac2228d0
### Commit Summary: Cycles: Use Blender headers to access geometry data, avoid copy · 2fac2228d0 - blender - Blender Projects
### Commit Details:
Since
34b4487844
, attributes are always made mutable when
accessed from the RNA API. This can result in unnecessary copies, which
increases memory usage and reduces performance.

Cycles is the only user of the C++ RNA API, which we'd like to remove
in the future since it doesn't really make sense in the big picture.
Hydra is now a better alternative for external render engines.

To start that change and fix the unnecessary copies, this commit
moves to use Blender headers directly for accessing attribute and
other geometry data. This also removes the few places that still had
overhead from the RNA API after the changes ([0]) in 3.6. In a simple
test with a large grid, I observed a 1.76x performance improvement,
from 1.04 to 0.59 seconds to extract the mesh data to Cycles.

[0]:
https://wiki.blender.org/wiki/Reference/Release_Notes/3.6/Cycles#Performance
#112306
-------
).
Metal AMD GPU rendering has a significant performance regression in
  scenes that use the Principled Hair BSDF, in addition to existing lack
  of support for the light tree and shadow caustics. Due to GPU driver
  limitations that are unlikely to be fixed, it is expected that AMD GPU
  rendering on macOS will be disabled entirely in a future release.
Support for rendering with AMD RDNA2 and RDNA3 APUs is added.

'''''


7. Blender 4.0: Color Management¶

Blender 4.0: Color Management
¶
AgX View Transform
¶
The AgX view transform has been added, and replaces Filmic as the
default in new files.
(
a9053f7efb
### Commit Summary: Color management: Add AgX view transform and make it default · a9053f7efb - blender - Blender Projects
### Commit Details:
On a user level this view transform provides much better handling of colors in
the over-exposed areas.

With this configuration the following display devices are available, including
AgX view transform for them:
* sRGB
* Display P3
* Rec.1886
* Rec.2020

NOTE: There is no Filmic view transform available for the newly added display
devices.

AgX also brings an implementation of False Colors view transform, which replaces
Filmic-based, and is available for all display devices.

The backward compatibility is preserved. The new files will default to AgX view
transform, which makes it non-forward compatible.

More technical details is available in the original PR
#106355
.
Please note that the PR has been split into more incremental changes when
was landing.

#111099
-------
)
This view transform provides better color handling in over-exposed areas
compared to Filmic. In particular bright colors go towards white,
similar to real cameras. Technical details and image comparisons can be
found in
PR#106355
.
Filmic
AgX
Scenes by Eary Chow, Alaska Young and Leonard Siebeneicher. Using assets
from by Blender Studio, AmbientCG and Poly Haven.
HDR Display on macOS
¶
A new High Dynamic Range option was added in the Color Management >
Display panel. It enables display of extended color ranges above 1.0 for
the 3D viewport, image editor and render previews.
(
2367ed2ef2
### Commit Summary: macOS: Enable support for EDR rendering · 2367ed2ef2 - blender - Blender Projects
### Commit Details:
Add a High Dynamic Range option in the Color Management > Display panel.
This enables display of extended color ranges above 1.0 for the 3D
viewport, image editor and render previews.

This requires a monitor that can display HDR colors, and a view
transform designed for HDR output. The Standard view transform works,
but Filmic does not as it was designed to bring values into the 0..1
range for SDR displays.

This patch is limited to allowing the display to visualize extended
colors, but does not include future looking work to better integrate HDR
into the full workflow.

It is implemented by rendering to high bit-depth texture formats for
the user interface, and uncapping the color range in color management.

Authored by Apple: Michael Parkin-White

#105662
-------
)
This requires a monitor that can display HDR colors, and a view
transform designed for HDR output. The Standard view transform works,
but Filmic and AgX do not as they were designed to bring values into the
0..1 range for SDR displays.
New Color Spaces
¶
New linear spaces and display devices were added, together with some
renaming to improve clarity. Forward compatibility code is included into
Blender 3.6.
(
6923f7a153
### Commit Summary: Color management: Add and Rename Colorspaces · 6923f7a153 - blender - Blender Projects
### Commit Details:
This is the next step towards AgX view transform project.

This is a sanitization pass over the existing color space names, as well as
addition of some new spaces. For example, the name Linear makes no sense when
there are a bunch of Linear spaces. An aliases are included for backwards
compatibility.

Some of the space descriptions and family tags are also updated., which also
involves in putting `False Color` to `inactive_colorspaces` instead of using
`family: display` filtering.

The spaces are now:

- Linear components of the display spaces
  - Linear Rec.709
  - Linear DCI-P3 D65
  - Linear Rec.2020
- Linear ACES spaces
  - ACES2065-1
  - ACEScg (Changed from `Linear ACEScg` to `ACEScg` since ACEScg already
    implied a linear transfer function, otherwise using `Linear AP1 ACES`
    might make more sense. Same goes for ACES2065-1)
- Linear FilmLight E-Gamut
  This is for AgX's LUT input encoding. It can potentially be useful for interop.
- Display spaces
  - sRGB
  - Display P3
  - Rec.1886
  - Rec.2020
- Filmic Components
  - Filmic Log
  - Filmic sRGB
  - False Color

Ref
#110685
#110941
-------
)
Removed Features
¶
Textures and other areas of Blender now always considers the color
  management is enabled. This used to be a compatibility option for the
  "No Color Management" setting in Blender pre 2.64. To achieve the same
  functionality the images need to be set to Non-Color space.
  (
63e2832057
### Commit Summary: Color management: Remove old name-based exceptions · 63e2832057 - blender - Blender Projects
### Commit Details:
Historically, the OCIO based color management implementation in Blender
had exceptions to treat specific configurations differently. It was a
compatibility with the legacy "No color management" option.

With time and more development in the area there are better ways of
achieving this goal, if needed.

This commit removes the named-based exception, which also solves confusion
about why certain similar configurations (from OCIO stand point) give
different results. As well as allows to create a cleaner plate for an
upcoming additions in the OCIO configuration such as AgX.

Quite simple and technical change which constant-folds the check for
whether the scene color management enabled or not with "true" value.

Ref
#110685
#110580
-------
)
Unused color spaces and display devices were removed from the OCIO
  configuration
  (
b2b7b37139
### Commit Summary: Color Management: Clean up no longer used colorspaces, display device, and LUTs · b2b7b37139 - blender - Blender Projects
### Commit Details:
This is a Step 1 of the AgX project integration, which is focused on cleaning
up legacy aspects of the configuration.

Delete all not longer used colorspaces and their LUT files. This includes:
nuke_rec709, lg10, XYZ display device and its standard view colorspace.

The nuke_rec709, lg10 were not used, and the XYZ display device was initially
added to support output for a DCP compliant J2K files. Unfortunately, some of
the crucial transform was missing from this initial configuration, so often a
custom OCIO configuration was needed. With the addition of Filmic and now with
AgX this really became not-so-usable use-case. Also, there is no display device
which is XYZ and on which Blender can realistically run.

The None display device has duplicated functionality as the Raw view in sRGB
display. Its need originated for the compatibility with legacy "No Color
Management" option in Blender. It is also missing in the fallback color
management implementation. So, now use sRGB with Raw view to replicate the
old behavior. There will be a separate do-version commit after this one to help
transitioning the current files to the new configuration.

The Raw and Non-Color are duplicates of each other, there is no need to have
both of them. Since users are more familiar with Non-Color, and it's also the
one assigned as the data role, will keep Non-Color and remove Raw. For the
compatibility the Raw is an alias of the Non-Color space.

Ref
#110685
-------
)
The XYZ display was only used to output images in XYZ space, for which
  there is now an option in the image output settings. Instead of the
  None display use Raw vie of the sRGB display. There is a versioning
  code in place to migrate the display settings to the new notation.

'''''


8. Blender 4.0: Compositor & Sequencer¶

Blender 4.0: Compositor & Sequencer
¶
Compositor
¶
Viewport Nodes
¶
The following nodes are now supported in the
Viewport
Compositor
### Commit Summary: GPU Compositor — Blender Manual
### Commit Details:
No details found
-------
:
Movie
  Distortion
### Commit Summary: Movie Distortion Node — Blender Manual
### Commit Details:
No details found
-------
Sun
  Beams
### Commit Summary: Sun Beams Node — Blender Manual
### Commit Details:
No details found
-------
Keying
### Commit Summary: Keying Node — Blender Manual
### Commit Details:
No details found
-------
Kuwahara
### Commit Summary: Kuwahara Node — Blender Manual
### Commit Details:
No details found
-------
(classic and anisotropic)
Inpaint
### Commit Summary: Inpaint Node — Blender Manual
### Commit Details:
No details found
-------
Double Edge
  Mask
### Commit Summary: Double Edge Mask Node — Blender Manual
### Commit Details:
No details found
-------
Kuwahara Filter
¶
Kuwahara filter node for the compositor, to give images a painterly
look.
(
f3cb157452
### Commit Summary: Compositor: add new node: Kuwahara filter · f3cb157452 - blender - Blender Projects
### Commit Details:
The filter is used to reduce noise while preserving edges. It can be used to create a cartoon effect from photorealistic images.

It offers two variations:
1) Classic aka isotropic kuwahara filter: simple and faster computation. Algorithm splits an area around a single pixel in four parts and computes the mean of the region with the lowest standard deviation.
2) Anisotropic Kuwahara filter: improves the classical approach by considering the direction of structures of regions

This patch implements both approaches above as multi-threaded operations for the full-frame and tiled compositor.

Co-authored-by: Sergey Sharybin
#107015
-------
)
Multiple iterations of Anisotropic Kuwahara filter
User Interface
¶
The compositor nodes add menu has been re-organized for consistency
  with other editors.
  (
75919610b4
### Commit Summary: Compositor: Re-organize Add menu · 75919610b4 - blender - Blender Projects
### Commit Details:
Improve discoverability of items and consistency with other editors.

Split menu into groups, divided by separators, sorting alphabetically
within each group of items. Following how it is done in Geometry Nodes.

#111481
-------
)
Node preview images have been moved to an overlay displayed above the
  node. The overlays menu has an option to show and hide all previews
  (
PR#108001
).
Sequencer
¶
Interactive Retiming
¶
A new system for interactively retiming strips was added in the
sequencer.
(
e1f6587f12
### Commit Summary: VSE: Add retiming tool · e1f6587f12 - blender - Blender Projects
### Commit Details:
This tools allows to change strip playback speed by manipulating
retiming handles. More handles can be added to single strip to create
variable playback speed.

This tool replaces Speed Factor property in time panel, with exception
of sound strips. Support for sound strips is still in review.

Pull Request
#104523
-------
,
4dc026ec8e
### Commit Summary: VSE: Smooth transition for retiming tool · 4dc026ec8e - blender - Blender Projects
### Commit Details:
This feature implements smooth transition between 2 retimed segments.

A transition can be added by dragging retiming handle while holding
shift key. When any handle defining transition is removed, the
transition segment is removed and 2 linear segments are restored to
state before transition was created.

These transitions work with video and sound and changes are reflected
in waveforms with correct seeking, therefore it replaces usage of
`speed_factor` or earlier sound `pitch` property.

Smooth transition is achieved by evaluating Y value of circular arc,
that is tangent to lines of linear retimed segments. Because of this,
when transition length is changed both handles are moved symetrically.
This way it is possible to make transition without affecting content in
linear segments.
When linear segment after transition is further retimed, this shifts
content inside of a transition segment.

To support sound, `SEQ_retiming_sound_animation_data_set` and related
data structures has been updated to build speed table for each smooth
transition segment. Layering of retiming data via meta strips is still
fully supported.

#107197
-------
,
6d215b87ce
### Commit Summary: VSE: Freeze frame feature for retiming tool · 6d215b87ce - blender - Blender Projects
### Commit Details:
Freeze frames can be added now using retiming tool with no need to hold
splitting strips or using hold offsets. To use this feature, add
retiming handle where you want to freeze the frame, hold ctrl key and
drag the handle. It is not possible to freeze frame of transition handle
and it is not possible to add transition to or from freeze frame.
Retiming system would handle these cases, but they are not useful in
practice.

When freeze frame is created, start handle of frozen segment is flagged
as `FREEZE_FRAME`. Most handling is similar to `SPEED_TRANSITION`
type handle. For evaluation, there is no special case for this type, as
it's just 2 handles with same `retiming_factor` value. It is possible to
recreate this behavior without using freeze frame feature by adding
handle between 2 consecutive content frames, but this would not be
recognized by UI or treated as freeze frame segment/handle.

Eventually this feature should replace hold offsets, leaving `Sequence`
struct with single offset type, see PR 105620 for reference.
-------
,
f4d6edd476
### Commit Summary: VSE: Add "Set Speed" gizmo to retiming tool · f4d6edd476 - blender - Blender Projects
### Commit Details:
This gizmo is now responsible for drawing labels with speed of retimed
segments. By clicking on the value it is possible to type in new speed,
which is more convenient, than dragging handles by hand.

Note: Due to granularity of frames, the precise value may not be
respected.

#108422
-------
,
86a0d0015a
### Commit Summary: VSE: Improve retiming UI · 86a0d0015a - blender - Blender Projects
### Commit Details:
Currently retiming is quite awkward, when you need to retime multiple
strips strips in sync. It is possible to use meta strips, but this is
still not great. This is resolved by implementing selection.

General changes:
Gizmos are removed, since they are designed to operate only on active
strip and don't support selection.
Transform operator code is implemented for retiming data, which allows
more sophisticated manipulation.
Instead of drawing marker-like symbols, keyframes are drawn to
represent retiming data. Retiming handles are now called keys. To have
consistent names, DNA structures have been renamed.
Retiming data is drawn on strip as overlay.

UI changes:
Retiming tool is removed. To edit retiming data, press Ctrl + R, select
a key and move it. When retiming is edited, retiming menu and
context menu shows more relevant features, like making transitions.
Strip and retiming key selection can not be combined. It is possible to
use box select operator to select keys, if any key is selected.
Otherwise strips are selected.
Adding retiming keys is possible with I shortcut or from menu.
Retiming keys are always drawn at strip left and right boundary. These
keys do not really exist until they are selected. This is to simplify
retiming of strips that are resized. These keys are called "fake keys"
in code.

API changes:
Functions, properties and types related to retiming handles are renamed
to retiming keys:
retiming_handle_add() -> retiming_key_add()
retiming_handle_move() -> retiming_key_move()
retiming_handle_remove() -> retiming_key_remove()
retiming_handles -> retiming_keys
RetimingHandle -> RetimingKey

Retiming editing "mode" is activated by setting `Sequence.show_retiming_keys`.

#109044
-------
)
Adjust the speed of strips by dragging retiming keys. Additional keys
can be added by pressing the I key. The keys can be edited by pressing
the Ctrl + R shortcut.
Retiming also supports smoothly transitioning from one speed to another.
Transitions can be created by right clicking on a key, or from retiming
menu and choosing Add Speed Transition. Freeze frames can be added
similar to transition keys.
The speed of whole strips or a retimed segment can be set by using Set
Speed operator from retiming menu.
Retiming keys can be hidden by turning off the retiming overlay.
Sound Strips
¶
Sound strip waveforms are now processed much faster.
  (
b11540a65f
### Commit Summary: VSE: Process audio strips waveforms in parallel · b11540a65f - blender - Blender Projects
### Commit Details:
A TaskPool is used to execute tasks in the backghround.

Whenever a new sound strip needs their waveform to be computed, it's
added as a task to the TaskPool.

Once the PreviewJob has submitted all available tasks to the task pool,
it waits for all of them to finish before exiting.

The TaskPool is configured to start tasks as soon as they are pushed
onto the task queue.

Authored-by: Lucas Tadeu Teixeira
#108877
-------
)
New equalizer modifier for sound strips.
  (
1015bed2fd
### Commit Summary: VSE: Sound equalizer modifier · 1015bed2fd - blender - Blender Projects
### Commit Details:
The sound equalizer is using the Audaspace FFT Convolver.
The blender part creates an array of descriptions of power per "band"
and orders the creation of Equalizer (ISound) in the Audaspace.

Modifier can be created on sound strips. It lets you define
amplification or attenuation over frequency range from 30Hz to 20 kHz.
The power is limited to -30 db - 30 db. This is done using curve
mapping widget.

Co-authored-by: menda
Co-authored-by: Richard Antalik
#105613
-------
)
Breaking Changes
¶
The Depth socket was removed from the non-multilayer image node,
  viewer, and composite output nodes. This was a legacy feature,
  replaced by more general multilayer OpenEXR output.
  (
e1b60fdb91
### Commit Summary: Remove Z Buffer from ImBuf · e1b60fdb91 - blender - Blender Projects
### Commit Details:
It was only used by OpenEXR and Iris images, and saving the Z Buffer
in those formats was disabled by default. This option comes from the
times prior to the addition of the Multilayer EXR.

It also worth noting that it was not possible to save Iris with Depth
pass from Blender as internally it is called IRIZ format and it was
not exposed. But even after exposing this format option something still
was missing as saving and loading ITIZ did not show up the Depth pass.

The reason of removal is to make it a more clear match of the ImBuf
with a render pass, and use it instead of a custom type in the render
result and render pass API. This will simplify the API and also avoid
stealing buffers and making shallow copies when showing the render
result.

For the cases when Depth is needed a Multilayer EXR is to be used,
as most likely more than just the Depth will be needed.

On a user level this change:

- Removes the "Z Buffer" option from the interface.

- It preserves existing sockets in compositor nodes, but it will
  output black image. Also changing the image data-block will
  remove the socket unless a Multilayer EXR with Depth pass image
  is selected.

- Removes "Depth" socket of the Viewer and Composite nodes.

Ref
#108618
#109687
-------
)
The "Distort" socket was renamed to "Distortion" in the Lens
  Distortion compositing node.
  (
fe62eebba4
### Commit Summary: UI: Rename Distort socket in the Lens Distortion compositing node · fe62eebba4 - blender - Blender Projects
### Commit Details:
The "Distort" socket in the Lens Distortion node should be a noun
instead of a verb, same as "Dispersion" just below. The name was
introduced at the same time as the node itself, in
2a2453d3e2
.

Versioning was added to update existing nodes. The Python API
is affected though, if the socket was looked up with the old name.

#108234
-------
)
Color multiplication does not affect alpha by default. 
  To multiply alpha channel, "Multiply Alpha" option has to be 
  checked.
  (
14827de2a9
### Commit Summary: Fix #112267: Multiply doesn't multiply alpha channel · 14827de2a9 - blender - Blender Projects
### Commit Details:
After
eda58d6419
, multiply operation does not affect alpha channel, but
Some users do expect this feature present.

This adds option `multiply_alpha`, so that multiplication (in strip
color panel) will affect alpha channel as well.

#113791
-------
)

'''''


9. Blender 4.0: Import & Export¶

Blender 4.0: Import & Export
¶
USD
¶
Skeleton and blend shape animation import through UsdSkel. (
PR#110912
)
Generic mesh attribute import and export for meshes. (
PR#109518
)
Light import and export improvements to follow USD conventions more
  closely. (
PR#109795
)
Camera import and export improvements. (
PR#112905
)
Export can now be extended with Python scripts through hooks. See the
USDHook
API
  documentation
for details and example code. (
PR#108823
)
3DS
¶
Export Animation
¶
The 3ds exporter now got the property to export animation keyframes.
  (
PR#104613
)
Keyframe export is optional to avoid crashing any importers wich can
  not handle the keyframe section.
  (
585a682ef8
,
da9bb97bea
)
Export Hierarchy
¶
3ds objects now got hierarchy chunks to preserve the object tree. (
PR#104682
)
The object tree can now be exported without the keyframe section
  needed.
  (
0d26a2a017
)
Export Scale
¶
Global scale for exporting a 3ds can now be setted. (
PR#104767
)
Since many applications are using millimeters, this option is useful
  to convert the measure units.
  (
17f142e55d
)
Convert Measure
¶
The 3ds importer and exporter now got the ability to converts the unit
  measure for all metric and imperial units. (
PR#104769
)
Many 3ds files were exported in millimeter unit scale, this option
  converts too big meshes to Blender meter scale.
  (
675987e938
)
Object Filter
¶
Both, the importer and the exporter got the new option to filter
  objects for import and export. (
PR#104778
,
PR#104782
)
Volume, fog, gradient and background bitmap
¶
Atmosphere settings, layerfog parameter and background image can now
  be imported and exported. (
PR#104795
,
6fad9e9725
)
Gradient and fog chunks can now be imported and exported. (
PR#104811
,
a53788722b
,
7cd6969b3e
)
Spotlight aspect and projector
¶
If a spotlight includes a gobo image, it will be exported in the light
  bitmap chunk and imported the same way. (
PR#104813
,
f1e443f119
)
The x/y scale of a spotlight can now be exported in the aspect ratio
  chunk, the importer calculates the aspect back to x/y scale. (
PR#104815
,
7e2f96796a
)
Cursor location
¶
The 3D cursor can now saved to a 3ds file and imported again. (
PR#104797
,
75ea7633f6
)
New Principled BSDF material support
¶
Moved specular texture to specular tint. (
PR#104918
,
fef728a568
)
Added transmission and coat weight parameters.
  (
a5d3364c33
,
d82ce1770f
,
9d57b190b8
,
8f6d8d9fc9
)
Added tint colors for coat and sheen.
  (
ec069c3b6a
)
FBX
¶
FBX binary file reading and parsing speed has been improved.
  (
890e51e769
,
a600aeb2e2
)
Animation import performance was made faster.
  (
abab1c9343
,
e7b1962893
)
Animation export performance was made faster.
  (
73c65b9a44
,
461e0c3e1e
)
Vertex Group export performance was made faster.
  (
63d4898e1d
)
Armature data custom properties can now be imported and exported.
  (
2b8d9bf2b8
).
Shape keys can now be exported when Triangulate Faces is enabled or
  when Objects have Object-linked materials.
  (
bc801d7b1d
)
OBJ and PLY
¶
The OBJ and PLY I/O add-ons have been removed. Importing and exporting
this format is now implemented natively in Blender, with significantly
better performance.
(
#104504
,
67a4aab0da
,
#104503
,
67a4aab0da
).
Collada
¶
Armatures exported to Collada now include the armature's bone
  collections, including their visibility
  (
83306754d4
### Commit Summary: Collada: add bone collection support · 83306754d4 - blender - Blender Projects
### Commit Details:
Replace the import/export of armature layers with bone collections.

The Old Way:
- Export: Each bone would store which armature layer it was on.
- Import: All armature layers that contain at least a bone are shown.

The New Way:
- Export: Each armature contains a list of its bone collections,
  including which one is active and which ones are visible.
- Export: Each bone stores which bone collection it is on.
- Import: the above data is simply used as-is.

Due to limitations of the current Collada importer code, each "extra"
tag can only occur once per Collada node. This means that it was
impossible to write a `
` tag for each bone
collection, as only one of those would actually be stored by the
importer for further processing. To work around this limitation, all
bone collection related tags store their values as newline-separated
strings. Example:

```
Layer 1
Layer 3b
Group
That One Bone
Layer 1
Layer 3b
That One Bone
That One Bone
```
-------
).
  More info about
bone
  collections
.
glTF 2.0
¶
Find the changelog in the
Add-ons
section.

'''''


10. Blender 4.0: Core¶

Blender 4.0: Core
¶
Blend File Compatibility
¶
The
new blendfile compatibility
  policy
has been
  implemented.
  (
#109151
,
PR#110109
)
Very early 2.80 development 'scene collection' compatibility code as
  been removed. This does not affect any file produced by a released
  version of Blender.
  (
#110918
,
PR#110926
,
23835a393c
### Commit Summary: Remove compatibility code for blendfiles from early 2.80 development era. · 23835a393c - blender - Blender Projects
### Commit Details:
Remove the 'SceneCollection' structure definition from DNA, and the
compatibility code converting it to the 'modern' viewlayer system.

'SceneCollection' was part at some point of the new collection system
during 2.80 development, but was never in any published Blender release.
So this code was only ensuring compatibility with a few potential
Blender files saved from in-development builds over four years ago.

Implements
#110918
.

#110926
-------
)
Data-Blocks
¶
Custom Properties can now be defined from the UI to store references
  to other data-blocks
  (
b3c7f3c8a9
### Commit Summary: UI: Add initial UI support for ID pointers custom properties. · b3c7f3c8a9 - blender - Blender Projects
### Commit Details:
Customprops to IDs are supported since years through code, but were
never exposed directly in the UI of customporperties.

This commit mainly:
* Adds a new `DATA_BLOCK` type to UI customprops types.
* Exposes the existing `id_type` settings to python API.

#110458
-------
).
  Previously, this was only doable through Python API.
Library Overrides
¶
Many fixes and improvements were made, as part of the
Blender
  Studio's "WING
  IT!"
production. (
PR#109704
)
Parenting-related Object properties (the parent inverse matrix,
  parent type, parent sub-target) will now be reset to the linked
  reference data when parent pointer itself is modified in library
  file and updated during resync process
  (
9ed5177055
### Commit Summary: LibOverride: Fix RNA handling of object parent-related properties. · 9ed5177055 - blender - Blender Projects
### Commit Details:
While setting the parent object itself already had its dedicated
liboverride apply function to avoid resetting other related properties
like the invert parent matrix, other related properties also had custom
setter callbacks with similar effect.

This commit fixes the propblem for the `parent_bone` and `parent_type`
properties by adding a custom liboverride apply callback for them too.
-------
,
4842424220
### Commit Summary: LibOverride: Reset object-parenting related properties in resync process. · 4842424220 - blender - Blender Projects
### Commit Details:
When the parent ID pointer of an object is a 'system override' (i.e.
matches hierarchy-wise the parent of the linked reference object, or
actually use the same linked object), also clear potential liboverrides
for the other related parenting properties.

This is especially critical for the parent inverse matrix, otherwise if
it ever gets out of sync, in case of re-parenting in the lib data, the
offset would remain and move the liboverride child object into random
places.

NOTE: This may break some very specific workflows where users would rely
on actually overridden parent invert matrix. Not much to be done here,
there is currently no way to support both cases. This is not expected to
be a common use case.
-------
).
Cleanup-code pruning unused liboverride operations during RNA
  diffing would not always work properly, leading to accumulated
  invalid operations that could, under certain circumstances, end up
  severely breaking especially collections/objects hierarchies of
  liboverrides
  (
784d09a87c
### Commit Summary: LibOverride: Fix diffing code not always cleaning unused operations. · 784d09a87c - blender - Blender Projects
### Commit Details:
In RNA collections cases, the cleaning code was buggy and could end up
never cleaning actually unused liboverride operations, resulting in
sometimes tens of garbage operations on e.g. Collection's objects list.

This was a fairly severe bug, since it could lead to very broken
overrides of collections in some cases when things start to get broken
in the production file, amplifying greatly initially small issues.
-------
).
Resync Enforce tool would not always work properly with collections
  of IDs (affecting especially Collections/Objects relationships)
  (
2dfbd653a0
### Commit Summary: LibOverride: Fix 'resync enforce' not working on RNA collections of IDs. · 2dfbd653a0 - blender - Blender Projects
### Commit Details:
Code was only considering RNA pointer properties to IDs, but not the
case of RNA collections of ID pointers (like e.g. the Collections' `objects`
property).

This would result in 'resync enforce' fixing tool not working properly
e.g. on liboverride collections' objects.
-------
,
1c0ffa1e18
### Commit Summary: Fix mistake in recent change to liboverride cleanup of invalid operations. · 1c0ffa1e18 - blender - Blender Projects
### Commit Details:
Issue introduced by own
784d09a87c
, would end up cleaning too many,
including valid liboverride operations.
-------
).
Code trying to fix invalid liboverride hierarchies was
  over-enthusiastic, which could pull data out of their valid original
  hierarchy into some more local, undesired one when production files
  start to become messy
  (
bf93fb0f46
### Commit Summary: Fix (unreported) incorrect behavior of liboverride hierarchy fixing code. · bf93fb0f46 - blender - Blender Projects
### Commit Details:
Code in charge of fixing invalid liboverride hierarchy roots would be
too agressive in re-assigning new root in replacement of old one. When
the invalid initial case was a 'low-level' type of ID (like a nodetree
e.g.), it could 'contaminate' many valid data (objects etc.) and force
them into its own local hierarchy.

This commit fixes the issue by storing all 'processed as valid' IDs into
a set, and ensuring that once an ID has been put into that set, its
hierarchy root is not changed anymore.

in other words, it changes the old behavior of 'last encountered hierarchy
wins' to 'first encountered hierarchy wins'. Since higher-level types of
IDs (like collections or objects) are processed first, this is the
most logical behavior too.
-------
).
Handling of lookup of items in RNA collections has been improved, to
  alleviate issues when there are name collisions between items
  (
a05419f18b
### Commit Summary: LibOverride: RNA Apply code: Work around potential duplicates in names of RNA collections of IDs. · a05419f18b - blender - Blender Projects
### Commit Details:
While in theory RNA collections of IDs will have unique names in common
use cases, it can happen that there are naming collisions (due to a same
RNA collection having ID pointers to data from different libraries,
having the same name).

This situation is deadly for liboverride applying code, since it rely on
finding which item of the collection to modify by using its name.

To alleviate the problem, this commit changes the way items are searched
for, by adding an extra first check to find an item which matches both
the requested name and index.

While not perfect, this should reduce the breaking cases when production
files get dirty and start having complex mangling of override and linked
data naming.
-------
).
As a second approach to work around issue described above, changes
  were made to liboverride IDs naming, such that when created, they
  either get the exact same name as their linked reference, or they
  get a name that does not collide with any other linked override
  reference
  (
b9becc47de
### Commit Summary: Core: ID naming: Add 'global' namemap. · b9becc47de - blender - Blender Projects
### Commit Details:
This new namemap allows to generate new ID names which are unique in
current Main (for a given ID type), regardless of the library they
belong to.

This new feature will be used by library override to try to reduce name
collisions with its linked reference IDs when more than one override
exists. It is not intended to be used for general ID naming.
-------
,
e11da03e7a
### Commit Summary: LibOverride: Generate 'more unique' names for liboverrides. · e11da03e7a - blender - Blender Projects
### Commit Details:
Name collisions can become a big issue in liboverrides when production
files gets messy (weird overrides duplicates, bad resync with heavily
changing assets, etc.).

This commit tries to alleviate a bit the problem by generating 'more
unique' names for liboverrides, when an exact match with the reference
is not possible.

So by default, in most common case, the liboverride ID will still have
the exact same name as its linked reference.

If this is not possible, then the new liboverride ID will get a name
which is unique to within the whole current Main (for its ID type). In
particular, this ensure that new override IDs are either named exactly
as their references, or have a name which is not used by any other
reference (linked) IDs.

Note that this is not a perfect solution, since changes in library data
can lead to name collisions later on. However, it should greatly reduce
the frequency of such problems.
-------
).
Breaking Changes
¶
The Depth pass support was removed from OpenEXR (the non-multilayer
  case) and Iris
  (
e1b60fdb91
### Commit Summary: Remove Z Buffer from ImBuf · e1b60fdb91 - blender - Blender Projects
### Commit Details:
It was only used by OpenEXR and Iris images, and saving the Z Buffer
in those formats was disabled by default. This option comes from the
times prior to the addition of the Multilayer EXR.

It also worth noting that it was not possible to save Iris with Depth
pass from Blender as internally it is called IRIZ format and it was
not exposed. But even after exposing this format option something still
was missing as saving and loading ITIZ did not show up the Depth pass.

The reason of removal is to make it a more clear match of the ImBuf
with a render pass, and use it instead of a custom type in the render
result and render pass API. This will simplify the API and also avoid
stealing buffers and making shallow copies when showing the render
result.

For the cases when Depth is needed a Multilayer EXR is to be used,
as most likely more than just the Depth will be needed.

On a user level this change:

- Removes the "Z Buffer" option from the interface.

- It preserves existing sockets in compositor nodes, but it will
  output black image. Also changing the image data-block will
  remove the socket unless a Multilayer EXR with Depth pass image
  is selected.

- Removes "Depth" socket of the Viewer and Composite nodes.

Ref
#108618
#109687
-------
)
Unused linked data is no longer kept when saving and re-opening a
  blendfile. This was already partially the case in previous releases.
The 'Fake User' setting is now fully irrelevant for linked data, and
  systematically cleared on load or link.
When an unused (as in, having zero users) linked data-block needs to
  be kept in a blendfile, users are expected to reference them through
  a Custom Property (e.g. from a Scene, Collection or Object
  data-block).
See
#106321
and the related commits
b3c7f3c8a9
### Commit Summary: UI: Add initial UI support for ID pointers custom properties. · b3c7f3c8a9 - blender - Blender Projects
### Commit Details:
Customprops to IDs are supported since years through code, but were
never exposed directly in the UI of customporperties.

This commit mainly:
* Adds a new `DATA_BLOCK` type to UI customprops types.
* Exposes the existing `id_type` settings to python API.

#110458
-------
and
f052b18a65
### Commit Summary: Always clear 'fake user' flag from linked data. · f052b18a65 - blender - Blender Projects
### Commit Details:
Using this flag from linked data is always a double-edge sword, in one
end some user have been relying on it to keep around data that is not
really used as ID (like e.g. text data-blocks, node trees, see
e.g.
#103687
,
#105687
). On the other end, it often causes over-keeping
of linked data reference in production files.

From now on, when an unused linked data is to be kept around, users
should create an ID property to reference it.

Implements
#106321
.

#111042
-------
.
Keep some animation data from library overrides when no animation data
  existed originally in the linked reference, but it got added later on
  in the library file. Previously, any change related to animation done
  in the liboverride data would have been lost
  (
#110067
,
PR#110900
,
f188d6709f
### Commit Summary: LibOverride: keep some anim data from liboverride when it exists in both IDs. · f188d6709f - blender - Blender Projects
### Commit Details:
So far when an anim data had to be created in liboverride (because none
existed in reference ID), and reference ID got an anim data added later,
that reference anim data would simply replace the one from the
liboverride, completely losing all animation-related work done so far in
the liboverride.

This commit fixes that, by adding some custom handling of anim data when
there is a liboverride operation defined on the `animation_data` RNA
property itself.

It then behaves as if everything that is overridable in the existing
liboverride was defined as overrides (and therefore kept), while
everything else is replaced by the reference animdata:
* Action and temp action are kept.
* Settings (extend mode, etc.) are kept.
* Active NLA track and strip are kept, and tracks and strips from the
  liboverride are added at the end of the list of these from the
  reference data.

Note that this behavior is only expected to happen once, on the first
call to 'apply overrides' after anim data has been added to the reference
linked ID. After that, since both IDs have animdata, there should be no
liboverride property defined for the `animation_data` property itself,
but only for paths leading inside that animdata struct.

Implements
#110067
.
-------
).

'''''


11. Blender 4.0: User Interface¶

Blender 4.0: User Interface
¶
Search
¶
All regular dropdown and context menus can be searched by pressing
  spacebar.
  (
35d3d52508
### Commit Summary: UI: Search All Menus with Space Bar · 35d3d52508 - blender - Blender Projects
### Commit Details:
Allow initiating the search of any named menu by pressing space bar.

#113299
-------
).
Add menus can be searched by immediate typing.
  (
b688414223
### Commit Summary: UI: Type To Search And Space Bar Search · b688414223 - blender - Blender Projects
### Commit Details:
Continue allowing spacebar search for all dropdown and context menus,
but also add the ability to allow some menus to have type to search,
like Add Modifiers, Objects, Nodes.

#113520
-------
).
Recently searched items are now at the top of search lists, with an
  option in the Preferences for disabling it.
  (
8362563949
### Commit Summary: UI: show recently selected items at the top of searches · 8362563949 - blender - Blender Projects
### Commit Details:
The goal is to make the search faster to use by dynamically adapting to the user.
This can be achieved using the simple but common approach of showing recently
selected items at the top. Note, that the "matching score" between the query and
each search item still has precedence when determining the order. So the last used
item is only at the top, if there is no other search item that matches the query better.

Besides making the search generally faster to use, my hope is that this can also
reduce the need for manually weighting search items in some places. This is
because while the ordering might not be perfect the first time, it will always be
once the user selected the element that should be at the top once.

This patch includes:
* Support for taking recent searches into account in string searching.
* Keep track of a global list of recent searches.
* Store recent searches on disk similar to recently opened files.
* A new setting in the user preferences that allows disabling the functionality.
  This can be used if deterministic key strokes are required, e.g. for automated tests.

In the future this could be improved in different ways:
* Add some kind of separator in the search list to indicate which elements are at
  the top because they have been used recently.
* Store the recent search items per search, instead of in a global list. This way
  it could adapt to the user even better.

#110828
-------
).
Text
¶
Default user interface font changed to Inter.
  (
f58f6d0338
### Commit Summary: UI: Replace UI Font with Inter Regular v3.19 · f58f6d0338 - blender - Blender Projects
### Commit Details:
Replace default UI font DevaVuSans with Inter Regular v3.19

#112603
-------
).
Inter font
Text output now more pleasing and typographically correct.
  (
a0b4ead737
### Commit Summary: BLF: Subpixel Positioning, Anti-aliasing, Hinting · a0b4ead737 - blender - Blender Projects
### Commit Details:
Text output using subpixel positioning, subpixel anti-aliasing, and
typographically-correct hinting.

#105441
-------
)
New user preference added for "subpixel anti-aliasing" for text
  output.
  (
82bfc41d0c
### Commit Summary: UI: Allow Separate Configuration of Subpixel Antialiasing · 82bfc41d0c - blender - Blender Projects
### Commit Details:
Separate user configuration of subpixel antialiasing from the hinting
options. For example, this allows turning this on while hinting is
"None", or off when hinting is "Full".

#113027
-------
)
Chinese, Japanese, and Korean punctuation characters now recognized in
  word selection.
  (
6d64c6dcd7
### Commit Summary: UI: Recognize CJK punctuation when selecting text · 6d64c6dcd7 - blender - Blender Projects
### Commit Details:
Add frequently-used Chinese, Japanese, Korean special character
delimiters (punctuation, quote characters, brackets, etc) to aid the
selection of character segments in text operations.

#112852
-------
)
Use multiplication symbol instead of letter "x" where appropriate.
  (
9b4749e7c7
### Commit Summary: UI: replace "x" with multiplication sign when displaying calculations · 9b4749e7c7 - blender - Blender Projects
### Commit Details:
The multiplication sign looks like an "x" but should be used in its
stead to display calculations and dimensions such as "1920x1080". It
is supported in many fonts including DejaVu Sans, the font currently
used for the UI.

#106388
-------
)
Elements
¶
Consistent top-down content ordering in menus. Menus no longer reverse
  order if opening upward.
  (
b122faf705
### Commit Summary: UI: Consistent Menu/Block/Popup Content Ordering · b122faf705 - blender - Blender Projects
### Commit Details:
All Content is shown in natural top-down order regardless of where it
is initiated.

#109798
-------
)
All rotational inputs now shown with maximum precision.
  (
b34ece48f8
### Commit Summary: Fix #106484: Show all rotations with same precision · b34ece48f8 - blender - Blender Projects
### Commit Details:
Increase precision of some rotational inputs so that they all show the
same precision.  And have the arrows change in full degrees.

#106515
-------
)
Tree-view UIs draw hierarchy lines to visually communicate the nesting
  levels better.
  (
71273df2d5
### Commit Summary: UI: Draw hierarchy lines for tree-views · 71273df2d5 - blender - Blender Projects
### Commit Details:
Hierarchy lines (like we also have in the Outliner) make it easier to
visually parse the hierarchy, and avoid confusion about nesting level.
Especially when some items have icons and/or collapse chevrons and some
not (thus different levels of visual indentation).
They were planned for
#93582
and
#107881
, also see
https://code.blender.org/2023/05/the-next-big-step-grease-pencil-3-0/#layer-groups
.

The drawing is implemented as a general tree-view feature, so all
tree-views with collapsable items (which excludes the spreadsheet
data-set tree view) will get them without further setup.
-------
)
Hierarchy lines
Many lists now highlight the currently-selected item.
  (
9f4b28bba8
### Commit Summary: UI: Highlight Selected Enum · 9f4b28bba8 - blender - Blender Projects
### Commit Details:
Highlight the currently-selected item in enum, and some other, lists.

#111074
-------
).
List items that are not multiple select are now shown as radio
  buttons.
  (
6dd3c90185
### Commit Summary: UI: Change menu icons of single-choice enums to radio buttons · 6dd3c90185 - blender - Blender Projects
### Commit Details:
Show radio buttons for enum list items that are not multi-select (not
PROP_ENUM_FLAG).

#111796
-------
).
Resizing the toolbar no longer breaks snapping when dragged beyond the
  maximum available size.
  (
248b322896
### Commit Summary: UI: Improve how region size snapping respects the maximum size · 248b322896 - blender - Blender Projects
### Commit Details:
Previously, a region that used size snapping could be dragged to a
snapped size (say 3 times a column width), but then would be clamped to
an unsnapped size (say 2.7 times a column width) to make it fit the
available space.
Instead clamp the size before snapping, so that snapping respects the
available width/height (resulting in 2 times a column width for
example). Put differently, the region will not be made taller if there's
not enough space to fit the region up to the next snapping point.

Implemented as part of
#104831
.

#109027
-------
)
Windows and Linux: Color Picker can now pick outside of Blender
  windows.
  (
5741a5d433
### Commit Summary: UI: Allow Eyedropper Outside of Blender · 5741a5d433 - blender - Blender Projects
### Commit Details:
This adds a new Ghost function, GHOST_GetPixelAtCursor, that allows
picking colors from outside of Blender windows. This only has an
implementation for the Windows platform, but this should allow other
platforms to also do so if possible.

#105324
-------
,
e5a0d11c4e
### Commit Summary: UI: Allow eyedropper outside of Blender (X11) · e5a0d11c4e - blender - Blender Projects
### Commit Details:
Implements the GHOST_GetPixelAtCursor for the X11 backend, allowing
the user to sample any color displayed on the screen.

Noted some limitations in the code-comments.

Ref
!111493
.
-------
)
The Color Picker size has been increased.
  (
0c7496f74d
### Commit Summary: UI: Increase Color Picker Size · 0c7496f74d - blender - Blender Projects
### Commit Details:
Increase the Color Picker Size by 33%

#111153
-------
)
Color picker size
Improvements to Color Ramp drawing.
  (
8a3766e241
### Commit Summary: Fix #111017: Improvements to the drawing of Color Ramps · 8a3766e241 - blender - Blender Projects
### Commit Details:
Color Ramp widget with themed outline, handling of line width changes,
padding fixes, scaling fixes, etc.

#111903
-------
)
Fix sidebar scrollbar overlapping category tabs when zooming.
  (
080a00bda2
### Commit Summary: UI: Fix Scrollbar overlaps sidebar on zoom · 080a00bda2 - blender - Blender Projects
### Commit Details:
When zooming an area with panel category tabs, ensure that the vertical
scroll bar is repositioned to not overlap the tabs.

#108295
-------
)
Fixed scrollbars being highlighted while outside of their region.
  (
4f6785774a
### Commit Summary: UI: Fix scrollbar highlighting outside of regions · 4f6785774a - blender - Blender Projects
### Commit Details:
Remove scrollbar influence when the mouse cursor is outside
of that region.

#105973
-------
)
Progress indicators now exposed to Python, including new ring version.
  (
c6adafd8ef
### Commit Summary: UI: add progress indicator variations & RNA API · c6adafd8ef - blender - Blender Projects
### Commit Details:
Add pie and ring styles of progress indicators. Exposes progress bar to
the Python API and adds a "type" property to allow style variation.

This can be used for scripts & add-ons to show progress in the UI.

Ref
!109882
.

Co-authored-by: Campbell Barton
-------
).
Allow transparency when editing text in widgets.
  (
2ec2e52a90
### Commit Summary: UI: Theme: Allow transparency when editing text in widgets · 2ec2e52a90 - blender - Blender Projects
### Commit Details:
Allow transparency in both text and background color, to allow blending
the selected color with whatever is underneath. Making theming more
flexible, especially since the same property is used in different backgrounds.

Note: this doesn't affect the default themes since all of them have the alpha
component in inner at `1.0`.

#112090
-------
)
UI element outlines have changeable opacity, allowing for flat or
  minimalistic themes.
  (
c033e434c5
### Commit Summary: UI: Allow Opacity for Theme Outline Colors · c033e434c5 - blender - Blender Projects
### Commit Details:
Allow setting opacity with color for uiWidgetColors outline and for
tab_outline.

#108248
-------
)
Window
¶
Window title improved order and now includes Blender version.
  (
636f3697ee
### Commit Summary: UI: Window Title With Version · 636f3697ee - blender - Blender Projects
### Commit Details:
Include blender version information in title (including cycle), and
also indicate unsaved and dirty status better.

#111998
-------
).
New Window now works while having an area maximized.
  (
bb31df1054
### Commit Summary: UI: Allow "New Window" While in Maximized Area · bb31df1054 - blender - Blender Projects
### Commit Details:
While an editor is in "Maximize Area" mode, allow Window / New Window.

#111999
-------
).
Save Incremental in File menu, to save the current .blend file with a
  numerically-incremented name.
  (
a58e5ccdec
### Commit Summary: UI: File Save Incremental Operator · a58e5ccdec - blender - Blender Projects
### Commit Details:
Operator for the TopBar File Menu that saves the currently open file
with a numerically incremented name.

#104678
-------
)
Small changes to the File and Edit menus.
  (
347e4692de
### Commit Summary: UI: Minor Changes to Topbar Edit and File Menus · 347e4692de - blender - Blender Projects
### Commit Details:
Minor reordering of items on the Edit and File Menus, and the addition
of "Release Notes" to the latter.

#111814
-------
)
Files and Asset Browsers
¶
File Browser side bar now showing Bookmarks, System, Volumes, Recent.
  (
9659b2deda
### Commit Summary: UI: Change Order of Lists in File Browser Sidebar · 9659b2deda - blender - Blender Projects
### Commit Details:
Change File Browser sidebar order to Bookmarks, System, Volumes, Recent

#112114
-------
)
File and Asset Browser show a wait icon while previews are loading
  (
4a3b6bfeac
### Commit Summary: UI: Show wait icon for file/asset browser previews while loading · 4a3b6bfeac - blender - Blender Projects
### Commit Details:
Show File & Asset Browser items that are in progress with a "waiting"
icon. Reduces flickering and improves feedback for failed thumbnails.

#108486
-------
)
Thumbnail views now allow any preview size from 16-256.
  (
fa32379def
### Commit Summary: UI: Allow Integer Thumbnail Size Range · fa32379def - blender - Blender Projects
### Commit Details:
Instead of four discrete thumbnail sizes, allow the user to instantly
zoom to any integer size from 16-256. This also changes the default to
96 from the current 128.

#105815
-------
)
Image previews in File Browser now have checkerboard background if
  transparent.
  (
e9e12015ea
### Commit Summary: UI: Transparency Checkerboard behind File Browser Thumbnails · e9e12015ea - blender - Blender Projects
### Commit Details:
For thumbnails of image file types in the File Browser use the
checkerboard pattern as background to help indicate that the image
could contain transparency.

#108554
-------
)
File Browser now shows thumbnail previews for SVG images.
  (
565436bf5f
### Commit Summary: UI: SVG Thumbnails · 565436bf5f - blender - Blender Projects
### Commit Details:
Allow SVG files to have previews in the File Browser. Adds
nanosvgrast.h to extern\nanosvg\, which is an SVG rasterizer that is
an optional part of the nanosvg source.

#109567
-------
)
Transparent Thumbnails
SVG Thumbnails
Splash
¶
Splash screen changes to make it easier for users to bring previously
saved settings into a new install.
(
13f5879e3c
### Commit Summary: UI: Splash Screen Changes · 13f5879e3c - blender - Blender Projects
### Commit Details:
Updated splash screen with different options depending on whether the
user is new or upgrading. Simplifies the process for new users and
makes the choices more distinct when upgrading. Returning users also
get a link to "What's New".

#111123
-------
)
Text Editor
¶
Support auto-closing brackets around the selection
  (
96339fc313
### Commit Summary: Text Editor: Auto Close Pairs on Selected Text · 96339fc313 - blender - Blender Projects
### Commit Details:
When the auto-close preference is enabled & brackets or quotes are
entered with a selection, the selection is surrounded by those
characters - instead of replacing the selection.

Match functionality from visual-studio code.

Ref
!111900
.
-------
)
Removed syntax highlighting support for LUA
  (
95ca04dc20
### Commit Summary: Text Editor: remove support for syntax highlighting LUA · 95ca04dc20 - blender - Blender Projects
### Commit Details:
Removed because support for languages which Blender it's self doesn't
support seems unnecessary.

Ref
!108689
-------
)
Python Console
¶
Support cursor motion, selection & more text editing operations
  (
18e07098ef
### Commit Summary: UI: Support additional console text operations · 18e07098ef - blender - Blender Projects
### Commit Details:
Adds the ability to set text cursor position in the Console editor
by clicking with the mouse and many other expected operations such as
cut, select all & deselect on text entry.

Ref
!108626
-------
)
Support tab-stops instead of expanding to spaces
  (
a5cd497543
### Commit Summary: Console: add support for displaying tab-stops · a5cd497543 - blender - Blender Projects
### Commit Details:
Without this it was necessary to convert pasted text into spaces
for them to display properly.

Since tabs are a valid part of a string, it's incorrect to assume
tabs can always be expanded to spaces.

Pasted text and console output now display tabs properly,
the tab still uses spaces for indenting though.
-------
)
Other Editors
¶
Preferences: layout and style tweaks
  (
d0aa521ea8
### Commit Summary: UI: Minor layout and style adjustments in Preferences · d0aa521ea8 - blender - Blender Projects
### Commit Details:
Small style and layout tweaks of some tabs in Preferences.
Mainly inline styling for compact layouts, grouping labels and
adding icons where needed.

Purposely leaving aside complex areas such as Themes,
Add-ons, or Keymap. They require larger design decisions.

#112393
-------
)
Timeline: Invalid caches now show with striped lines.
  (
8d15783a7e
### Commit Summary: UI: display invalid cache as striped lines in the timeline · 8d15783a7e - blender - Blender Projects
### Commit Details:
Unify the way the different state's of a cache are shown in the timeline:
* Baked: fully opaque
* Cached: slightly transparent
* Invalid cache: slightly transparent, dark diagonal stripes

This improves accessibility since patterns are easier to recognize
for colorblind or otherwise visually impaired people.

The slight transparency is done with an alpha of 0.7 and the diagonal
stripes use the cache's color at 50% value.

Implements
#108196
.

#108481
-------
).
Outliner: Drag & Drop now works between multiple windows
  (
d102536b1a
### Commit Summary: Fix #93685: Allow Outliner Drag to Other Windows · d102536b1a - blender - Blender Projects
### Commit Details:
Allow dragging items from Outliner to other windows. Disables EdgePan
operator when entering new window. Canceling the drop redraws target
area and resets all modal cursors. But this does not fix incorrect
mouse cursor during operations on the remote target window.

#105196
-------
).
Outliner: Select Hierarchy now works with multiple selected objects
  (
594dceda7f
### Commit Summary: Fix #89479: Unable to select hierarchies of multiple objects from outliner · 594dceda7f - blender - Blender Projects
### Commit Details:
`select hierarchy` is treated in similar way as we're selecting single element from outliner.
When `object_select_hierarchy_fn` is called for the first time, we clear select flag for all elements
in `outliner_item_select`. This causes issue when `select hierarchy` is called for multiple elements.
So fix is to not touch select and activate flags when `OL_ITEM_RECURSIVE` flag is set.

This also fixes the hierarchy selection when "sync select" is OFF.

Old Differential Revision:
https://archive.blender.org/developer/D16804
#104737
-------
).
Top Bar and Status Bar colors now exactly match their theme colors
  (
d86d2a41e0
### Commit Summary: Fix #94148: Top bar, Status bar Header Colors Differ from Theme Setting · d86d2a41e0 - blender - Blender Projects
### Commit Details:
Fixes the Top and Status bars having their specified theme colors
incorrectly modified by highlight effect intended for active editor
headers only

#111265
-------
).
Windows Integration
¶
Blend File association can now be done for all users or just the
  current users in the preferences. Unassociate is now available as
  well. Support for side-by-side installations was improved.
  (
9cf77efaa0
### Commit Summary: UI: Updated Windows File Registration · 9cf77efaa0 - blender - Blender Projects
### Commit Details:
Windows file associations using ProgID, needed because of the launcher.
This fixes "pin to taskbar" and Recent Documents lists, allow per-
version jump lists and an "Open with" list with multiple versions.

#107013
-------
)
Recent file lists are now per Blender version.
Pinning a running Blender to the taskbar will properly pin the
  launcher.
Multiple Blender version are available for Open With in Windows
  Explorer.
Explorer "Quick Access" items added to File Browser System List
  (
f1e7fe5492
### Commit Summary: UI: Windows "Quick Access" items to File Browser System List · f1e7fe5492 - blender - Blender Projects
### Commit Details:
On the Windows platform add any Explorer "Quick Access" items to the
bottom of the File Browser "System" List in the sidebar.

Co-authored-by: Harley Acheson
#108431
-------
).
Translations
¶
The Catalan language is now one of six languages with
complete
coverage.

'''''


12. Blender 4.0: 3D Viewport¶

Blender 4.0: 3D Viewport
¶
Overlays
¶
New preference to toggle
fresnel
### Commit Summary: Viewport — Blender Manual
### Commit Details:
No details found
-------
in Edit Mode.
Wire
  Color
### Commit Summary: Viewport Shading — Blender Manual
### Commit Details:
No details found
-------
is now available for all shading modes.
Object/mode-specific overlays have been moved into their own popover.
  (
4fa4f5432d
### Commit Summary: UI: Viewport: Split object/mode overlays into own popover · 4fa4f5432d - blender - Blender Projects
### Commit Details:
Move object/mode-specific overlays into their own popover
in order to reduce scrolling and improve discoverability.

#112156
-------
)
Statistics: Ability to see per-item, and per-selection counts while in
  Object mode
  (
6e20beba22
### Commit Summary: UI: Statistics Overlay Improvements · 6e20beba22 - blender - Blender Projects
### Commit Details:
Miscellaneous improvements to the Statistics 3DView Overlay. Shows
internal details for selected objects while in Object Mode, including
triangles. Removes the useless "0" shown in the stats while in Sculpt
mode.

#104663
-------
).
User Interface
¶
Canvas selector in the header in paint modes.
  (
3b5df8a7ea
### Commit Summary: UI: Add canvas picker to paint modes in 3D Viewport · 3b5df8a7ea - blender - Blender Projects
### Commit Details:
In paint modes, show a selector for the active canvas, similar
to how other editors (UV/Image, Nodes, Action) do it.

Available canvas in each mode:
* Weight Paint: Vertex Groups
* Vertex Paint: Color Attributes
* Texture Paint: Canvas (material, image)
* Sculpt Paint: Color Attributes, canvas in experimental sculpt paint)

#111756
-------
)
Tool settings headers in the 3D View and Image Editor draw with a
  fully transparent background (with the region overlap preference
  enabled) and the theme's region background behind clusters of buttons
  (
55eaa755e3
### Commit Summary: UI: Draw 3D view tools header transparent with background behind buttons · 55eaa755e3 - blender - Blender Projects
### Commit Details:
Makes use of the new buttons sections feature used by the asset shelf to
draw a background behind buttons, but the reset of the region fully
transparent. The UI team agreed on this as a way to minimize dead space,
but also as a better way to communicate our click through feature (where
dead space in overlapping regions forwards events to the underlying
region). The region background theme setting only affects the
non-transparent part of the region, the rest is always fully
transparent. With region overlap disabled, the bar is fully opaque still.

Also see
#112241
.
-------
,
ff78d33bb4
### Commit Summary: UI: Draw Image editor tool header transparent with button background · ff78d33bb4 - blender - Blender Projects
### Commit Details:
Same as
55eaa755e3
, but for the Image Editor, since this should be done
consistently for all editors using tool headers with region background.
-------
).
The 3D Viewport background is now set to single-color in the default
  theme, since the vignette effect can lead to glitches in certain
  hardware according to community feedback
  (
eef2b61e9
### Commit Summary: Theme: Set 3D Viewport background to single color · eef2b61e91 - blender - Blender Projects
### Commit Details:
The default vignette effect introduces issues reported several times
on various hardware configurations.

It would still be nice to figure out the issue and fix it in the
vignette effect code. For now, simply use single-color in the
default theme.

As agreed during the 2023-08-15 User Interface Module meeting.
Fixes
#93627
Closes
#106699
-------
)
3D viewport header can now be made transparent (along with tool
  header) with theme color alpha change
  (
d308f35896
### Commit Summary: UI: Make View3D Header Overlapped · d308f35896 - blender - Blender Projects
### Commit Details:
Allow the View3D Header region to become transparent if "Region
Overlap" is enabled AND the Alpha of the Header's theme color is less
than 255. Basically its RGN_TYPE_HEADER and RGN_TYPE_TOOL_HEADER will
behave and look the same.

#111194
-------
).
Tweaks to the Object Types visibility popover
  (
7405993cb7
### Commit Summary: UI: Object Types Visibility Popover Tweaks · 7405993cb7 - blender - Blender Projects
### Commit Details:
Visual changes to the Object Types Visibility Popover, adding icons,
changes to order and alignment, and tooltips.

Co-authored-by: Pablo Vazquez
#111285
-------
).
Status text for modal operators now shown in the Tool Settings bar if
  visible
  (
ca00c9aa3e
### Commit Summary: UI: Header Status Text Changes · ca00c9aa3e - blender - Blender Projects
### Commit Details:
Draw status text in the Tool Settings bar if visible, rather than
Header.

#111676
-------
).
The Options panel accessed in Object mode and Mesh Edit mode has been
  reorganized.
  (
560e9c654b
### Commit Summary: UI: Edit Mode Options panel cleanup · 560e9c654b - blender - Blender Projects
### Commit Details:
AutoMerge is a property of transform operations, so it seems more
convenient to have this option bundled with transform settings.

Another thing is that the 'Live Unwrap' option has no real relation to
Transform.

Therefore, remove the 'AutoMerge' sub-panel and create two sub-panels
for the Options Panel:
- Transform
- UVs

Merge the 'AutoMerge' settings into the 'Transform' sub-panel.

Move 'Live Unwrap' to the 'UVs' sub-panel.

#108056
-------
)
Other
¶
Text object selection can now start outside of the text block.
  Improved selection with text boxes and when on curves
  (
5b3ce7b740
### Commit Summary: UI: Improve 3d text selection · 5b3ce7b740 - blender - Blender Projects
### Commit Details:
Improve 3D text selection & feedback when moving the mouse outside of
the text. Previously mouse selection only worked if the mouse was over
the text, now there is more margin to select characters or lines.

Ref
!109229
Co-authored-by: Campbell Barton
Co-authored-by: Harley Acheson
-------
).
Numpad Return key can add new line while editing Text Objects.
  (
ff6b25a200
### Commit Summary: Keymap: Add Numpad Return to create newline in Text object edit mode · ff6b25a200 - blender - Blender Projects
### Commit Details:
Since this is what text editors usually do (blenders text editor as
well), we can also add it for Text object edit mode.
Resolves
#112170
.

#112277
-------
).
Walk Navigation: New modal keymap to adjust jump height
  (
f418e4f648
### Commit Summary: Walk Navigation: Controls to adjust jump height interactively · f418e4f648 - blender - Blender Projects
### Commit Details:
In Walk Navigation mode with gravity enabled, the jump height is
often inappropriate for the scene that you are viewing. This is a small
feature that lets you change the jump height in modal walk navigation
as you go, i.e. if there are varying elevation changes across the scene.

Pressing '.' increases and ',' decreases the jump height (because these keys
are the same for most layouts).

#109827
-------
).

'''''


13. Blender 4.0: Node Editor¶

Blender 4.0: Node Editor
¶
Node Panels
¶
Node panels
feature for node groups and built-in nodes
  (
#108895
)
Panels can be used to group sockets in a collapsible section. They
  can be added to node groups and to built-in nodes.
Group sockets are managed in new
UI tree view
together with
  panels. Drag-and-drop support for ordering sockets and inserting into
  panels.
Node group API has breaking changes, see
Python
  API
for details
  and migration help.
Editing
¶
The "Make Group" and "Ungroup" operators are no longer available from
  the add menu.
  (
7c2dc5183d
### Commit Summary: Nodes: Remove "Make Group" and "Ungroup" from add menu · 7c2dc5183d - blender - Blender Projects
### Commit Details:
Since these are operations rather than new nodes, they don't make
sense in the add menu. They are also available in the "Node" menu
in the editor's header and in the context menu.
-------
)
Node group assets unassigned to any node group are displayed in a
  separate "No Catalog" add menu submenu.
  (
d2d4de8c71
### Commit Summary: Geometry Nodes: Show uncategorized assets in separate menus · d2d4de8c71 - blender - Blender Projects
### Commit Details:
In the add modifier menu, 3D viewport menus for node tools, and the node
editor add menu, assets not in catalogs are added to an "No Catalog"
menu rather than not being accessible at all.

This makes the default behavior when adding a node tool "not broken"
so at least something happens by default. The question of "How do I
add a catalog?" is much better than "Why didn't anything happen?"

Implements
#111529
See
#101778
---

![image](/attachments/b943e2c4-f660-4812-b9ab-f7c116b68b98)
![image](/attachments/e6ee94d7-cd14-475f-8fa6-abcc6774fd7e)
![image](/attachments/b1718d0c-4182-49c5-867a-1399082e98f0)

#112355
-------
)
Other
¶
In Preferences → Editing, a new panel was added to group all Node
  Editor specific settings
  (
eb57163f
### Commit Summary: UI: Add panel for Node Editor in Preferences · eb57163fdf - blender - Blender Projects
### Commit Details:
Move Node Editor preferences in the Editing section from `Miscellaneous`
panel into their own `Node Editor` panel.

#111261
-------
).
Improvements to Node links to help readability at different zooms and
  monitor DPI
  (
899d723da8
### Commit Summary: Fix: Display nodelinks consistently across different UI scales · 899d723da8 - blender - Blender Projects
### Commit Details:
Adjust the width, dash length and amount of anti-aliasing of node links
so they look the same independent of the UI scaling.

Adding another parameter to the shader exceeded the limit of 16
attributes. Therefore the parameters to describe the dashes (length,
factor, alpha) are passed in together as a vector.

Ref
#102919
#111270
-------
).
Node snapping grid no longer changes size with changes to line width
  (
04285c2d0e
### Commit Summary: UI: Node Grid Adjustments for Line Width · 04285c2d0e - blender - Blender Projects
### Commit Details:
Have Line Width change Node Grid point size but NOT grid spacing.

#111640
-------
).

'''''


14. Blender 4.0: Keymap¶

Blender 4.0: Keymap
¶
General
¶
Markers: it is now possible to rename markers with double left-click,
  for consistency with other areas in Blender.
  (
26dcc961
### Commit Summary: Markers: Use double-click to rename · 26dcc961f5 - blender - Blender Projects
### Commit Details:
For speed and consistency with other areas in Blender like Outliner,
UILists, animation channels, etc.

This is additionally to F2 (Enter in Industry Compatible keymap),
that shortcut is still valid.

#111264
-------
)
Tweak Tool: can now click-drag multiple objects at once in the
  3D-viewport & UV-editor
  (
618f39fca2
### Commit Summary: Keymap: improve tweak tool consistency & behavior · 618f39fca2 - blender - Blender Projects
### Commit Details:
Remove experimental options & make them default:
- Tweak Select: Mouse Select & Move
- Tweak Tool: Left Mouse Select & Move

Changes:

- LMB press selects the element
  (unless it's already selected - in that case no selection takes place).
- LMB drag moves the selection.
- LMB click selects the element
  (deselecting all others).

Implications:

- This makes it possible to tweak more than one item at a time.
- It is no longer possible to set the 3D cursor with LMB when the tweak
  tool is active.

Details:

- Shift-LMB remains unchanged.
- RMB selection remains unchanged.
- Blender 2.7 key-map remains unchanged.

Addresses design task
#96544
.
-------
)
The Preferences window can now be opened with
Ctrl+Comma
.
  (
86f659ad96
### Commit Summary: Keymap: Add shortcut to open Preferences · 86f659ad96 - blender - Blender Projects
### Commit Details:
Use Ctrl + Comma. It is an expected shortcut since many
other applications use it.
Agreed during module meeting.
-------
)
Pose Mode:
1..0
for switching between scene collections has
  been removed
  (
adef3a4556
### Commit Summary: Animation: Remove collection hotkeys from pose mode · adef3a4556 - blender - Blender Projects
### Commit Details:
We have been chatting in the Animation&Rigging module meeting that the collection hotkeys (1, 2, 3 etc.) in Pose Mode are unwanted and could be replaced with something more useful.
This patch only removes the hotkeys, we can later decide what should be in their place.

#105120
-------
)
Sculpt, Paint, Grease Pencil
¶
For Blender 4.0 various updates were made to the keymap. This will allow
us to better support current and future features and only affects
sculpting, painting and grease pencil related modes.
This is an overview of all changes that may affect users.
Left Click Select
¶
Better support for selecting individual faces/vertices while a brush is
used (vertex/weight/texture painting).
(
fb54d3f865
### Commit Summary: Keymap: Use Alt-LMB for selection in vertex/weight paint modes · fb54d3f865 - blender - Blender Projects
### Commit Details:
Use Alt-LMB for selecting in vertex/weight paint modes for vertex, face
& pose bone selection - replacing Ctrl which was previously used for
selecting. This is needed so Ctrl & Shift can be consistent between all
paint modes.

Loop selection is available With Alt-LMB but only when selection tools
are active (with the LMB select key-map). They're always available with
the RMB select key-map.

This also resolves a conflict where box & lasso select tools couldn't
be used to de-select (via Ctrl) because the Ctrl-LMB was also clearing
the selection.

Part of
#105298
design task.
-------
)
Alt LMB
= Select
Shift Alt LMB
= Select Extend/Toggle
Face Loop selection shortcuts
  (
98d48c16a3
### Commit Summary: Paint: Add loop select for faces · 98d48c16a3 - blender - Blender Projects
### Commit Details:
Add loop selection identical to the behavior of ALT+Click in Edit Mode.

* ALT click: select loop
* ALT Shift click: add loop while retaining current selection
* ALT Shift Ctrl click: deselect loop

#107653
-------
)
  are only available if any selection tool is used.
3 Mouse Button Emulation
¶
Selecting individual faces/verts is now supported and available from
  the selection tools (not while a brush is used).
  (
fb54d3f865
### Commit Summary: Keymap: Use Alt-LMB for selection in vertex/weight paint modes · fb54d3f865 - blender - Blender Projects
### Commit Details:
Use Alt-LMB for selecting in vertex/weight paint modes for vertex, face
& pose bone selection - replacing Ctrl which was previously used for
selecting. This is needed so Ctrl & Shift can be consistent between all
paint modes.

Loop selection is available With Alt-LMB but only when selection tools
are active (with the LMB select key-map). They're always available with
the RMB select key-map.

This also resolves a conflict where box & lasso select tools couldn't
be used to de-select (via Ctrl) because the Ctrl-LMB was also clearing
the selection.

Part of
#105298
design task.
-------
)
Selecting single bones is possible using
Ctrl-Shift-LMB
.
  (
69e290d2fe
### Commit Summary: Cleanup: code comments · 69e290d2fe - blender - Blender Projects
### Commit Details:
Note that the previous commit [0] added a workaround for MMB-Emulation,
which should have been a separate commit.
(Ctrl-Shift-LMB for weight paint selection).
Extended the code comment for this.

[0]:
cfffd813c1
-------
)
Right Click Select
¶
More Mesh Sculpt Mode shortcuts are now properly supported:
W
= Context Menu
Shift Ctrl LMB
= Lasso Masking (
PR#110960
)
Shift Alt Ctrl LMB
= Lasso Unmasking/Selecting (
PR#110960
)
Removed Shortcuts
¶
More space on the keyboard is now freed for user customization. If
needed, any of these shortcuts can be added back by right clicking on
the related UI button and using “Assign Shortcut”.
Some brush shortcuts are removed in Sculpt Mode and Grease Pencil.
(
a7dd864dcf
### Commit Summary: Keymap: simplify default keymap for paint modes · a7dd864dcf - blender - Blender Projects
### Commit Details:
Part of design task
#105298
to improve overall consistency.

This removes various shortcuts unused or blocking shortcuts:

- Brush tool shortcuts
  - Mesh sculpt mode shortcuts
     - `X` = Draw
     - `Shift S` = Smooth
     - `P` = Pinch
     - `I` = Inflate
     - `G` = Grab
     - `L` - Layer
     - `Shift T` = Flatten
     - `C` = Clay
     - `Shift C` = Crease
     - `K` = Snake Hook
     - `M` = Mask
  - `D` = Gpencil Vertex Paint - Draw brush

- Duplicate dyntopo shortcut for editing detail size

- Grease Pencil: Undocumented draw tool specific guide shortcuts:
  - `O`, `J`, `Alt J`, `K`, `Alt K`, `Shift K`, `L`, `Alt L`, `Ctrl L`,
    `V`, `M`, `C` & `Alt C`

- `L` = Gpencil: "Alternate" operator shortcut

Also moved erasing box and lasso gesture shortcuts out of specific tools
and into the Draw mode overall.

Ref
!108712
.
-------
)
  (
fa27e6561e
### Commit Summary: Keymap: restore most used brush shortcuts · fa27e6561e - blender - Blender Projects
### Commit Details:
Based on feedback from users this PR brings back the most commonly used
brush shortcuts in sculpt mode. Essentially reverting some of the
changes from
#108712
There are multiple reasons behind this decision:

- Anyone coming from a previous version will instinctively reassign the
  brush shortcuts to the same keys as before, introducing shortcut
  conflicts as a result. Having the shortcuts there by default makes this
  case less likely as it makes available brush shortcuts more obvious.
- The default `paint.brush_select` operator is hard to set up manually
  and is offering behavior that isn't available with the
  `wm.tool_set_by_id` which is far easier to create from the UI
- There are too many brushes available to know which ones are the most
  common ones.

There are some additional changes:
- `S` is now used for the Smooth brush.
- Draw brush is now assigned to `V` to avoid conflicts on `X`.
- `Shift T` is using the Scrape instead of Flatten brush.
- `C` is using the Clay Strip instead of Clay brush.

Removing the brush shortcuts can be revisited later once the brush
management is overhauled.

Ref
!112898
.
-------
)
D
= Gpencil: Draw brush
L
= Mesh Sculpt Mode: Layer brush
Various unused or niche shortcuts have been removed.
(
a7dd864dcf
### Commit Summary: Keymap: simplify default keymap for paint modes · a7dd864dcf - blender - Blender Projects
### Commit Details:
Part of design task
#105298
to improve overall consistency.

This removes various shortcuts unused or blocking shortcuts:

- Brush tool shortcuts
  - Mesh sculpt mode shortcuts
     - `X` = Draw
     - `Shift S` = Smooth
     - `P` = Pinch
     - `I` = Inflate
     - `G` = Grab
     - `L` - Layer
     - `Shift T` = Flatten
     - `C` = Clay
     - `Shift C` = Crease
     - `K` = Snake Hook
     - `M` = Mask
  - `D` = Gpencil Vertex Paint - Draw brush

- Duplicate dyntopo shortcut for editing detail size

- Grease Pencil: Undocumented draw tool specific guide shortcuts:
  - `O`, `J`, `Alt J`, `K`, `Alt K`, `Shift K`, `L`, `Alt L`, `Ctrl L`,
    `V`, `M`, `C` & `Alt C`

- `L` = Gpencil: "Alternate" operator shortcut

Also moved erasing box and lasso gesture shortcuts out of specific tools
and into the Draw mode overall.

Ref
!108712
.
-------
)
Ctrl M
= Mesh Sculpt Mode: Mask Overlay
Ctrl D
= Mesh Sculpt Mode: Dyntopo toggle
Ctrl Alt R
= Mesh Sculpt Mode: Quadriflow remesher on
Shift L
= Gpencil: Alternate selection
Gpencil Draw Mode: 13 individual Guides shortcuts on Draw brush
Common Shortcuts
¶
Various shortcuts are now more consistent and shortcut conflicts are
fixed. More features are now better supported.
1,2,3
= Selection Modes (if available)
(
827918c925
### Commit Summary: Keymap: add/update selection mode shortcuts · 827918c925 - blender - Blender Projects
### Commit Details:
Selection modes are typically assigned to the number keys.
These are some updates for more consistency among painting and grease
pencil modes:

- Paint Mask = `M` changed to `1`.
- Vertex Selection = `V` changed to `2`.
- GP: Point Selection = `1`.
- GP: Stroke Selection = `2`.
- GP: Segment Selection = `3`.

Design task:
#105298
Ref
!108714
.
-------
)
Full brush support in vertex/weight paint
  modes
(
6de6d7267f
### Commit Summary: Keymap: improve consistency for paint modes · 6de6d7267f - blender - Blender Projects
### Commit Details:
Various changes to common keymap entries to:

- Sync up very common shortcuts between all Draw, Paint & Sculpt modes
- Avoid shortcut conflicts and remap blocking shortcuts
- Add missing common shortcuts
- Make some important shortcuts more accessible

Some standards this is setting across these modes are:

- Holding `Ctrl` & `Shift` for inverted/smoothing brush strokes
- `X` (+ modifier keys) for Color operations
  (for example flip, sample & fill).
- `Ctrl R` for remeshing
- `I` and `Alt I` for creating and removing keyframes.

- Sample Color = `S` -> `Shift X`
- Set Vertex Color = `Shift K` -> `Ctrl X`
- Stroke Method Menu = `E` -> `Alt E`

New
- Paint Smooth = `Shift Left Mouse`

- Sample Weight = `Ctrl Left Mouse` -> `Shift X`
- Sample Group = `Shift Left Mouse` -> `Shift Ctrl X`
- Set Weight = `Shift K` -> `Ctrl X`
- Linear Gradient = `Alt Left Mouse` -> `Shift A`
- Radial Gradient = `Ctrl Alt Left Mouse` -> `Shift Alt A`
- Stroke Method Menu = `E` -> `Alt E`

New
- Invert Paint = `Ctrl Left Mouse`
- Smooth Paint = `Shift Left Mouse`

- Sample Color = `S` -> `Shift X`

New
- Smooth Paint = `Shift Left Mouse`

- Face Sets Visibility = `H` -> `Shift H`
- Face Sets Visibility = `Shift H` -> `H`
- Face Set Edit Pie = `W` -> `Alt W`
- Sample Color = `S` -> `Shift X`
- Context Enum Menu = `E` -> `Alt E`
- Subdivision Set (Level -1 relative) = `Pg Down` -> `Alt 1`
- Subdivision Set (Level 1 relative) = `Pg Up` -> `Alt 2`

New
- `paint.brush_colors_flip` = `X`
- `sculpt.detail_flood_fill` = `Ctrl R`
- `sculpt.set_pivot_position` (Mode=Surface) = `Shift Right Mouse`

New
- `brush.scale_size` (scalar=0.9) = `[`.
- `brush.scale_size` (scalar=1.1) = `]`.

Removed
- Delete All Active Frames = `Shift X`

New
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

- Delete = `X` -> `Alt I`

New
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

- Sample Weight = `Ctrl Left Mouse` -> `Shift X`

New
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

New
- `gpencil.tint_flip` = `X`
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

Ref
!108791
.
-------
)
Shift LMB
= Smooth stroke
Ctrl LMB
= Inverted Stroke
Color & Weight painting
  shortcuts
(
6de6d7267f
### Commit Summary: Keymap: improve consistency for paint modes · 6de6d7267f - blender - Blender Projects
### Commit Details:
Various changes to common keymap entries to:

- Sync up very common shortcuts between all Draw, Paint & Sculpt modes
- Avoid shortcut conflicts and remap blocking shortcuts
- Add missing common shortcuts
- Make some important shortcuts more accessible

Some standards this is setting across these modes are:

- Holding `Ctrl` & `Shift` for inverted/smoothing brush strokes
- `X` (+ modifier keys) for Color operations
  (for example flip, sample & fill).
- `Ctrl R` for remeshing
- `I` and `Alt I` for creating and removing keyframes.

- Sample Color = `S` -> `Shift X`
- Set Vertex Color = `Shift K` -> `Ctrl X`
- Stroke Method Menu = `E` -> `Alt E`

New
- Paint Smooth = `Shift Left Mouse`

- Sample Weight = `Ctrl Left Mouse` -> `Shift X`
- Sample Group = `Shift Left Mouse` -> `Shift Ctrl X`
- Set Weight = `Shift K` -> `Ctrl X`
- Linear Gradient = `Alt Left Mouse` -> `Shift A`
- Radial Gradient = `Ctrl Alt Left Mouse` -> `Shift Alt A`
- Stroke Method Menu = `E` -> `Alt E`

New
- Invert Paint = `Ctrl Left Mouse`
- Smooth Paint = `Shift Left Mouse`

- Sample Color = `S` -> `Shift X`

New
- Smooth Paint = `Shift Left Mouse`

- Face Sets Visibility = `H` -> `Shift H`
- Face Sets Visibility = `Shift H` -> `H`
- Face Set Edit Pie = `W` -> `Alt W`
- Sample Color = `S` -> `Shift X`
- Context Enum Menu = `E` -> `Alt E`
- Subdivision Set (Level -1 relative) = `Pg Down` -> `Alt 1`
- Subdivision Set (Level 1 relative) = `Pg Up` -> `Alt 2`

New
- `paint.brush_colors_flip` = `X`
- `sculpt.detail_flood_fill` = `Ctrl R`
- `sculpt.set_pivot_position` (Mode=Surface) = `Shift Right Mouse`

New
- `brush.scale_size` (scalar=0.9) = `[`.
- `brush.scale_size` (scalar=1.1) = `]`.

Removed
- Delete All Active Frames = `Shift X`

New
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

- Delete = `X` -> `Alt I`

New
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

- Sample Weight = `Ctrl Left Mouse` -> `Shift X`

New
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

New
- `gpencil.tint_flip` = `X`
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

Ref
!108791
.
-------
)
X
= Flip Color (Not supported yet in Grease Pencil Draw
  Mode)
Shift X
= Sample color/weight
Ctrl X
= Fill color/weight
Shift Ctrl X
= Weight Paint Mode: Sample Vertex Group
Other
(
6de6d7267f
### Commit Summary: Keymap: improve consistency for paint modes · 6de6d7267f - blender - Blender Projects
### Commit Details:
Various changes to common keymap entries to:

- Sync up very common shortcuts between all Draw, Paint & Sculpt modes
- Avoid shortcut conflicts and remap blocking shortcuts
- Add missing common shortcuts
- Make some important shortcuts more accessible

Some standards this is setting across these modes are:

- Holding `Ctrl` & `Shift` for inverted/smoothing brush strokes
- `X` (+ modifier keys) for Color operations
  (for example flip, sample & fill).
- `Ctrl R` for remeshing
- `I` and `Alt I` for creating and removing keyframes.

- Sample Color = `S` -> `Shift X`
- Set Vertex Color = `Shift K` -> `Ctrl X`
- Stroke Method Menu = `E` -> `Alt E`

New
- Paint Smooth = `Shift Left Mouse`

- Sample Weight = `Ctrl Left Mouse` -> `Shift X`
- Sample Group = `Shift Left Mouse` -> `Shift Ctrl X`
- Set Weight = `Shift K` -> `Ctrl X`
- Linear Gradient = `Alt Left Mouse` -> `Shift A`
- Radial Gradient = `Ctrl Alt Left Mouse` -> `Shift Alt A`
- Stroke Method Menu = `E` -> `Alt E`

New
- Invert Paint = `Ctrl Left Mouse`
- Smooth Paint = `Shift Left Mouse`

- Sample Color = `S` -> `Shift X`

New
- Smooth Paint = `Shift Left Mouse`

- Face Sets Visibility = `H` -> `Shift H`
- Face Sets Visibility = `Shift H` -> `H`
- Face Set Edit Pie = `W` -> `Alt W`
- Sample Color = `S` -> `Shift X`
- Context Enum Menu = `E` -> `Alt E`
- Subdivision Set (Level -1 relative) = `Pg Down` -> `Alt 1`
- Subdivision Set (Level 1 relative) = `Pg Up` -> `Alt 2`

New
- `paint.brush_colors_flip` = `X`
- `sculpt.detail_flood_fill` = `Ctrl R`
- `sculpt.set_pivot_position` (Mode=Surface) = `Shift Right Mouse`

New
- `brush.scale_size` (scalar=0.9) = `[`.
- `brush.scale_size` (scalar=1.1) = `]`.

Removed
- Delete All Active Frames = `Shift X`

New
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

- Delete = `X` -> `Alt I`

New
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

- Sample Weight = `Ctrl Left Mouse` -> `Shift X`

New
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

New
- `gpencil.tint_flip` = `X`
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

Ref
!108791
.
-------
)
Alt E
= Stroke Type Menu
Mesh Sculpt Mode
¶
Changed some brush shortcuts to more commonly used brushes and to
  avoid shortcut conflicts
  (
fa27e6561e
### Commit Summary: Keymap: restore most used brush shortcuts · fa27e6561e - blender - Blender Projects
### Commit Details:
Based on feedback from users this PR brings back the most commonly used
brush shortcuts in sculpt mode. Essentially reverting some of the
changes from
#108712
There are multiple reasons behind this decision:

- Anyone coming from a previous version will instinctively reassign the
  brush shortcuts to the same keys as before, introducing shortcut
  conflicts as a result. Having the shortcuts there by default makes this
  case less likely as it makes available brush shortcuts more obvious.
- The default `paint.brush_select` operator is hard to set up manually
  and is offering behavior that isn't available with the
  `wm.tool_set_by_id` which is far easier to create from the UI
- There are too many brushes available to know which ones are the most
  common ones.

There are some additional changes:
- `S` is now used for the Smooth brush.
- Draw brush is now assigned to `V` to avoid conflicts on `X`.
- `Shift T` is using the Scrape instead of Flatten brush.
- `C` is using the Clay Strip instead of Clay brush.

Removing the brush shortcuts can be revisited later once the brush
management is overhauled.

Ref
!112898
.
-------
)
V
= Draw Brush (previously on
X
)
S
= Smooth Brush (previously on
Shift S
)
C
= Clay Strips Brush (previously Clay)
Shift T
= Scrape Brush (previously Flatten)
Other shortcuts
(
6de6d7267f
### Commit Summary: Keymap: improve consistency for paint modes · 6de6d7267f - blender - Blender Projects
### Commit Details:
Various changes to common keymap entries to:

- Sync up very common shortcuts between all Draw, Paint & Sculpt modes
- Avoid shortcut conflicts and remap blocking shortcuts
- Add missing common shortcuts
- Make some important shortcuts more accessible

Some standards this is setting across these modes are:

- Holding `Ctrl` & `Shift` for inverted/smoothing brush strokes
- `X` (+ modifier keys) for Color operations
  (for example flip, sample & fill).
- `Ctrl R` for remeshing
- `I` and `Alt I` for creating and removing keyframes.

- Sample Color = `S` -> `Shift X`
- Set Vertex Color = `Shift K` -> `Ctrl X`
- Stroke Method Menu = `E` -> `Alt E`

New
- Paint Smooth = `Shift Left Mouse`

- Sample Weight = `Ctrl Left Mouse` -> `Shift X`
- Sample Group = `Shift Left Mouse` -> `Shift Ctrl X`
- Set Weight = `Shift K` -> `Ctrl X`
- Linear Gradient = `Alt Left Mouse` -> `Shift A`
- Radial Gradient = `Ctrl Alt Left Mouse` -> `Shift Alt A`
- Stroke Method Menu = `E` -> `Alt E`

New
- Invert Paint = `Ctrl Left Mouse`
- Smooth Paint = `Shift Left Mouse`

- Sample Color = `S` -> `Shift X`

New
- Smooth Paint = `Shift Left Mouse`

- Face Sets Visibility = `H` -> `Shift H`
- Face Sets Visibility = `Shift H` -> `H`
- Face Set Edit Pie = `W` -> `Alt W`
- Sample Color = `S` -> `Shift X`
- Context Enum Menu = `E` -> `Alt E`
- Subdivision Set (Level -1 relative) = `Pg Down` -> `Alt 1`
- Subdivision Set (Level 1 relative) = `Pg Up` -> `Alt 2`

New
- `paint.brush_colors_flip` = `X`
- `sculpt.detail_flood_fill` = `Ctrl R`
- `sculpt.set_pivot_position` (Mode=Surface) = `Shift Right Mouse`

New
- `brush.scale_size` (scalar=0.9) = `[`.
- `brush.scale_size` (scalar=1.1) = `]`.

Removed
- Delete All Active Frames = `Shift X`

New
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

- Delete = `X` -> `Alt I`

New
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

- Sample Weight = `Ctrl Left Mouse` -> `Shift X`

New
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

New
- `gpencil.tint_flip` = `X`
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

Ref
!108791
.
-------
)
Alt W
= Face Set Edit pie menu
H
= Hide Active Face Set
Shift H
= Hide Inactive Face Sets / Show All
Alt 1
/
Alt 2
= Increase/decrease Multires Levels
Ctrl R
= Dyntopo flood fill if Dyntopo is enabled
Shift RMB
= Set the Pivot Point for Transform Gizmos
Weight Paint Mode
¶
Ctrl-Shift-LMB
= Selecting bones
  (
69e290d2fe
### Commit Summary: Cleanup: code comments · 69e290d2fe - blender - Blender Projects
### Commit Details:
Note that the previous commit [0] added a workaround for MMB-Emulation,
which should have been a separate commit.
(Ctrl-Shift-LMB for weight paint selection).
Extended the code comment for this.

[0]:
cfffd813c1
-------
)
Shift A
&
Shift Alt A
= Weight Paint Gradients
  (
6de6d7267f
### Commit Summary: Keymap: improve consistency for paint modes · 6de6d7267f - blender - Blender Projects
### Commit Details:
Various changes to common keymap entries to:

- Sync up very common shortcuts between all Draw, Paint & Sculpt modes
- Avoid shortcut conflicts and remap blocking shortcuts
- Add missing common shortcuts
- Make some important shortcuts more accessible

Some standards this is setting across these modes are:

- Holding `Ctrl` & `Shift` for inverted/smoothing brush strokes
- `X` (+ modifier keys) for Color operations
  (for example flip, sample & fill).
- `Ctrl R` for remeshing
- `I` and `Alt I` for creating and removing keyframes.

- Sample Color = `S` -> `Shift X`
- Set Vertex Color = `Shift K` -> `Ctrl X`
- Stroke Method Menu = `E` -> `Alt E`

New
- Paint Smooth = `Shift Left Mouse`

- Sample Weight = `Ctrl Left Mouse` -> `Shift X`
- Sample Group = `Shift Left Mouse` -> `Shift Ctrl X`
- Set Weight = `Shift K` -> `Ctrl X`
- Linear Gradient = `Alt Left Mouse` -> `Shift A`
- Radial Gradient = `Ctrl Alt Left Mouse` -> `Shift Alt A`
- Stroke Method Menu = `E` -> `Alt E`

New
- Invert Paint = `Ctrl Left Mouse`
- Smooth Paint = `Shift Left Mouse`

- Sample Color = `S` -> `Shift X`

New
- Smooth Paint = `Shift Left Mouse`

- Face Sets Visibility = `H` -> `Shift H`
- Face Sets Visibility = `Shift H` -> `H`
- Face Set Edit Pie = `W` -> `Alt W`
- Sample Color = `S` -> `Shift X`
- Context Enum Menu = `E` -> `Alt E`
- Subdivision Set (Level -1 relative) = `Pg Down` -> `Alt 1`
- Subdivision Set (Level 1 relative) = `Pg Up` -> `Alt 2`

New
- `paint.brush_colors_flip` = `X`
- `sculpt.detail_flood_fill` = `Ctrl R`
- `sculpt.set_pivot_position` (Mode=Surface) = `Shift Right Mouse`

New
- `brush.scale_size` (scalar=0.9) = `[`.
- `brush.scale_size` (scalar=1.1) = `]`.

Removed
- Delete All Active Frames = `Shift X`

New
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

- Delete = `X` -> `Alt I`

New
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

- Sample Weight = `Ctrl Left Mouse` -> `Shift X`

New
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

New
- `gpencil.tint_flip` = `X`
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

Ref
!108791
.
-------
)
Grease Pencil
¶
Alt I
= Grease Pencil Delete Active Frame
  (
6de6d7267f
### Commit Summary: Keymap: improve consistency for paint modes · 6de6d7267f - blender - Blender Projects
### Commit Details:
Various changes to common keymap entries to:

- Sync up very common shortcuts between all Draw, Paint & Sculpt modes
- Avoid shortcut conflicts and remap blocking shortcuts
- Add missing common shortcuts
- Make some important shortcuts more accessible

Some standards this is setting across these modes are:

- Holding `Ctrl` & `Shift` for inverted/smoothing brush strokes
- `X` (+ modifier keys) for Color operations
  (for example flip, sample & fill).
- `Ctrl R` for remeshing
- `I` and `Alt I` for creating and removing keyframes.

- Sample Color = `S` -> `Shift X`
- Set Vertex Color = `Shift K` -> `Ctrl X`
- Stroke Method Menu = `E` -> `Alt E`

New
- Paint Smooth = `Shift Left Mouse`

- Sample Weight = `Ctrl Left Mouse` -> `Shift X`
- Sample Group = `Shift Left Mouse` -> `Shift Ctrl X`
- Set Weight = `Shift K` -> `Ctrl X`
- Linear Gradient = `Alt Left Mouse` -> `Shift A`
- Radial Gradient = `Ctrl Alt Left Mouse` -> `Shift Alt A`
- Stroke Method Menu = `E` -> `Alt E`

New
- Invert Paint = `Ctrl Left Mouse`
- Smooth Paint = `Shift Left Mouse`

- Sample Color = `S` -> `Shift X`

New
- Smooth Paint = `Shift Left Mouse`

- Face Sets Visibility = `H` -> `Shift H`
- Face Sets Visibility = `Shift H` -> `H`
- Face Set Edit Pie = `W` -> `Alt W`
- Sample Color = `S` -> `Shift X`
- Context Enum Menu = `E` -> `Alt E`
- Subdivision Set (Level -1 relative) = `Pg Down` -> `Alt 1`
- Subdivision Set (Level 1 relative) = `Pg Up` -> `Alt 2`

New
- `paint.brush_colors_flip` = `X`
- `sculpt.detail_flood_fill` = `Ctrl R`
- `sculpt.set_pivot_position` (Mode=Surface) = `Shift Right Mouse`

New
- `brush.scale_size` (scalar=0.9) = `[`.
- `brush.scale_size` (scalar=1.1) = `]`.

Removed
- Delete All Active Frames = `Shift X`

New
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

- Delete = `X` -> `Alt I`

New
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

- Sample Weight = `Ctrl Left Mouse` -> `Shift X`

New
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

New
- `gpencil.tint_flip` = `X`
- `wm.call_menu (GPENCIL_MT_gpencil_draw_delete)` = `Alt I`

Ref
!108791
.
-------
)
Gpencil Draw Mode: Box Delete and Lasso Delete shortcuts are easier
  to
  access.
(
a7dd864dcf
### Commit Summary: Keymap: simplify default keymap for paint modes · a7dd864dcf - blender - Blender Projects
### Commit Details:
Part of design task
#105298
to improve overall consistency.

This removes various shortcuts unused or blocking shortcuts:

- Brush tool shortcuts
  - Mesh sculpt mode shortcuts
     - `X` = Draw
     - `Shift S` = Smooth
     - `P` = Pinch
     - `I` = Inflate
     - `G` = Grab
     - `L` - Layer
     - `Shift T` = Flatten
     - `C` = Clay
     - `Shift C` = Crease
     - `K` = Snake Hook
     - `M` = Mask
  - `D` = Gpencil Vertex Paint - Draw brush

- Duplicate dyntopo shortcut for editing detail size

- Grease Pencil: Undocumented draw tool specific guide shortcuts:
  - `O`, `J`, `Alt J`, `K`, `Alt K`, `Shift K`, `L`, `Alt L`, `Ctrl L`,
    `V`, `M`, `C` & `Alt C`

- `L` = Gpencil: "Alternate" operator shortcut

Also moved erasing box and lasso gesture shortcuts out of specific tools
and into the Draw mode overall.

Ref
!108712
.
-------
)
The shortcuts on
B
and
Ctrl Alt RMB
were previously
  only available on the Draw brush. Now they are are accessible in the
  entire Draw Mode.
Grease Pencil shortcuts to select entire strokes are now consistent
  with Select Linked shortcuts on
L
&
Shift L
(
PR#110960
)
It’s also better supported to change to stroke selection mode and
  select stroke any time with mouse clicks.
Industry Compatible Keymap
¶
Many shortcuts of this keymap have been added and fixed for modes
related to painting, sculpting and grease pencil.
(
8814101a20
### Commit Summary: Keymap: Compatible Keymap - Consistency and Updates · 8814101a20 - blender - Blender Projects
### Commit Details:
The changes in this keymap are much more involved.
If any shortcut isn't mentioned, that means it is unchanged.

General:

- All brush shortcuts have been removed for free custom mapping
- `S` & `U` are now consistently mapped for Brush size & strength
- Redundant shortcuts have been removed such as
  - Line Session drawing (In GP Draw Tool)
  - Select Alternate in GP
  - Quadriflow Remesh (In Mesh Sculpt Mode)
  - Box Hide (In Mesh Sculpt Mode)
  - Dynamic Topology Toggle (In Mesh Sculpt Mode)
  - Mask Overlay (In Mesh Sculpt Mode)
- Removed Lasso Mask/Select shortcuts (This keymap is mainly using the Tools instead. Easy to add back if needed.)

Mode Switching (Global change):

Easier mode switching access for any workflow.

- `123` = switch selection/mask modes for the **current mode**. If in object mode, it will first switch to edit mode (Previously this would always switch to edit mode)
- `4` = Mode switching pie menu (previously `4-7` for individual modes)
- `Tilde` = Transfer Mode (Previously not mapped. Useful for instant object switching while keeping the current mode)
- `5-0` = Unassigned

Brush vs Selection:

Multiple Modes were missing these shortcuts.

- `Shift` `LMB` = Smooth Brush
- `Ctrl` `LMB` = Inverted Brush
- `Shift` `Alt` `LMB` = Set Selection
- `Shift` `Alt` `Ctrl` `LMB` = Toggle-Extend Selection

Brush Size vs Select Linked:

These were previously in direct conflict. Now they are both distinct and based on other DCC software.

- `[` = Decrease Brush Size
- `]` = Increase Brush Size
- `Alt` `dbl LMB` = Select Linked Pick
- `Ctrl` `Alt` `dbl LMB` = Deselect Linked Pick
- `Ctrl` `L` = Select Linked

Select & Mask:

- `Q` = Cycle Masking/Selection Tools
- `Ctrl` `A` = Mask/Select Pie Menu (Draw, Paint, Sculpt Modes)
- `Alt` `A` = Auto-Masking Pie Menu (Mesh & GP Sculpt Mode)
- `Shift A` = Expand Mask (Mesh Sculpt Mode) / Grow Selection (Curve Sculpt Mode)
- `Shift` `Alt` `A` = Expand Mask by Normals (Mesh Sculpt Mode)

Face Sets & Visibility:

Previously missing shortcuts.

- `Shift` `W` = Face Set Expand
- `Shift` `Alt` `W` = Active Face Set Expand
- `Ctrl` `W` = Face Set Edit Pie Menu
- `Page Up` = Grow Active Face Set
- `Page Down` = Shrink Active Face Set
- `H` = Hide Active Face Set
- `Shift` `H` = Hide Inactive Face Sets / Show everything
- `Ctrl` `H` = Hide Masked Geometry

Transforming:

For Sculpt and Weight Painting modes. Previously missing

- `C` = Cursor Tool
- `W` = Move Tool
- `E` = Rotate Tool
- `R` = Scale Tool
- `T` = Transform Tool
- `Shift` `RMB` = Set Cursor / Set Transform Pivot in Sculpt Mode

Sculpting:

Consistent and easier to access shortcuts for remeshing and subdiv level .

- `Shift` `D` = Subdivision level Down (Previously on `Pg Down`)
- `D` = Subdivision level Up (Previously on `Pg Up`)
- `Shift` `Ctrl` `D` = Voxel Size / Dyntopo Size
- `Ctrl` `D` = Voxel Remesh / Dyntopo Flood Fill

Adding missing shortcuts

Painting:

Fixing various missing or inconsistent shortcuts.

- `Backspace` = Set Color/Weight
- `I` = Sample Color/Weight
- `Alt` `I` = Sample Vertex Group
- `Alt` `Ctrl` `I` = Vertex Group Lock Pie
- `X` = Swap Colors (Previously missing in Sculpt Mode)

Grease Pencil:

Adding many missing shortcuts.

- `Shift S` = Animation Menu (Previously on `I` and missing outside of Draw Mode)
- `Shift` `Alt` `S` = Insert Blank Keyframe
- `Alt` `H` = Unhide Layers
- `Ctrl` `H` = Hide Active Layer
- `Shift` H = Hide Inactive Layers
- `Y` = Active Layer Menu
- `Shift` `Y` = Merge Layer Down
- `Alt` `Y` = Material Menu
- `Alt` `Backspace`/`Delete` = Delete Active Keyframe (Previously on `D` `Backspace`/`Delete`)

Other:

Adding missing shortcuts.

- `MMB` for panning in the User Interface (Highly requested)
- `Shift F` = Center View to Mouse (Replacing Frame Selected(All Regions) shortcut)
- `D` = Annotate
- `L` = Toggle Stabilize Stroke (Previously on `Shift` `S`)
- `Ctrl F` = Weight radial control in weight painting modes

Ref
!109750
.
-------
)
This will will help maintain and further support the keymap in the
future. If any shortcut isn't mentioned, that means it is unchanged.
Removed Shortcuts
¶
All brush shortcuts have been removed for free custom mapping
Redundant shortcuts have been removed such as
Line Session drawing (In GP Draw Tool)
Select Alternate in GP
Quadriflow Remesh (In Mesh Sculpt Mode)
Box Hide (In Mesh Sculpt Mode)
Dynamic Topology Toggle (In Mesh Sculpt Mode)
Mask Overlay (In Mesh Sculpt Mode)
Removed Lasso Mask/Select shortcuts (This keymap is mainly using the
  Tools instead. Easy to add back if needed.)
Mode Switching
¶
Easier mode switching access for any workflow. The previous shortcuts
heavily favored modeling.
(
a3d0006ac1
### Commit Summary: Keymap: IC, minor adjustments based on user requests · a3d0006ac1 - blender - Blender Projects
### Commit Details:
Some small adjustments based on user requests from the community.

- The shortcut on 4 for Object Mode was much preferred.
  As a compromise the mode pie menu moved to 5.
- The region selection shortcut from the default keymap was not added.
  It's now available on Ctrl Shift Alt LMB.

Ref
!112628
.
-------
)
123
= Switch selection/mask modes for the
current mode
. If
  in object mode, it will first switch to edit mode (Previously this
  would always switch to edit mode)
5
= Mode switching pie menu (previously
5-7
for individual
  modes)
Tilde
= Transfer Mode (Previously not mapped. Useful for
  instant object switching while keeping the current mode)
6-0
= Unassigned
Brush & Selection
¶
Multiple Modes were missing these shortcuts.
Shift LMB
= Smooth Brush
Ctrl LMB
= Inverted Brush
**Shift Alt LMB
** = Set Selection
Shift Alt Ctrl LMB
= Toggle-Extend Selection
Brush Size & Select Linked
¶
These were previously in direct conflict. Now they are both distinct and
based on other DCC software.
[
= Decrease Brush Size
]
= Increase Brush Size
Alt dbl LMB
= Select Linked Pick
Ctrl Alt dbl LMB
= Deselect Linked Pick
Ctrl L
= Select Linked
Select & Mask
¶
Q
= Cycle Masking/Selection Tools
Ctrl A
= Mask Pie Menu (Mesh Sculpt Mode)
Alt A
= Auto-Masking Pie Menu (Mesh & GP Sculpt Mode)
Shift A
= Expand Mask (Mesh Sculpt Mode) / Grow Selection
  (Curve Sculpt Mode)
Shift Alt A
= Expand Mask by Normals (Mesh Sculpt Mode)
Face Sets & Visibility
¶
Previously missing shortcuts.
Shift W
= Face Set Expand
Shift Alt W
= Active Face Set Expand
Ctrl W
= Face Set Edit Pie Menu
Page Up
= Grow Active Face Set
Page Down
= Shrink Active Face Set
H
= Hide Active Face Set
Shift H
= Hide Inactive Face Sets / Show everything
Ctrl H
= Hide Masked Geometry
Transforming
¶
For Sculpt and Weight Painting modes. Previously missing
C
= Cursor Tool
W
= Move Tool
E
= Rotate Tool
R
= Scale Tool
T
= Transform Tool
Shift RMB
= Set Cursor / Set Transform Pivot in Sculpt Mode
Sculpting
¶
Consistent and easier to access shortcuts for remeshing and subdiv level
.
Shift D
= Subdivision level Down (Previously on
Pg Down
)
D
= Subdivision level Up (Previously on
Pg Up
)
Shift Ctrl D
= Voxel Size / Dyntopo Size
Ctrl D
= Voxel Remesh / Dyntopo Flood Fill
Adding missing shortcuts
Painting
¶
Fixing various missing or inconsistent shortcuts.
Backspace
= Set Color/Weight
I
= Sample Color/Weight
Alt I
= Sample Vertex Group
Alt Ctrl I
= Vertex Group Lock Pie
X
= Swap Colors (Previously missing in Sculpt Mode)
Grease Pencil
¶
Adding many missing shortcuts.
Shift S
= Animation Menu (Previously on
I
and missing
  outside of Draw Mode)
Shift Alt S
= Insert Blank Keyframe
Alt H
= Unhide Layers
Ctrl H
= Hide Active Layer
Shift H
= Hide Inactive Layers
Y
= Active Layer Menu
Shift Y
= Merge Layer Down
Alt Y
= Material Menu
Backspace
/
Delete
= Delete Menu (Now in all modes)
Shift Backspace
/
Delete
= Delete All Keyframes (Previously
  on
D Backspace
/
Delete
)
Mesh Edit Mode
¶
Ctrl Shift Alt LMB
= Region Selection
  (
a3d0006ac1
### Commit Summary: Keymap: IC, minor adjustments based on user requests · a3d0006ac1 - blender - Blender Projects
### Commit Details:
Some small adjustments based on user requests from the community.

- The shortcut on 4 for Object Mode was much preferred.
  As a compromise the mode pie menu moved to 5.
- The region selection shortcut from the default keymap was not added.
  It's now available on Ctrl Shift Alt LMB.

Ref
!112628
.
-------
)
Other
¶
Adding missing shortcuts.
MMB
for panning in the User Interface (Highly requested)
Shift F
= Center View to Mouse (Replacing Frame Selected(All
  Regions) shortcut)
D
= Annotate
L
= Toggle Stabilize Stroke (Previously on
Shift S
)
Ctrl F
= Weight radial control in weight painting modes
Generally improved consistency for region shortcuts and linked selection
in all editors
(
a0e5b03126
### Commit Summary: Keymap: IC, regions shortcuts and fixed inconsistencies · a0e5b03126 - blender - Blender Projects
### Commit Details:
This is a followup fixes related to
#105298
This PR adds shortcuts to toggle the sidebar, toolbar, channels and
other regions across various editors with the Ctrl-LeftBracket &
Ctrl-RightBracket shortcuts.

An additional shortcut to toggle the Asset Shelf in the 3D Viewport via
Shift Spacebar was also added. This shortcut will be important for
various workflows in the future.

To avoid shortcut conflicts and improve consistency, Ctrl-L is now
consistently being used for select_linked operations.

Ref
!112042
.
-------
)
Ctrl L
= Select Linked
Ctrl [
= Toggle Toolbar/Channels
Ctrl ]
= Toggle Sidebar
Shift Spacebar
= Toggle Asset Shelf

'''''


15. Blender 4.0: Add-ons¶

Blender 4.0: Add-ons
¶
Hydra Storm
¶
Storm is a realtime renderer part of
USD
.
When enabling the add-on, it can be chosen as an alternative to Cycles,
EEVEE or Workbench.
(
5ec7ca8f12
)
Compared to EEVEE its capabilities are limited, as it was designed
mostly for previews. It serves two main purposes:
In production pipelines where Blender outputs USD files, it provides a
  preview of how the scene will be exported to other applications. Tools
  such as
usdview
use Storm as their default renderer, and other 3D
  apps often provide an option to use Storm as well.
As a reference for Blender, add-on and studio pipeline developers to
  validate USD and Hydra integration.
When enabling "Developer Extras", there is an option to export the scene
through USD instead of Hydra. Hydra provides fast interactive updates,
but it currently does not match USD export exactly. USD gives an
accurate preview of how the file would be loaded into another
application. Work to improve this consistency is ongoing.
Rigify
¶
The old interface for configuring layer names and defining the layer
  visibility panel toggle button layout, as well as the interface for
  specifying additional layers in rig component properties have been
  rewritten to use the new bone collections. Old metarigs have to be
  upgraded by clicking a button.
  (
5ec3aa7d9d
,
Manual
  1
### Commit Summary: Creating Meta-rigs — Blender Manual
### Commit Details:
No details found
-------
,
Manual
  2
### Commit Summary: Creating Meta-rigs — Blender Manual
### Commit Details:
No details found
-------
)
The layer visibility button layout can now be modified through a
  visual editor sub-panel rather than through changing obscure number
  values.
  (
5ec3aa7d9d
,
Manual
### Commit Summary: Creating Meta-rigs — Blender Manual
### Commit Details:
No details found
-------
)
Re-generating the rig now preserves the visibility settings for bone
  collections that already existed in the target rig.
  (
729dc2b284
)
The feature set list now contains ghost entries for the feature sets
  mentioned in the manual, containing brief descriptions and web links,
  even if they are not installed.
  (
08af2f5035
)
The new
Curved B-Bone vertex
  mapping
is now applied by the face upgrade operator for the mouth corners.
  (
ce6775b50d
)
The following rig features have been promoted from the
experimental
feature set
to the core
add-on:
The leg rig now has an alternative IK to FK snap operator button that
  can use the heel roll control to avoid rotating the main IK control
  around certain local axes from its current orientation (by default it
  tries to keep the IK control parallel to the same imaginary ground
  plane).
  (
8f16645901
,
Manual
### Commit Summary: Generated Rig Features — Blender Manual
### Commit Details:
No details found
-------
)
The leg rig can optionally generate a slider to perform forward roll
  around the tip of the toe rather than its base.
  (
8f16645901
,
Manual
### Commit Summary: Generated Rig Features — Blender Manual
### Commit Details:
No details found
-------
)
There is a new built-in spline tentacle rig based on Spline IK.
  (
621149bb57
,
Manual
### Commit Summary: Generated Rig Features — Blender Manual
### Commit Details:
No details found
-------
)
glTF 2.0
¶
Importer
¶
Implement EXT_mesh_gpu_instancing import
  (
01b30876b1
)
implement EXT_texture_webp import
  (
332839d7ab
)
Better rigging roundrip when import then export (e7a7626052,
  c95149d351, 9b77553c6e)
Fix, and add some conversion for custom attribute types
  (
9d5c1cc74a
,
9ccd934d19
)
Manage new Principled BSDF node
  (
7bc4614eff
,
53f0f57ddf
Fix missing Volume extension in list of managed extensions
  (
62cf7b53c1
)
Exporter
¶
Manage new Principled BSDF node (Really long list of commit, see
  history for details)
Use sparse accessors when it leads to small files
  (
ceac431492
)
Add option to choose number of bone influence
  (
a75b59baa3
)
Better rigging roundrip when import then export
  (
e7a7626052
,
c95149d351
,
9b77553c6e
)
Implement EXT_mesh_gpu_instancing export
  (
01b30876b1
)
Manage UVMaps outside of materials and using Attribute as UVMap
  (
bd7fea9ca3
)
implement EXT_texture_webp export
  (
332839d7ab
)
Remove embedded gltf option
  (
097bf234f6
)
Allow normalization in gather_attribute_change user extension
  (
1925b33827
)
Round tangents to avoid not determinist exports
  (
7f9569e672
)
Texture: Use default value when merging channels
  (
dbcc17eb97
)
Single Armature with no animation data will not export all anims
  (
15780ade32
)
Fix after API changes for nodegroups
  (
0cddda9150
,
4df6f7c66d
)
Fix crash when user try to merge identical tracks
  (
5180d77b7a
)
Fix crash on not valid meshes
  (
e3268f67c7
)
Fix wrong detection of Basis Shape Key
  (
0cc8764795
)
Fix check in texture image
  (
3f13ac814f
)
Fix crash on extra channels when not sampled
  (
a4dd07ee34
)
Fix crash in animation export in track mode
  (
a6cc6a16cb
)
Fix restore of track mute during track mode export
  (
462064c396
)
Fix Real children of instance collection visibility check
  (
5a505e38ee
)
Export UV Layout
¶
UV Tiles can now be exported using the UDIM or UVTILE numbering schemes.
(
122534edfb
)
Collection Manager
¶
Added support for the new alpha property in theme outlines to the QCD
Move Widget theme overrides.
(
acb39e7ad5
)

'''''


16. Blender 4.0: Python API¶

Blender 4.0: Python API
¶
Breaking changes
¶
Asset System
¶
context.asset_file_handle
is removed. Use
context.asset
instead.
Note that it returns a
AssetRepresentation
, not a
FileSelectEntry
, but should provide access to the same
  information. When not (e.g. because an asset's preview icon-ID is
  needed),
context.active_file
may be available instead.
  (
f6a6b27ac1
### Commit Summary: Assets: Expose asset representation in context RNA/BPY · f6a6b27ac1 - blender - Blender Projects
### Commit Details:
Makes the asset representation type available in RNA/BPY context
whenever the asset handle type is, so that it can be used instead. See
d04cd3f3e6
. With this change we can now replace virtually all usages of
the asset handle type in Python with the asset representation. (Only for
the asset view template we require a collection property taking asset
handles still, for internal reasons.)

Idea is now to first get rid of all usages of asset handle in Python,
so that there's almost no need for further compatibility breaking
changes (unsure if the asset view template can be removed for 4.0
already though). Internal hacks related to it can be removed at any time
still.

Part of
#102877
and
#108806
.
-------
)
context.selected_asset_files
is removed, use
context.selected_assets
instead. The same note as for
context.asset_file_handle
applies.
FileSelectEntry
:
.id_type
was removed. For assets, use
AssetRepresentation.id_type
instead.
  (
d973cc7992
### Commit Summary: Assets/BPY: Remove unnecessary asset handle related RNA members · d973cc7992 - blender - Blender Projects
### Commit Details:
The asset handle type is supposed to be replaced by the asset
representation type. It is designed for the asset system as opposed to
the file browser backend. With
d421ebac5e
,
d04cd3f3e6
and
f6a6b27ac1
, it
can now do everything that is needed in Python to be a replacement.
591a1ae323
removed all usages of these members in the asset handle and
the file entry wrapped by the asset handle. All this should now be
accessed via the `bpy.types.AssetRepresentation` type instead, which is
available everywhere the `AssetHandle` type was available before.

Part of
#102877
and
#108806
.
-------
)
.local_id
was removed. For assets, use
AssetRepresentation.local_id
instead.
  (
d973cc7992
### Commit Summary: Assets/BPY: Remove unnecessary asset handle related RNA members · d973cc7992 - blender - Blender Projects
### Commit Details:
The asset handle type is supposed to be replaced by the asset
representation type. It is designed for the asset system as opposed to
the file browser backend. With
d421ebac5e
,
d04cd3f3e6
and
f6a6b27ac1
, it
can now do everything that is needed in Python to be a replacement.
591a1ae323
removed all usages of these members in the asset handle and
the file entry wrapped by the asset handle. All this should now be
accessed via the `bpy.types.AssetRepresentation` type instead, which is
available everywhere the `AssetHandle` type was available before.

Part of
#102877
and
#108806
.
-------
)
AssetHandle
:
get_full_library_path()
was removed. Use
AssetRepresentation.full_library_path
instead.
  (
d973cc7992
### Commit Summary: Assets/BPY: Remove unnecessary asset handle related RNA members · d973cc7992 - blender - Blender Projects
### Commit Details:
The asset handle type is supposed to be replaced by the asset
representation type. It is designed for the asset system as opposed to
the file browser backend. With
d421ebac5e
,
d04cd3f3e6
and
f6a6b27ac1
, it
can now do everything that is needed in Python to be a replacement.
591a1ae323
removed all usages of these members in the asset handle and
the file entry wrapped by the asset handle. All this should now be
accessed via the `bpy.types.AssetRepresentation` type instead, which is
available everywhere the `AssetHandle` type was available before.

Part of
#102877
and
#108806
.
-------
)
local_id
was removed. Use
AssetRepresentation.local_id
instead.
  (
d973cc7992
### Commit Summary: Assets/BPY: Remove unnecessary asset handle related RNA members · d973cc7992 - blender - Blender Projects
### Commit Details:
The asset handle type is supposed to be replaced by the asset
representation type. It is designed for the asset system as opposed to
the file browser backend. With
d421ebac5e
,
d04cd3f3e6
and
f6a6b27ac1
, it
can now do everything that is needed in Python to be a replacement.
591a1ae323
removed all usages of these members in the asset handle and
the file entry wrapped by the asset handle. All this should now be
accessed via the `bpy.types.AssetRepresentation` type instead, which is
available everywhere the `AssetHandle` type was available before.

Part of
#102877
and
#108806
.
-------
)
Occurrences of the name
asset_library_ref
were replaced by
asset_library_reference
throughout the API
  (
974d70918b
### Commit Summary: RNA/BPY: Replace `asset_library_ref` with `asset_library_reference` · 974d70918b - blender - Blender Projects
### Commit Details:
This is a compatibility breaking change to rename all usages of the name
`asset_library_ref` with `asset_library_reference`. Brecht recently
suggested that such abbreviations should be avoided in public API names.
-------
).
FileAssetSelectParams.import_type
was renamed to
FileAssetSelectParams.import_method
(
ca2a8be15f
### Commit Summary: Assets: Rename "Import Type" to "Import Method" in code/BPY · ca2a8be15f - blender - Blender Projects
### Commit Details:
It was already called that way in the UI, since it's referring to a
behavior, not a type. Update the code to match that. Note that this is
a BPY compatibility breaking change for 4.0.
-------
).
Note:
AssetHandle
should now only be used to provide a collection
custom property for
UILayout.template_asset_view()
.
Window Manager
¶
Operator.bl_property
no longer defaults to "type"
  (
7bc34283ea
### Commit Summary: PyAPI: Operator.bl_property no longer defaults to "type" · 7bc34283ea - blender - Blender Projects
### Commit Details:
This hard-coded assumption meant that operators would behave as if
bl_property = "type" was assigned in the operator - when the variable
wasn't found.

Remove the hard coded name. Operators that depended on this now need
to assign bl_property = "type" in the operator class explicitly.

Remove this because it wasn't documented as means operator behavior
could change unexpectedly when renaming a property.
-------
)
Mesh
¶
The mesh format changes
from previous
  versions
are now included in the Blender file format, reducing overhead when
  saving files and decreasing file sizes
  (
1b63a290c6
### Commit Summary: Core: Write mesh and movieclip with new format · 1b63a290c6 - blender - Blender Projects
### Commit Details:
Finish the transition from
#95966
and
fe38715600
by
writing files with the new format for meshes and some movie clip fields.
This removes overhead when saving files, and makes meshes saved in
files smaller (a file with a 1 million face grid changed from 32 to 28 MB).

3.6 can still read files saved with this format, but older versions will
crash. Older files are automatically converted by versioning code when
opened.

This also allows removing all the code that converts from the new
format to the legacy format, previously used when saving files.

#108015
-------
).
Blender 3.6 can read files from 4.0, but earlier versions cannot.
Blender 3.6 can be used to save files from 4.0 in a format that is
  compatible with older versions.
Face Maps have been removed, with their values converted automatically
  to an integer attribute
  (
46cf093270
### Commit Summary: Mesh: Remove face map list, convert to integer attribute · 46cf093270 - blender - Blender Projects
### Commit Details:
Face maps were added as a prototype of a new rigging solution during
2.8 development. Their storage is redundant with the newer generic
attribute system (specifically with integer face attributes), and
they were never used much. This commit removes the face map list
and converts the storage to an attribute with the name `face_maps`.
There is nowhere to store the face map names anymore, so those
are not kept.

It probably still makes sense to have a feature like mesh face gizmo
selection for rigging. But the design and implementation woulds likely
have to change significantly, including possibly changing the storage
type, and making use of the generic attribute system instead of a
special type.

See
#105317
for more discussion.
-------
).
Bevel weights have been moved to generic attributes with the names
bevel_weight_vert
and
bevel_weight_edge
(
2a56403cb0
### Commit Summary: Mesh: Move bevel weight to generic attribute · 2a56403cb0 - blender - Blender Projects
### Commit Details:
Store bevel weights in two new named float attributes:
- `bevel_weight_vert`
- `bevel_weight_edge`

These attributes are naming conventions. Blender doesn't enforce
their data type or domain at all, but some editing features and
modifiers use the hard-coded name. Eventually those tools should
become more generic, but this is a simple change to allow more
flexibility in the meantime.

The largest user-visible changes are that the attributes populate the
attribute list, and are propagated by geometry nodes. The method of
removing this data is now the attribute list as well.

This is a breaking change. Forward compatibility is not preserved, and
the vertex and edge `bevel_weight` properties are removed. Python API
users are expected to use the attribute API to get and set the values.
Fixes
#106949
#108023
-------
).
Existing access to bevel weights (
MeshEdge.bevel_weight
) has
  been removed in favor of the attribute API.
Forward compatibility is not preserved, though old versions will
  read the new generic attribute.
Vertex and edge crease have been moved to generic attributes as well,
  with the names
crease_vert
and
crease_edge
(
e5ec04d73c
### Commit Summary: Mesh: Move vertex/edge crease to generic attributes · e5ec04d73c - blender - Blender Projects
### Commit Details:
Store subdivision surface creases in two new named float attributes:
- `crease_vert`
- `crease_edge`
This is similar to
2a56403cb0
.

The attributes are naming conventions, so their data type and domain
aren't enforced, and may be interpolated when necessary. Editing tools
and the subdivision surface modifier use the hard-coded name. It might
be best if these were edited as generic attributes in the future, but
in the meantime using generic attributes helps.

The attributes are visible in the list, which is how they're now meant
to be removed. They are now interchangeable with any tool that works
with the generic attribute system-- even tools like vertex paint can
affect creases now.

This is a breaking change. Forward compatibility isn't preserved for
versions before 3.6, and the `crease` property in RNA is removed in
favor of making a smaller API surface area with just the attribute API.
`Mesh.vertex_creases` and `Mesh.edge_creases` now just return the
matching attribute if possible, and are now implemented in Python.
New functions `*ensure` and `*remove` also replace the operators to
add and remove the layers for Python.

A few extrude node test files have to be updated because of different
(now generic) attribute interpolation behavior.

#108089
-------
).
The
MeshEdge.crease
property has been removed.
The mesh properties
vertex_creases
and
edge_creases
now
  return attributes directly.
New functions
{vertex/edge}_creases_ensure
and
{vertex/edge}_creases_remove
create and remove the attributes
  with the proper domain and type.
The
sculpt_vertex_colors
API has been removed, replaced by
mesh.color_attributes
(
6805657a39
### Commit Summary: Mesh: Remove sculpt vertex colors from RNA API · 6805657a39 - blender - Blender Projects
### Commit Details:
Added in
f7bbc7cdbb
, these were never exposed in an
official release, and were eventually replaced by the attribute system.

Ref
#100153
-------
).
Other mesh custom data functions redundant with the attribute API have
  been removed:
vertex_layers_float
,
vertex_layers_int
,
vertex_layers_string
,
polygon_layers_float
,
polygon_layers_int
,
polygon_layers_string
(
d41021a7d4
### Commit Summary: Mesh: Remove deprecated face/vert custom data API · d41021a7d4 - blender - Blender Projects
### Commit Details:
Remove six collection properties from Mesh that are redundant
with the attribute API which has a nicer API and more features.
- `vertex_layers_float`
- `vertex_layers_int`
- `vertex_layers_string`
- `polygon_layers_float`
- `polygon_layers_int`
- `polygon_layers_string`
-------
).
Mesh.calc_normals
is no longer needed and has been removed
  (
ab5fc46872
### Commit Summary: PyAPI: remove deprecated Mesh.calc_normals · ab5fc46872 - blender - Blender Projects
### Commit Details:
No details found
-------
).
bmesh_from_object
and
BVHTree
FromObject
now require an
  evaluated dependency graph to retrieve the final mesh
  (
e64b3c8212
### Commit Summary: Refactor: Remove pre-2.8 function to reevaluate a single object · e64b3c8212 - blender - Blender Projects
### Commit Details:
This function replaced the evaluated mesh with a new one with the given
custom data type mask. That doesn't work in general anymore for a few
reasons: the increased dependence on named attributes (a opposed to
custom data types), and the "all or nothing" approach to reevaluating
the depsgraph. Other objects might depend on the object's evaluated
geometry, so it shouldn't just be replaced. Pushed a bit further, this could
give nice simplifications to mesh modifier evaluation.

There are two breaking changes, `bmesh_from_object` and BVH tree
`FromObject` require the source object to have a proper evaluated
mesh now.

If this causes a regression, it's likely that the object is missing
an update tag when a mode is entered that requires extra evaluated data.

#106186
-------
).
A deprecated argument has been removed from the
split_faces
function
  (
efbcfd8703
### Commit Summary: Mesh: Remove deprecated argumen to split_faces API function · efbcfd8703 - blender - Blender Projects
### Commit Details:
See
75ad8da1ea
-------
).
Curves
¶
The
curves.select_end
operator is now named
curves.select_ends
. It has a
amount_start
and
amount_end
property to select points from both the front and back.
Nodes
¶
The unused
width_hidden
property has been removed
  (
30a20b4def
### Commit Summary: Nodes: Remove deprecated useless width_hidden property · 30a20b4def - blender - Blender Projects
### Commit Details:
See
7b82d8f029
-------
).
NodeItem
and
NodeCategory
definitions have been removed for
  shader and compositor nodes
  (
15f5dfd45d
### Commit Summary: Nodes: Remove unused shader and compositor NodeItem definitions · 15f5dfd45d - blender - Blender Projects
### Commit Details:
Unused after:
-
577c0b4b46
-
9db4c0ca4b
See the geometry nodes commit for more background:
-
837144b457
-------
).
The add menus can be extended the
standard
  way
from the Python API, with the ID names
NODE_MT_shader_node_add_all
and
NODE_MT_compositor_node_add_all
.
node.inputs[xxx]
and
node.outputs[xxx]
take socket
  identifiers and availability status into account
  (
e4ad58114b
### Commit Summary: Nodes: support looking up node sockets by identifier and name · e4ad58114b - blender - Blender Projects
### Commit Details:
The main goal of this patch is to turn `node.inputs[...]` and `node.outputs[...]` into
the main way to lookup sockets on a node. Currently, it's used for that sometimes,
but often it is not, because it does not work in all cases. More specifically, it does
 not work when a node has multiple sockets with the same name but different
identifiers, which is relatively common.

This patch proposes to make the string lookup more convenient, more useful and
less prone to breaking after changes in Blender.

This is achieved by changing how the lookup works:
* First, it tries to find an available socket with an identifier that matches the given
  key. This is checked first, it makes sure that every socket can be accessed by its
  identifier. The identifier matching is currently disabled in some nodes where we
  want to change identifiers soonish.
* If that didn't work, it tries to find an available socket with a matching name. This
  is often convenient because it generally matches what can be seen in the UI.
  Furthermore, it's also necessary to avoid breakage with old usages of this lookup
  function.
* If both options above didn't work, it checks whether the given key matches any
  socket name/identifier that the node used to have in the past, but has been
  renamed for whatever reason. This mainly exists to avoid breaking scripts by certain
  kinds of changes in the future. This is not included in this patch.

Note, previously, string lookup would also find unavailable sockets. This is disabled
now, because the way we handle unavailable sockets internally is likely to change.
Therefor, any use of unavailable sockets might break (unavailable != hidden). For
the time being, it's still possible to find unavailable sockets by iterating over all sockets.

This change has a small chance to break existing scripts because the behavior
changes for some inputs in some nodes. However, for the cases where the function
is used in practice, I don't really expect any breakage.

This patch also allows us to give a better answer to reports like
#113106
.

#113984
-------
).
Shader Nodes
¶
The Glossy BSDF and Anisotropic BSDF nodes have been merged
  (
8cde7d8f8a
### Commit Summary: Cycles: Merge Anisotropic BSDF node into Glossy BSDF node · 8cde7d8f8a - blender - Blender Projects
### Commit Details:
Used to be
https://archive.blender.org/developer/D17123
.

Internally these are already using the same code path anyways, there's no point in maintaining two distinct nodes.

The obvious approach would be to add Anisotropy controls to the Glossy BSDF node and remove the Anisotropic BSDF node. However, that would break forward compability, since older Blender versions don't know how to handle the Anisotropy input on the Glossy BSDF node.

Therefore, this commit technically removes the Glossy BSDF node, uses versioning to replace them with an Anisotropic BSDF node, and renames that node to "Glossy BSDF".

That way, when you open a new file in an older version, all the nodes show up as Anisotropic BSDF nodes and render correctly.

This is a bit ugly internally since we need to preserve the old `idname` which now no longer matches the UI name, but that's not too bad.

Also removes the "Sharp" distribution option and replaces it with GGX, sets Roughness to zero and disconnects any input to the Roughness socket.

#104445
-------
).
  In the Python API, the resulting node is referred to as
ShaderNodeBsdfAnisotropic
. When creating nodes,
ShaderNodeBsdfGlossy
is still accepted as an alias, but it will
  result in a
ShaderNodeBsdfAnisotropic
being created. Add-ons and
  scripts should replace usage of
ShaderNodeBsdfGlossy
with
ShaderNodeBsdfAnisotropic
, which will also work with previous
  versions all the way to pre-2.80.
The
Principled BSDF node has been
  revamped
and now aligns more closely to Standard Surface and OpenPBR. Various
  sockets were renamed:
Subsurface
->
Subsurface Weight
Subsurface Color
removed, use
Base Color
instead
Specular
->
Specular IOR Level
Specular Tint
changed from float to color
Transmission
->
Transmission Weight
Coat
->
Coat Weight
Sheen
->
Sheen Weight
Emission
->
Emission Color
Lights
¶
Light
properties for falloff, attenuation and shadow buffers were
  removed. These were not used by Cycles or EEVEE.
  (
57d85b32a9
### Commit Summary: Lights: remove unused Blender Internal properties · 57d85b32a9 - blender - Blender Projects
### Commit Details:
For falloff, attenuation and shadow buffers.

#109738
-------
)
Particle System
¶
ParticleSystem.child_nbr
has been renamed to
child_percent
e82ca9b5ff
### Commit Summary: Cleanup: rename ParticleSettings.child_nbr to child_percent · e82ca9b5ff - blender - Blender Projects
### Commit Details:
The old name was only kept to avoid breaking compatibility.
-------
.
Blender Application (
bpy.app
)
¶
Remove deprecated
bpy.app.version_char
(
345fc2b1f6
### Commit Summary: PyAPI: remove deprecated bpy.app.version_char · 345fc2b1f6 - blender - Blender Projects
### Commit Details:
No details found
-------
)
Blender Operators (
bpy.ops
)
¶
Remove the context override argument to
bpy.ops
in favor of
context.temp_override(..)
(
ac263a9bce
### Commit Summary: PyAPI: remove context override argument from bpy.ops · ac263a9bce - blender - Blender Projects
### Commit Details:
Remove deprecated context override argument to operator execution and
poll() method in favor of context.temp_override().
-------
)
Font Module (
blf
)
¶
blf.size()
dpi
argument has been removed
  (
9357f7b606
### Commit Summary: PyAPI: remove deprecated blf.size() dpi argument · 9357f7b606 - blender - Blender Projects
### Commit Details:
Scripts can be updated by scaling the font size, e.g.

blf.size(id, size, dpi) -> blf.size(id, size * (dpi / 72.0))
-------
).
GPU Module (
gpu
)
¶
- Remove deprecated 2D_ / 3D_ prefix for built-in shader names
(
9a8fd2f1dd
### Commit Summary: PyAPI: remove deprecated 2D_/3D_ prefix for built-in shader names · 9a8fd2f1dd - blender - Blender Projects
### Commit Details:
Names passed to gpu.shader.from_builtin()
no longer skip the 2D_/3D_ prefix.
-------
).
Animation
¶
FCurve.update()
now also deduplicates the F-Curve's keys
  (
6452eccc80
### Commit Summary: #107126: Make FCurve.update() also deduplicate keys · 6452eccc80 - blender - Blender Projects
### Commit Details:
The RNA function `FCurve.update()` now also deduplicates keys. This is done
in a way that is independent of key selection; simply the last key in the
list of keyframes 'wins' and overwrites earlier ones. It is exactly the
same as `FCurve.keyframe_points.deduplicate()`.
-------
).
Action.frame_range
now accurately reports zero-length frame ranges
  (
49eab72141
### Commit Summary: Fix #107030: return accurate action frame ranges from the Python API · 49eab72141 - blender - Blender Projects
### Commit Details:
This changes the `action.frame_range` Python API to return an accurate
frame range for actions.  Specifically, it was previously special-cased
to return a range with length 1 whenever the length was actually 0.  This
led to a bizarre situation where a real frame range of `[0.0, 0.2]` would
return that range as-is, but a real frame range of `[0.0, 0.0]` would
instead return a range of `[0.0, 1.0]`.

The new behavior simply always returns the real frame range.

The reason for the previous behavior was obscure: the relevant code was
also used internally in Blender's NLA system, and returning a zero-length
range could result in NLA strips getting infinite scale.  The code is now
separated out appropriately so that the NLA system still gets the
non-zero-length range, while the Python API for actions returns the real
range.

#112709
-------
).
  Previously, it was special-cased to construct and report a
  1-frame-length range if and only if the action was exactly zero length
  (not e.g. 0.001 length). This was confusing and easily misinterpreted
  as being a minimum 1-frame-length range or as being an
  exclusive-on-the-right range, neither of which have ever been the
  case. The new behavior simply reports the actual frame range as-is in
  all cases.
The parameters of
anim_utils.bake_action()
have been combined into a
dataclass
anim_utils.BakeOptions
(
5024c0ef97
### Commit Summary: Refactor: Move NLA anim bake paremeters into dataclass · 5024c0ef97 - blender - Blender Projects
### Commit Details:
The `bake_action` (and subsequent methods) for NLA action baking have a long parameter lists. Refactoring to move the bake options into a data class.

#112865
-------
). Contrary to the default values of the
  parameters in Blender 4.0, where some were
True
and others were
False
, in this dataclass there
  are no defaults, and thus all values need to be specified. This helps in local understandability,
  as there is no need to know which options are there but left out, so using their defaults.
Armatures
¶
Layers and bone groups have been removed with all associated
  properties and methods. Bone collections have been added instead.
  (
998136f7a7
### Commit Summary: Anim: replace Bone Groups & Armature Layers with Bone Collections · 998136f7a7 - blender - Blender Projects
### Commit Details:
Armature layers (the 32 little dots) and bone groups are replaced with
Bone Collections:

- Bone collections are stored on the armature, and have a name that is
  unique within that armature.
- An armature can have an arbitrary number of bone collections (instead
  of the fixed 32 layers).
- Bones can be assigned to zero or more bone collections.
- Bone collections have a visibility setting, just like objects in scene
  collections.
- When a bone is in at least one collection, and all its collections in
  are hidden, the bone is hidden. In other cases (in any visible
  collection, or in no collection at all), the bone visibility is
  determined by its own 'hidden' flag.
- For now, bone collections cannot be nested; they are a flat list just
  like bone groups were. Nestability of bone collections is intended to
  be implemented in a later 4.x release.
- Since bone collections are defined on the armature, they can be used
  from both pose mode and edit mode.

Versioning converts bone groups and armature layers to new bone
collections. Layers that do not contain any bones are skipped. The old
data structures remain in DNA and are unaltered, for limited forward
compatibility. That way at least a save with Blender 4.0 will not
immediately erase the bone group and armature layers and their bone
assignments.

Shortcuts:

- M/Shift+M in pose/edit mode: move to collection (M) and add to
  collection (shift+M). This works similar to the M/Shift+M menus for
  objects & scene collections.
- Ctrl+G in pose mode shows a port of the old 'bone groups' menu. This
  is likely to be removed in the near future, as the functionality
  overlaps with the M/Shift+M menus.

This is the first commit of a series; the bone collections feature will
be improved before the Blender 4.0 release. See
#108941
for more info.

Pull request:
#109976
-------
and many subsequent commits). See
Bone Collections & Colors:
  Upgrading
for an overview of how to change Python code to the new API.
Now
edit_bones.new()
behaves similar to object creation, and does
  not automatically add the created bone to any collections. To emulate
  the behavior of the add bone operator, manually assign the bone to
arm.collections.active
if it is not None.
  (
ab67d410a9
### Commit Summary: Fix: set bone collection membership properly for new bones · ab67d410a9 - blender - Blender Projects
### Commit Details:
- Extrude and subdivide operators now duplicate the membership from
  the source bone.
- Adding a bone through the edit_bones.new() Python API now leaves
  membership empty.  But adding a new bone through the operator still
  adds it to the active collection.
-------
)
The deprecated
use_inherit_scale
bone property has been removed.
  (
2abd026cfe
### Commit Summary: Anim: remove the deprecated use_inherit_scale bone property. · 2abd026cfe - blender - Blender Projects
### Commit Details:
This boolean property has been replaced with an enum all the way
back in 2019, so it is time to remove it completely. It is purely
an RNA wrapper around the real enum property, so the only thing
this change can break is some python scripts and add-ons.

#112836
-------
)
Node Groups
¶
Node groups API moves from
NodeTree
to
NodeTree.interface
.
Old
New
# Make a socket
tree.inputs.new(name="My Input")
tree.outputs.new(name="My Output")

# Remove a socket
tree.inputs.remove(socket)
tree.outputs.remove(socket)

# Move a socket up or down
tree.inputs.move(from_index=4, to_index=2)

# Iterate over sockets
for socket in tree.inputs:
    ...
for socket in tree.outputs:
    ...
# Make a socket
# Note: socket_type accepts only base socket type names,
# e.g. `NodeSocketFloat` but not `NodeSocketFloatFactor`.
tree.interface.new_socket(name="My Input", in_out='INPUT')
tree.interface.new_socket(name="My Output", in_out='OUTPUT')
# Make node panel
tree.interface.new_panel(name="My Panel")

# Copy an existing socket or panel
tree.interface.copy(socket)

# Remove a socket or panel
tree.interface.remove(socket)
tree.interface.remove(panel)

# Move a socket up or down
tree.interface.move(socket, to_index=2)
# Move a socket into a panel
tree.interface.move_to_parent(socket, new_panel, to_index=2)

# Iterate over sockets
for item in tree.interface.items_tree:
    if item.item_type == 'SOCKET':
        if item.in_out == 'INPUT':
            ...
        elif item.in_out == 'OUTPUT':
            ...
# Iterate over panels
for item in tree.interface.items_tree:
    if item.item_type == 'PANEL':
        ...
Modifying items
The previous node group API in some cases allowed modifying
inputs/outputs collections while iterating over them. This was
incidental and generally should be avoided. See
"Gotchas"
for more details
Custom nodes:
NodeSocket.draw_color_simple
callback becomes the
  preferred color function for custom socket types.
It does not take a context or node instance but that is sufficient for
most use cases. The new callback is used in cases where concrete node
instance exists, for example drawing node group interfaces.
Old
New
class MyCustomSocket(NodeSocket):
    def draw_color(self, context, node):
        return (1, 1, 1, 1)
class MyCustomSocket(NodeSocket):
    @classmethod
    def draw_color_simple(cls):
        return (1, 1, 1, 1)
Sequencer
¶
Sequence.speed_factor
was replaced with more complex retiming
  system
  (
86a0d0015a
### Commit Summary: VSE: Improve retiming UI · 86a0d0015a - blender - Blender Projects
### Commit Details:
Currently retiming is quite awkward, when you need to retime multiple
strips strips in sync. It is possible to use meta strips, but this is
still not great. This is resolved by implementing selection.

General changes:
Gizmos are removed, since they are designed to operate only on active
strip and don't support selection.
Transform operator code is implemented for retiming data, which allows
more sophisticated manipulation.
Instead of drawing marker-like symbols, keyframes are drawn to
represent retiming data. Retiming handles are now called keys. To have
consistent names, DNA structures have been renamed.
Retiming data is drawn on strip as overlay.

UI changes:
Retiming tool is removed. To edit retiming data, press Ctrl + R, select
a key and move it. When retiming is edited, retiming menu and
context menu shows more relevant features, like making transitions.
Strip and retiming key selection can not be combined. It is possible to
use box select operator to select keys, if any key is selected.
Otherwise strips are selected.
Adding retiming keys is possible with I shortcut or from menu.
Retiming keys are always drawn at strip left and right boundary. These
keys do not really exist until they are selected. This is to simplify
retiming of strips that are resized. These keys are called "fake keys"
in code.

API changes:
Functions, properties and types related to retiming handles are renamed
to retiming keys:
retiming_handle_add() -> retiming_key_add()
retiming_handle_move() -> retiming_key_move()
retiming_handle_remove() -> retiming_key_remove()
retiming_handles -> retiming_keys
RetimingHandle -> RetimingKey

Retiming editing "mode" is activated by setting `Sequence.show_retiming_keys`.

#109044
-------
).
Import/Export
¶
The Python based OBJ importer/exporter has now been removed. Addons
  using
bpy.ops.import_scene.obj
and
bpy.ops.export_scene.obj
APIs should to switch to
bpy.ops.wm.obj_import
and
bpy.ops.wm.obj_export
The Python based PLY importer/exporter has now been removed. Addons
  using
bpy.ops.import_mesh.ply
and
bpy.ops.import_mesh.ply
APIs
  should to switch to
bpy.ops.wm.ply_import
and
bpy.ops.wm.ply_export
Misc
¶
Rename
filename
to
filepath
for RNA API calls
  (
efa4179982
### Commit Summary: PyAPI: rename filename to filepath for RNA API functions · efa4179982 - blender - Blender Projects
### Commit Details:
- Depsgraph.debug_relations_graphviz
- Depsgraph.debug_stats_gnuplot
- RenderLayer.load_from_file
- RenderResult.load_from_file
- bpy.app.icons.new_triangles_from_file
-------
).
Depsgraph.debug_relations_graphviz
,
Depsgraph.debug_stats_gnuplot
.
RenderLayer.load_from_file
,
RenderResult.load_from_file
.
bpy.app.icons.new_triangles_from_file
Some built-in color space names were renamed. Forward compatibility
  is preserved via do-versions, but assignment of hard-coded names
  could break
Hydra Render Delegates
¶
Renderer add-ons can now be implemented as
USD
Hydra
render
delegates. We recommend add-on developers to use this, and get involved
in Blender development to add any missing functionality.
(
04bb5f9995
### Commit Summary: Render: support USD Hydra render delegates · 04bb5f9995 - blender - Blender Projects
### Commit Details:
Hydra is a rendering architecture part of USD, designed to abstract the
host application from the renderer. A renderer implementing a Hydra
render delegate can run in any host application supporting Hydra, which
now includes Blender.

For external renderers this means less code to be written, and improved
performance due to a using a C++ API instead of a Python API.

Add-ons need to subclass bpy.types.HydraRenderEngine. See the example in
the Python API docs for details.

An add-on for Hydra Storm will be included as well. This is USD's
rasterizing renderer, used in other applications like usdview. For users
it can provide a preview of USD file export, and for developers it
serves a reference.

There are still limitations and missing features, especially around
materials. The remaining to do items are tracked in
#110765
.

This feature was contributed by AMD.

Ref
#110765
Co-authored-by: Georgiy Markelov
Co-authored-by: Vasyl-Pidhirskyi
Co-authored-by: Brian Savery
Co-authored-by: Brecht Van Lommel
#104712
-------
)
Using Hydra provides two major benefits:
The same Hydra render delegate works across multiple 3D apps, and
  therefore much of the implementation can be shared.
Performance with heavy scenes is much better, because Hydra is a C++
  API instead of Python.
Blender shader nodes can be automatically converted to a
MaterialX
node graph for renderers that
support it. Only a subset of shader nodes are supported currently, see
the
compatibility list
.
The
HydraRenderEngine
API docs
have more for details.
Additions
¶
bpy.context.property
, for property under the mouse cursor
  (
6ba0346797
### Commit Summary: Python API: add bpy.context.property, for property under the mouse cursor · 6ba0346797 - blender - Blender Projects
### Commit Details:
This can be useful for example to add custom operators to the property
context menu.

#107280
-------
).
UILayout.progress(..)
widget type added to display progress from
  scripts
  (
c6adafd8ef
### Commit Summary: UI: add progress indicator variations & RNA API · c6adafd8ef - blender - Blender Projects
### Commit Details:
Add pie and ring styles of progress indicators. Exposes progress bar to
the Python API and adds a "type" property to allow style variation.

This can be used for scripts & add-ons to show progress in the UI.

Ref
!109882
.

Co-authored-by: Campbell Barton
-------
).
PoseBone.bbone_segment_index()
for accessing the internal math
  mapping vertices (their positions) to B-Bone segments that deform them
  (
36c6bcca1a
### Commit Summary: Python API: expose the math mapping vertex positions to B-Bone segments. · 36c6bcca1a - blender - Blender Projects
### Commit Details:
Recently a user expressed interest in exporting baked animation
with B-Bone segments. Currently the python API already exposes
segment matrices via a PoseBone method, but there is no access
to the mapping of vertices to the segments.

Although currently the math is simple and easy to re-implement,
forcing Python add-ons to do that would cause a maintenance issue
if the mapping is ever changed later (it's quite dumb, ignoring
the rest pose curve, and there definitely is room for improvement).

This patch extracts the relevant math into a BKE function, and
exposes it in the python API as a new PoseBone method.

#105419
-------
)
Curves.add_curves(..)
for adding new curves to a curves data-block
  (
07f01b5fc2
### Commit Summary: Curves: Add RNA API to add points · 07f01b5fc2 - blender - Blender Projects
### Commit Details:
Add a simple function for adding curves to a `Curves` data-block.
The only argument is a list of the number of points in each added
curves. Attribute data is meant to be filled in separately.

It can be used like this: `curves.add_curves([8, 8, 16])`, which will
add two curves with 8 points, and one with 16 points. This API is
chosen in order to make the API generic, and to push users to
add more curves at once, rather than appending a single curve
at a time, which would be slower.

#112400
-------
).

'''''


17. Blender 4.0: Asset Bundles¶

Blender 4.0: Asset Bundles
¶
Human Base Meshes
¶
The Human Base Meshes bundle got an update with new models, improved
topology, and various fixes. Download it from the
Demo Files
page
.
New Assets
¶
Planar Head
For reference or as a sculpting base
Generic base topology for flexible deformation
Generic Head Topology
Generic base topology for flexible deformation and
  sculpting/modeling base
Includes various shape keys for various example head shapes
Various Primitive Assets
For quick start into new character design sculpts
Stylized and realistic assets
Body and head assets
Separated into multiple objects with parenting for fast
  non-destructive object posing
Linked object data between left and right side objects.
Includes subdiv modifier
Replaced Realistic Male Body
Based on scan data for increased realism
Fixes
¶
Tooltips now are now added via the asset description
Improved eye scale on realistic assets
Various small fixes and improvements to existing assets

'''''

