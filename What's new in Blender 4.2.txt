This work is licensed under the GNU General Public License v3.0 or later (GPL).
For more information, see https://www.gnu.org/licenses/gpl-3.0.html.


What's new in Blender 4.2

'''''

Blender 4.2 Table Of Contents

Section 1. Blender 4.2 LTS: Animation & Rigging¶
Section 2. Blender 4.2 LTS: Color Management¶
Section 3. Blender 4.2 LTS: Compositor¶
Section 4. Blender 4.2 LTS: Core¶
Section 5. Blender 4.2 LTS: Cycles¶
Section 6. Blender 4.2 LTS: EEVEE¶
Section 7. EEVEE migration from older versions to Blender 4.2 LTS¶
Section 8. Blender 4.2 LTS: Extensions¶
Section 9. Blender 4.2 LTS: Geometry Nodes¶
Section 10. Blender 4.2 LTS: Import & Export¶
Section 11. Blender 4.2 LTS: Modeling & UV¶
Section 12. Blender 4.2 LTS: Physics¶
Section 13. Blender 4.2 LTS: Python API¶
Section 14. Blender 4.2 LTS: Sculpt, Paint, Texture¶
Section 15. Blender 4.2 LTS: User Interface¶
Section 16. Blender 4.2 LTS: Sequencer¶

'''''

1. Blender 4.2 LTS: Animation & Rigging¶

Blender 4.2 LTS: Animation & Rigging
¶
Motion Paths
¶
Motion Path points now use the Vertex theme color (
fc025abde6
### Commit Summary: Anim: Use Theme for Motion Path points · fc025abde6 - blender - Blender Projects
### Commit Details:
This PR changes the motion path appearance by using the
`Vertex` color as defined in the 3D viewport theme settings
instead of hardcoding it to white.

The issue with setting it to white is that it is too visually distracting,
overshadowing the points that are keyframes, which are drawn in
the selection color for vertices (also defined in the Theme)

#119382
-------
).
You can now specify a custom color for anything before or after the current frame. Previously this was a single color (
883af6dd63
### Commit Summary: Anim: Add custom pre and post frame color to motion path · 883af6dd63 - blender - Blender Projects
### Commit Details:
This PR adds an option to specify custom colors for a
motion path. One for frames before the current frame
and one frame for after. With this it is easier to see
the relation of the motion path to the current frame.
That was already the case with the default colors, but
not with custom colors.

On a technical side note, the colors pre and post the current
frame were already different.
The shader multiplied the custom color by 0.25
for anything pre current frame.

#119375
-------
).
Animation Editors
¶
New operator in the View (regular + pie) menu: "Frame Scene Range" (
95966813ae
### Commit Summary: Anim: add 'Frame Scene/Preview Range' to animation editors · 95966813ae - blender - Blender Projects
### Commit Details:
blah

Add a new operator 'Frame Scene Range' to the Dope Sheet, Graph Editor,
NLA, and VSE 'view' menus. It is added both to the regular menu and the
pie menu (by default on the ` hotkey).

The operator will only change the horizontal view, to show the scene
range or the preview range, depending on whether the preview range is
active or not.

The label of the operator switches between "Frame Scene Range" and
"Frame Preview Range" to indicate what will happen.

For the VSE this operator is quite similar to the 'Frame All', as that
by default also frames the scene range. There are a few notable
differences though:

- Frame All includes any strip that extends beyond the scene end frame.
- Frame All ignores the preview range.

#122311
-------
).
  This changes the horizontal view to match the scene range. If the
preview range
### Commit Summary: Timeline - Blender 4.2 Manual
### Commit Details:
Timeline
#
The
Timeline
editor is used to jump to different frames, manipulate keyframes,
and control animation playback.
The Timeline.
#
Main View
#
The X axis represents time, with the numbers 0/50/100/… being frame numbers.
The blue line is the
Playhead
indicating the current frame,
and the diamond shapes are
Keyframes
, points where you specified
a certain value for a certain property at a certain time.
Adjusting the View
#
Panning is done by dragging
MMB
.
Zooming is done by dragging
Ctrl
-
MMB
, rolling the mouse
Wheel
,
or pressing
NumpadMinus
/
NumpadPlus
.
You can also use the scrollbars located at the bottom and the right of the editor.
Playhead
#
Playhead.
#
The
Playhead
is the blue vertical line showing the current frame number.
It can be moved to a new position by clicking or
dragging
LMB
in the scrubbing area at the top.
You can also move it in single-frame increments by pressing
Left
or
Right
,
or jump to the beginning or end frame by pressing
Shift
-
Left
or
Shift
-
Right
.
Frame Range
#
The
Frame Range
determines the length of the scene’s animation.
By default, it’s set to start at frame 1 and end at frame 250.
You can change this using the Start/End inputs in the Timeline header,
or in the
Output Properties
.
Keyframes
#
By default, the timeline only shows keyframes for selected items.
You can make it show all keyframes by unchecking
View ‣ Only Show Selected
.
You can click a keyframe to select it (and deselect all others),
or click it while holding
Shift
to add it to the selection
(or remove it if it was already selected). You can also drag a box
to select multiple keyframes in one go.
To move the selected keyframes, simply drag one of them. Alternatively,
you can press
G
, move the mouse, and click
LMB
to confirm
(or
RMB
to cancel). You can also press
S
to scale the keyframes
in relation to the Playhead.
Markers
#
See the
Markers page
for more information.
Header
#
Popovers for Playback and Keying; transport controls; and frame controls
#
Popovers
#
Playback Popover
#
Sync
3D Viewport red FPS.
#
If animation playback can’t keep up with the desired
Frame Rate
,
the actual frame rate (shown in the top left corner of the 3D Viewport) will turn red,
and the
Sync
option determines how the situation should be handled.
Play Every Frame
Play every frame, even if this results in the animation playing slower than intended.
Frame Dropping
Drop frames if playback becomes slower than the scene’s frame rate.
Sync to Audio
Drop frames if playback becomes too slow to remain synced with audio.
Audio
Scrubbing
Play bits of the sound in the animation (if there is any) while you drag the Playhead around.
Play Audio
Uncheck to mute all sound.
Playback
Limit to Frame Range
Don’t allow moving the Playhead outside of the Frame Range using the mouse.
Follow Current Frame
Automatically pan the view to catch up when the Playhead goes off screen.
Play In
Which editors to update on each animation frame. If an editor is unchecked,
it’ll only be updated once playback stops (with some exceptions where it’ll
update on each frame anyway). When starting playback in either the
Graph Editor
,
Dope Sheet
or the
NLA Editor
,
all editors will play back regardless of the settings.
This is a feature requested by animators to easily play back all views.
Show
Subframes
Display and allow changing the current scene subframe.
Set Start/End Frame
Set the scene’s start/end frame to the current frame.
If the Preview Range is active (see
Frame Controls
), that one is changed instead.
Keying Popover
#
The
Keying
popover contains options that affect keyframe insertion.
Active Keying Set
Timeline Keying Sets.
#
A
Keying Set
is a named collection of animatable properties. If you select
one and then press
I
while not hovering over any input field,
Blender will create keyframes for the properties in that keying set.
If you don’t have a keying set selected, you’ll get keyframes on a default
set of properties instead (e.g. Location/Rotation/Scale for objects).
There are a number of predefined keying sets, but you can also create your own
in the
Keying Sets
panel.
Insert Keyframes (plus icon)
I
Insert keyframes on the current frame.
Delete Keyframes (cross icon)
Alt
-
I
Delete keyframes on the current frame.
New Keyframe Type
The
keyframe type
for newly created keyframes.
Cycle-Aware Keying
When inserting keyframes into
trivially cyclic curves
,
special handling is applied to preserve the cycle integrity (most useful while tweaking an established cycle):
If a key insertion is attempted outside of the main time range of the cycle,
it is remapped back inside the range.
When overwriting one of the end keys, the other one is updated accordingly.
In addition, when adding a new curve into an action with a
Manual Frame Range
and
Cyclic Animation
enabled, the curve is automatically made cyclic with the period matching the frame range.
For convenience, this check and conversion is also done before adding the second keyframe to such a curve.
Auto Keying
#
Auto Keying button.
#
When the record button (⏺) is enabled, Blender will automatically create keyframes on the current
frame whenever you transform an object or bone in the 3D Viewport (or change one of its transform properties
in the
Properties Editor
).
One special use case is to record a camera path as you fly through the scene.
See
Fly/Walk Navigation
.
Note
Auto Keying only works for transform properties (Location, Rotation, Scale).
It won’t create a keyframe if you change, say, the color of a material –
you still have to do that manually.
Mode
Add & Replace
Add or replace keyframes as needed.
Replace
Only replace existing keyframes.
Only Active Keying Set
By default, Auto Keying will create keyframes even for properties that are not in the
active keying set
. Use this checkbox to change that.
Layered Recording
Adds a new
NLA Track
for every pass made over the animation
to allow non-destructive tweaking.
Menus
#
View Menu
#
Adjust Last Operation
Displays a pop-up panel to alter properties of the last
completed operation. See
Adjust Last Operation
.
Channels
Show or hide the Channels region (the tree of objects and animatable properties on the left).
Frame All
Home
Pans and zooms the view so that all keyframes are visible.
Frame Scene/Preview Range
Reset the horizontal view to the current scene frame range,
taking the preview range into account if it is active.
Go to Current Frame
Numpad0
Centers the Timeline to the Playhead.
Show Markers
Shows the Markers region (if any markers are defined).
When disabled, the
Marker Menu
is also hidden and marker operators are not
available in this editor.
Show Seconds
Ctrl
-
T
Shows the time on the X axis and the
Playhead
as timestamps instead of frame numbers.
A timestamp such as
01:03+02
means “1 minute, 3 seconds, 2 frames.”
Sync Visible Range
Synchronizes the horizontal panning and scale of the editor
with other time-based editors that also have this option enabled.
That way, they always show the same section of time.
Only Show Selected
Only show keyframes related to the selected items.
This could be objects, bones, nodes, and so on.
Only Show Errors
Only show curves and drivers that are disabled or have errors.
Useful for debugging.
Cache
Show Cache
Which simulation caches to show on the timeline.
Baked simulations will be shown as fully opaque, cached simulations will be slightly transparent,
and invalid caches will be slightly transparent with dark diagonal stripes.
Timeline Cache.
#
Area
Area controls. See the
user interface
documentation for more information.
Marker Menu
#
Markers
are used to denote frames with key points or significant events
within an animation. Like in most animation editors, they’re shown at the bottom of the Timeline.
Markers in an animation editor.
#
For descriptions of the different marker tools, see
Editing Markers
.
Transport Controls
#
These buttons are used to set the current frame and control playback.
Transport controls.
#
Jump to Start (❙⏴)
Shift
-
Left
Sets the Playhead to the start of the frame range.
Jump to Previous Keyframe (◆⏴)
Down
Moves the Playhead to the previous keyframe.
Rewind (◀)
Shift
-
Ctrl
-
Spacebar
Starts playing the animation in reverse.
Play (▶)
Spacebar
Starts playing the animation.
Jump to Next Keyframe (⏵◆)
Up
Moves the Playhead to the next keyframe.
Jump to End (⏵❙)
Shift
-
Right
Sets the Playhead to the end of the frame range.
Pause (⏸)
Spacebar
Stops playing the animation.
Frame Controls
#
Current Frame
Alt
-
Wheel
The number of the frame that’s currently being displayed in the 3D Viewport.
This is also the location of the Playhead.
Use Preview Range (clock icon)
The Preview Range is an alternative Frame Range that you can use for focusing on a
particular part of the animation. It lets you repeatedly play a short segment without
having to manually rewind or change the frame range of the entire scene.
This range only affects the preview in the 3D Viewport; it doesn’t affect rendering.
The boundaries of the Preview Range are shown in dark orange. You can quickly configure
and enable it by pressing
P
and dragging a box. To disable it,
you can press
Alt
-
P
.
Start/End Frame
The start/end frame of the scene (or the preview range, if active).
-------
is active, the operator will be re-labeled as "Frame Preview Range" and zoom to that instead. This
  was added to the Dope Sheet, Timeline, Graph Editor, NLA Editor, and Video Sequence Editor.
Graph Editor
¶
Modified the way the Ease operator works. It now creates an S-Curve shape that can be moved to
  favor either the left or the right end. In addition to that, a "Sharpness" property was added to
  control how abrupt the change is. Pressing
Tab
while running the operator toggles which property the slider affects. (
62f140e048
### Commit Summary: Anim: Add Sharpness to Ease operator · 62f140e048 - blender - Blender Projects
### Commit Details:
This PR extends the existing `Ease` operator with a sharpness property.

This means it has two parameters:
* Curve Bend: Define which key to favor. At 0 it's exactly between the two keys.
* Sharpness: Higher values make the change more abrupt.

During modal operation it is possible to switch the slider between those two by pressing `TAB`.

#117287
-------
,
Manual
### Commit Summary: Editing - Blender 4.2 Manual
### Commit Details:
Editing
#
Transform
#
Reference
Mode
:
Edit Mode
Menu
:
Key ‣ Transform
An F-Curve can be edited by transforming the locations of its keyframes.
Move, Rotate, Scale
Like other elements in Blender, keyframes can be
moved, rotated, and scaled as described in
Basic Transformations
.
Extend
E
Lets you quickly move the selected keyframes that are on a certain side of the Playhead.
This is handy if you need to, say, move all the keyframes after a certain time point to
the right to make space for new ones.
To use this operator, first select some or all keyframes and place your mouse cursor to
the left or right of the Playhead. Then, press
E
, move the mouse to move (only)
the keyframes on that side of the Playhead, and press
LMB
to confirm
(or
RMB
to cancel).
Tip
You can also change the
Key Frame
and
Value
properties in
Sidebar ‣ F-Curve ‣ Active Keyframe
if you want to specify exact numbers.
While transforming keyframes, you can hold
Shift
to move them more slowly for
better precision, or
Ctrl
to move them in coarse increments.
Snap
#
Reference
Menu
:
Key ‣ Snap
Shortcut
:
Shift
-
S
Apart from using the snapping operators in this menu, you can also turn on
snapping
in the header.
Selection to Current Frame
Set the selected keyframes’ time to the current frame.
Selection to Cursor Value
Set the selected keyframes’ value to that of the
2D Cursor
.
Selection to Nearest Frame
Round the time of each keyframe to the nearest frame.
Selection to Nearest Second
Round the time of each keyframe to the nearest second. You can use
View ‣ Show Seconds
to show seconds instead of frames
at the top of the editor.
Selection to Nearest Marker
Set the time of each keyframe to that of the nearest
marker
.
Flatten Handles
Flatten the
Bézier
handles for the selected keyframes.
Flatten Handles snapping example.
#
Before Flatten Handles.
#
After Flatten Handles.
#
Equalize Handles
Ensure selected keyframes’ handles have equal length.
Side
Which handles to affect (left, right, or both).
Handle Length
Length to make selected keyframes’ Bézier handles.
Flatten
Make the values of the handles the same as their respective keyframes.
Cursor to Selected
Ctrl
-
G
Changes the time and value of the 2D Cursor to the average time and value of the selected keyframes.
Cursor Value to Selection
Changes the value of the 2D Cursor to the average value of the selected keyframes.
Mirror
#
Reference
Menu
:
Key ‣ Mirror
Shortcut
:
Ctrl
-
M
Mirrors the selected keyframes across a reference point.
By Times over Current Frame
Mirror horizontally across the current frame.
By Values over Cursor Value
Mirror vertically across the 2D Cursor’s value.
By Times over Zero Time
Mirror horizontally across frame 0.
By Values over Zero Value
Mirror vertically across value 0.
By Times over First Selected Marker
Mirror horizontally across the first selected marker.
Jump to Selected
#
Reference
Menu
:
Key ‣ Jump to Selected
Shortcut
:
Ctrl
-
G
Places the 2D Cursor at the average time and value of the selected keyframes.
Insert
#
Reference
Menu
:
Key ‣ Insert
Shortcut
:
I
Adds new keyframes and selects them. Previously selected keyframes stay selected too.
All Channels
Insert a keyframe on all visible and editable F-Curves using each curve’s current value.
Only Selected Channels
Insert a keyframe on the selected F-Curves using each curve’s current value.
Only Active F-Curve
Insert a keyframe on the active F-Curve using the curve’s current value.
Active Channels at Cursor
Insert a keyframe on the active F-Curve at the 2D Cursor’s value.
Selected Channels at Cursor
Insert a keyframe on the selected F-Curves at the 2D Cursor’s value.
Copy/Paste
#
Reference
Menu
:
Key ‣ Copy
,
Key ‣ Paste
Shortcut
:
Ctrl
-
C
,
Ctrl
-
V
Use
Ctrl
-
C
to copy the selected keyframes and
Ctrl
-
V
to paste them.
After pasting, the
Adjust Last Operation
panel provides some extra options:
Frame Offset
Offsets the pasted keyframes horizontally so that…
Frame Start
…the first one lands on the current frame.
Frame End
…the last one lands on the current frame.
Frame Relative
…they land at the same distance from the current frame as when they were copied.
No Offset
…they stay at their original frames.
Value Offset
Offsets the pasted keyframes vertically so that…
Left Key
…the first one has the value of the existing keyframe to the left of the Playhead.
Right Key
…the last one has the value of the existing keyframe to the right of the Playhead.
Current Frame Value
…the first one has the value of the curve at the current frame.
Cursor Value
…the first one has the value of the
2D Cursor
.
No Offset
…they keep their original values.
Type
Mix
Integrates the pasted keyframes with existing ones, only overwriting those that share a frame.
Overwrite All
Removes all previous keyframes in the target F-Curves.
Overwrite Range
Within each F-Curve, remove the existing keyframes that are in the range of the keyframes
pasted into it.
Overwrite Entire Range
Within each F-Curve, remove the existing keyframes that are in the range of all pasted
keyframes combined.
Flipped
If you copied keyframes from one or more pairs of
symmetrically opposite bones
,
enabling this option will paste the keyframes of the left bones into the curves of the right ones
and vice versa. In addition, the values are inverted, effectively mirroring the animation.
Duplicate
#
Reference
Menu
:
Key ‣ Duplicate
Shortcut
:
Shift
-
D
Duplicates the selected keyframes. You can reposition them by moving the mouse.
Delete
#
Reference
Menu
:
Key ‣ Delete
Shortcut
:
X
,
Delete
Pressing
X
or
Delete
opens a pop-up menu from where you can delete the selected keyframes.
Handle Type
#
Reference
Menu
:
Key ‣ Handle Type
Shortcut
:
V
Sets the
handle type
of the selected keyframes.
Interpolation Mode
#
Reference
Menu
:
Key ‣ Interpolation Mode
Shortcut
:
T
Sets the
interpolation mode
of the selected keyframes.
This determines the curve interpolation between each keyframe and the next.
Easing Type
#
Reference
Menu
:
Key ‣ Easing Type
Shortcut
:
Ctrl
-
E
Sets the
easing mode
of the selected keyframes.
This determines whether easing is applied to the left side, right side, or both sides of the
curve segments between each keyframe and the next.
Density
#
Decimate
#
Reference
Menu
:
Key ‣ Density ‣ Decimate (Ratio)
Menu
:
Key ‣ Density ‣ Decimate (Allowed Change)
Simplifies an F-Curve by removing the keyframes that influence its shape the least.
Mode
How to pick the number of keyframes to delete.
Ratio
Deletes a certain percentage of keyframes.
Remove
The percentage of keyframes to remove.
Error Margin
Deletes as many keyframes as possible while ensuring the F-Curve’s shape changes
no more than a certain amount.
Max Error Margin
How much the decimated curve may deviate from the original.
Bake Keyframes
#
Reference
Menu
:
Key ‣ Density ‣ Bake Keyframes
Shortcut
:
Shift
-
Alt
-
O
Creates a keyframe at every frame.
See also
Bake Channels
, which offers options on
what range to bake and how.
F-Curve before baking.
#
F-Curve after baking.
#
Clean Keyframes
#
Reference
Menu
:
Key ‣ Density ‣ Clean Keyframes
Shortcut
:
X
Finds redundant keyframes among the selected ones and deletes them. A keyframe is seen as
redundant if it has the same value as its neighbors – even if the curve segments around it
aren’t flat.
Tip
This operator is likely to change the shape of the affected curves, so it’s best run after
e.g. bulk keyframe insertion on all the bones of an armature (which creates useless keyframes
on bones that haven’t moved) and before tweaking the curves by hand.
Threshold
Value threshold. By increasing this, you can also delete keyframes that
almost
have the
same value as their neighbors.
Channels
Cleans all the keyframes (even unselected ones) in the selected F-Curves.
If a curve is left with only one keyframe, it’s deleted entirely.
F-Curve before cleaning.
#
F-Curve after cleaning.
#
Blend
#
Reference
Menu
:
Key ‣ Blend
Shortcut
:
Alt
-
D
Adjusts the values of the selected keyframes by a certain percentage. Select a blending operator,
move the mouse left or right to adjust the factor, and click
LMB
to confirm
(or
RMB
to cancel).
Several blending operators work based on “neighboring keyframes.” This means that they divide the
selected keyframes into contiguous groups, then reference the unselected keyframes immediately
before and after each group.
Breakdown
#
Reference
Menu
:
Key ‣ Blend ‣ Breakdown
Sets the value of the selected keyframes to an interpolation of their neighbors.
Factor
At -1, the keyframes are set to the value of the left neighbor.
At 1, they’re set to the value of the right neighbor.
For other factors, they’re set to an interpolation between the two neighbor values,
with 0 being right in the middle.
Blend to Neighbor
#
Reference
Menu
:
Key ‣ Blend ‣ Blend to Neighbor
Moves each selected keyframe towards the value of the left or right neighbor by a certain percentage.
Blend
When negative, each keyframe moves
Blend
percent to the value of the left neighbor.
When positive, they move to the right neighbor.
When zero, they keep their original values.
Blend to Default Value
#
Reference
Menu
:
Key ‣ Blend ‣ Blend to Default Value
Moves the selected keyframes towards the property’s default value by a certain percentage.
Factor
How much to change the keyframes’ values, going from 0 (no change) to 1 (reset to the default value).
See also
The
Reset to Default
operator resets
any property to its default value without the need of keyframing.
Ease
#
Reference
Menu
:
Key ‣ Blend ‣ Ease
Makes the selected keyframes follow an S-curve. While the slider is visible (so after activating
the operator but before confirming with
LMB
), you can press
Tab
to toggle which
of the following settings to edit:
Curve Bend
A negative value gives more weight to the left side, while a positive value gives more weight
to the right. A value of 0 results in a balanced curve.
Sharpness
A low value results in an almost straight diagonal line, while a high value results in a steep
rise/drop in the curve.
Blend Offset
#
Reference
Menu
:
Key ‣ Blend ‣ Blend Offset
Moves the selected keyframes up or down – all by the same amount – until the first/last one matches
the left/right neighbor.
Offset Factor
At -1, the first selected key gets aligned to its left neighbor.
At 1, the last selected key gets aligned to its right neighbor.
At 0, nothing changes.
Blend to Ease
#
Reference
Menu
:
Key ‣ Blend ‣ Blend to Ease
Blends the selected keys to either an “ease in” or an “ease out” curve.
Blend
At -1, the keys will follow an “ease in” curve, with small value changes in the beginning
and large changes towards the end.
At 1, the keys will follow an “ease out” curve, with large value changes in the beginning
and small changes towards the end.
At 0, nothing changes.
Match Slope
#
Reference
Menu
:
Key ‣ Blend ‣ Match Slope
Blends the selected keys towards a straight line going through two keys just outside the current selection.
Factor
Negative values use the two keys to the left of the selection.
Positive values use the keys to the right.
At zero, nothing changes.
Push Pull
#
Reference
Menu
:
Key ‣ Blend ‣ Push Pull
Moves the selected keys towards, or away from, the straight line going through the first and last
selected key.
Factor
At 0, the keys will lie on the straight line.
At 1, they keep their original values.
At 2, each key’s value will be twice as far from the straight line as before.
Shear Keys
#
Reference
Menu
:
Key ‣ Blend ‣ Shear Keys
Shears the selected keyframes – that is, changes their value by an amount that increases
as they get further away in time from a reference keyframe. By default, this reference keyframe
is the leftmost selected one, but you can instead use the rightmost one by pressing
D
.
Shear Factor
How much to shear. Negative values move keyframes downwards, while positive ones move them up.
Direction
Whether to use the leftmost or the rightmost selected keyframe as a reference.
Scale Average
#
Reference
Menu
:
Key ‣ Blend ‣ Scale Average
Scales the selected keyframes vertically, using their average value as the pivot.
Factor
At 0, the keyframes will all have the average value.
At 1, they keep their original values.
At 2, each keyframe’s value will be twice as far from the average as before.
Scale from Neighbor
#
Reference
Menu
:
Key ‣ Blend ‣ Scale from Neighbor
Scales the selected keyframes vertically, using a keyframe just outside the selection as
the pivot. By default, this is the neighbor to the left of the selection,
but you can instead use the right one by pressing
D
.
Factor
The scale factor to apply.
Reference Key
Whether to use the left or right neighbor as the pivot.
Time Offset
#
Reference
Menu
:
Key ‣ Blend ‣ Time Offset
Shifts the values of the selected keyframes so that the resulting F-Curve appears to move in time.
Works best with dense keyframes.
As the curve leaves the selected keyframes’ time range on one end, it wraps back in on the other,
offset vertically so that the ends connect and there is no jump.
Frame Offset
By how many frames to shift the F-Curve. The slider is limited to the range -10 … 10,
but you can type larger numbers too.
Smooth
#
Reference
Menu
:
Key ‣ Smooth
Shortcut
:
Alt
-
S
Smooth (Gaussian)
#
Reference
Menu
:
Key ‣ Smooth ‣ Smooth (Gaussian)
Smooths the selected keyframes using a Gaussian kernel. Click the menu item, move the mouse left or right to
adjust the strength, and click
LMB
to confirm (or
RMB
to cancel).
Factor
How strongly the smoothing should be applied.
Sigma
The shape of the gaussian distribution. Lower values mean a sharper curve, giving keys that are close to each
other more weight. A high value behaves like a simple average filter.
Filter Width
A wider filter looks at more keyframes, producing a smoother result.
At a width of 1, the filter only looks at the keyframes to the immediate left and right for a weighted average.
F-Curve after applying the Gaussian Smooth with the original curve overlayed.
#
Smooth (Legacy)
#
Reference
Menu
:
Key ‣ Smooth ‣ Smooth (Legacy)
Shortcut
:
Alt
-
O
There is also an option to smooth the selected curves, but beware: its algorithm seems to be
to halve the distance between each keyframe and the average linear value of the curve,
which gives quite a strong smoothing! Note that the first and last keys
seem to be never modified by this tool.
F-Curve before smoothing.
#
F-Curve after smoothing.
#
Butterworth Smooth
#
Reference
Menu
:
Key ‣ Smooth ‣ Butterworth Smooth
Smooth the selected keyframes using a Butterworth filter. Click the menu item,
move the mouse left or right to adjust the frequency,
and click
LMB
to confirm (or
RMB
to cancel).
This filter is ideal for smoothing large amounts of data because it preserves the peaks
of the animation. The downside is that it can introduce a ripple effect when the key
values change rapidly.
Frequency Cutoff
The lower the value, the smoother the curve. There is an implicit maximum at which
the value no longer changes the curve, which is at half the sample rate. The sample
rate in this case is the scene frame rate multiplied by the
Samples per Frame
of this operator.
Filter order
Higher values mean the frequency cutoff is steeper.
Samples per Frame
Before the filter is applied, the curve is resampled at this interval to avoid errors when there
are uneven spaces between frames. If keys are on subframes, e.g. a 60fps file in a 30fps scene,
increase this value to 2.
Blend
A value between 0 and 1 for blending between the original curve and the smoothed one.
Blend In/Out
The number of frames at the start and end for which to blend between the original and smoothed curve.
This can help reduce jumps in the animation at the selection border. At value 1, it only locks the first and
last frames of the selection to their original values.
-------
).
The drawing code has been optimized resulting in smoother panning in heavy scenes. (
3eda9619f9
### Commit Summary: Anim: precalculate bounding indices for key drawing in the Graph Editor · 3eda9619f9 - blender - Blender Projects
### Commit Details:
While the drawing code already skipped drawing any key points that are not in view,
it did that with an `if` check within the `for` loop. This can be speed up quite a bit
by calculating the bounding indices beforehand and only iterating that range.

| - | Before | After |
| - | - | - |
| `draw_fcurve_selected_keyframe_vertices` | 44850ns | 3194ns |
| `graph_main_region_draw` | 32ms | 21ms |

Test file used
https://download.blender.org/ftp/sybren/animation-rigging/heavy_mocap_test.blend
#120521
-------
,
0157fede80
### Commit Summary: Anim: don't include handles when calculating FCurve bounds in Graph Editor · 0157fede80 - blender - Blender Projects
### Commit Details:
On heavy scenes, the function `get_graph_keyframe_extents`
takes up a considerable amount of the time (~50%) it takes to draw the Graph Editor.
This function is called to set the `View2D` extents which makes the scrollbars work properly.
I'd argue that level of precision isn't needed just to display scrollbars.
Passing the flag as `false` speeds up the drawing  code by 22%.

Timings for `graph_main_region_draw`
| Before | After |
| - | - |
| 32ms | 25ms |

Timings for `get_graph_keyframe_extents`

| Before | After |
| - | - |
| ~16ms | ~8ms |

Test file used
https://download.blender.org/ftp/sybren/animation-rigging/heavy_mocap_test.blend
#120519
-------
)
Performance when moving keys in heavy scenes has been drastically improved. Previous Blender
  versions could hang for minutes while it is instantaneous in 4.2. The more keys the scene has the
  more pronounced the effect is.(
8a79212031
### Commit Summary: Anim: thread remake_graph_transdata · 8a79212031 - blender - Blender Projects
### Commit Details:
On animations with high key counts, `remake_graph_transdata`
takes most of the compute time when moving keys.
This patch threads the loop over FCurves in that function to speed things up.

Test file with 10.000 keys per F-Curve
| - | Before | After |
| - | - | - |
| Moving 1 key of each FCurve |  ~2200ms | ~285ms |
| Moving a single key | ~0.70ms | ~0.72ms |

As demonstrated in the measurements, this speeds up the
case of modifying a lot of data, while not impacting the case
of modifying very little data.
The measurements were taken on an 8c/16t CPU.
The higher the thread count, the better the performance gain.

Measurements of `remake_graph_transdata` using the following test file.
https://download.blender.org/ftp/sybren/animation-rigging/heavy_mocap_test.blend
#119497
-------
,
6a55a126e9
### Commit Summary: Anim: Only sort FCurves that need it · 6a55a126e9 - blender - Blender Projects
### Commit Details:
Before this PR the sorting function would receive all FCurves from
the `anim_data` ListBase and sort them + recalculate the handles.

Considering we are already checking
IF an `FCurve` needs sorting we might as well use
that and limit the sorting to FCurves that actually need it.
Doing that gives the following performance uplift.

| - | Before | After |
| - | - | - |
| Moving 1 key only | 109ms | 0.72ms |
| Moving 1 key of each FCurve | ~2000ms | ~2000ms |

#119735
-------
,
c6c7d3d8c4
### Commit Summary: Anim: Graph Editor - use Map to update TransInfo pointers instead of searching · c6c7d3d8c4 - blender - Blender Projects
### Commit Details:
This is a performance improvement when moving a bunch
of keys on the same `FCurve` in heavy scenes.

When moving keys in such a way that the `BezTriple` array of the FCurve
has to be sorted, the pointers of `TransInfo` also have to be  updated.
This used to happen by doing a nested loop over all `BeztMap` and all `TransData2D`.
There was a bit of optimization with the
`blender::Vector
adjusted` which stored if a `TransData2D` has been fixed yet.
But in general the complexity was still `BeztMap.size() * TransData.size()`.

There are two optimizations that can be done here.
* Skip any BeztMap if `old_index == new_index`.
If the Key is not going to move any pointers to it will still be valid.
* Use a `Map
` built beforehand to quickly get
the `TransData2D` that needs updating instead of searching.
The `int` in this case is the index to the `TransData2D` array.

Doing this reduces the complexity to `BeztMap.size() + TransData.size()`.

Measurements of `beztmap_to_data`
| - | Before | After |
| - | - | - |
| Moving 1 key of 1 FCurve | ~24000 ns | ~5800ns |
| Moving ~1000 keys of 1 FCurve | 17ms | 0.02ms |

Measurements of `remake_graph_transdata`
| - | Before | After |
| - | - | - |
| Moving 1 key of 279 FCurves | 290ms | 22ms |
| Moving ~300 keys of 279 FCurves | 82 **SECONDS** | 80ms |

Test file used
https://download.blender.org/ftp/sybren/animation-rigging/heavy_mocap_test.blend
The deeper technical explanation.
`TransInfo` has an array of `TransData`.
`TransData` has pointers to the float arrays of a `BezTriple`.
The `BezTriple` array is sorted by swapping data,
meaning the `TransData` will now point to the wrong data in the array.
This has to be updated and we can do that by using the `BeztMap`.
This is all under the assumption that `BeztMap` is sorted in the exact
same way as `BezTriple` otherwise this method will fail.
But by doing it the same way, we can know at which
index the `BezTriple` is before and after sorting.
Now we just need to find the corresponding `TransData`.
That can be done by comparing pointers. The `BeztMap` stores the
`BezTriple` it represents and from it we can
get the pointers to its `vec` 0, 1 and 2. (key and handles)

#120816
-------
,
08de3fa0b6
### Commit Summary: Anim: extract constant variables out of sorting loop · 08de3fa0b6 - blender - Blender Projects
### Commit Details:
No functional changes expected.

This PR extracts the `IndexRange` of the `BeztMap` span and its `size()` call out
of the sorting loop. Doing this removes one `if` condition within the loop and gives a
small performance boost.
(Before: 0.93ms, After: 0.65ms average run of `sort_time_beztmaps`)

#121267
-------
)
Comparison of moving 300 keys in a 10,000 frame file 5 frames to the right.
Dope Sheet
¶
Keys of the new 'Generated' type, between regular keys. Some of the 'generated' keys are selected, to show the color difference.
New key type: 'Generated' (
51e1f29a68
### Commit Summary: Anim: Add new keyframe type 'GENERATED' · 51e1f29a68 - blender - Blender Projects
### Commit Details:
Add a new keyframe type named 'generated', which is meant to indicate
that the key was set by some automated tool (like an add-on), rather
than manually by an animator.

This is meant for tooling that needs to create keys in a repeatable way.
With this new key type, the tool can know which keys it generated
before, and thus those can be removed and re-generated.

#120564
-------
). This new key type indicates that the key
  was set by some automated tool (like an add-on), rather than manually by an animator. It is drawn
  smaller & dimmed in the Dope Sheet. These keys can still be operated on like any other, including
  changing their key type to something else.
It is now possible to see and edit non relative shape key animations in the "Shape Key Editor". (
7ff8a7b173
### Commit Summary: Fix #100115: Show non "Relative" animation keys in the shapekey action editor · 7ff8a7b173 - blender - Blender Projects
### Commit Details:
Because the shapekey editor is trying to have a more fancy UI with
sliders on each "Relative" shapekey value, all other animatible
properties were not drawn.

This patch now makes it possible to easily work with actions that have
non "Relative" keys. Before this was almost impossible as the user could
not see what action they had selected or which non relative keys were in
them as the UI would think that the action was empty.

While working on this I also noticed that there are some other
properties in relative mode that is not in the action editor either
(Range Min/Max). I added a TODO about that in the code as one would
probably want to group those together in a nice way with either
respective shapekey.

#121829
-------
)
NLA
¶
Performance of the editor has been improved when only viewing a section of a long action
  (
24b4461be3
### Commit Summary: Anim: restrict keylist creation for NLA drawing code · 24b4461be3 - blender - Blender Projects
### Commit Details:
When previewing an action in the NLA, the drawing code would
calculate the Keylist for the whole action regardless of what is shown.
This patch limits the keylist creation to only do it for the viewport range
increasing performance in the case when less than the whole action is visible.

whole F-Curve visible
* Before 60ms
* After 60ms

zoomed in
* Before 60ms
* After 1.6ms

#119470
-------
).
Update NLA "Make Singe User" operator modal text.
 (
298c9276e9
### Commit Summary: Anim: Update NLA "make single user" popup dialog · 298c9276e9 - blender - Blender Projects
### Commit Details:
Update the `NLA_OT_make_single_user` dialogue and confirmation modal to make explicitly clear what's happening for the selected strips.

#120082
-------
)
Armatures
¶
Subdividing a bone names the new bones in sequential order (
9f0cc7fe64
### Commit Summary: Anim: Bone subdivision, ensure bone names are sequential · 9f0cc7fe64 - blender - Blender Projects
### Commit Details:
Ensure that subdividing "Bone" results in a chain "Bone", "Bone.001",
"Bone.002", etc.

Before this commit the order would be "Bone", "Bone.004", "Bone.003",
etc.

This might break add-ons that assume to know the bone names before the
actual subdivision happens. This would always have been fragile, as
there may, for example, already have been a "Bone.001"; in that case
subdividing "Bone" would result in "Bone", "Bone.002", etc. Instead, the
parent-child chain should be followed.

#119775
-------
).
  Subdividing "Bone" makes "Bone.001" its first child, "Bone.002" the next, etc. Previously this
  would have been "Bone", "Bone.003", "Bone.002", "Bone.001".
It is now possible to specify a wire width for custom bone shapes. This setting is per bone and can be found under the "Custom Shape" options of the bone (
f9ea64b0ba
### Commit Summary: Anim: Per bone wire width for custom shapes · f9ea64b0ba - blender - Blender Projects
### Commit Details:
The setting adds the "Custom Shape Wire Width"
option to the "Viewport Display/Custom Shape" section of a pose bone.
As the setting says, this controls how thick the wire is drawn in the viewport.

This is done by adding a geometry shader that makes two triangles out of a line.

The Anti-Aliasing is controlled by the setting
Viewport->Quality->Smooth Wires->Overlay in the user preferences.

## Artifacts
When increasing the line width, the lines start to separate at their vertices.
This comes from extruding each edge along the normal of its direction.
This could be solved by adding round caps in a later PR.

#120176
-------
). There is a known visual issue on vertex corners where the edges detach instead of forming a round corner. Work to mitigate this
has been underway
but it was decided to wait until the overlay engine had an overhaul.
Bones can now be active even if they are invisible. That means you can select a bone from the outliner and edit its properties without having to unhide it. This was done in reaction to a
bug report
. (
1ab66a6b4f
### Commit Summary: Fix #116138: Hidden bones cannot be active · 1ab66a6b4f - blender - Blender Projects
### Commit Details:
This PR modifies the check for visibility when selected in the outliner.
With the change the visibility check only affects the selection state, not the active state.
The check has also been swapped with a function call to `ANIM_bone_is_visible_editbone`,
so now correctly works with collection visibility.

This PR also fixes the same issue for `Bone` and `bPoseChannel`

Co-authored-by: Cedric-Hutchings

#123237
-------
)
The Armature drawing mode "Stick" now uses bone colors (
ef8f14f3d6
### Commit Summary: Fix #90923: Bone Stick active color · ef8f14f3d6 - blender - Blender Projects
### Commit Details:
The `Stick` drawing mode for armatures was overriding the colors,
meaning it ignored bone colors specified by the user and also didn't use
the correct color for selected vs active.

#123544
-------
).
Added the option to define the wire width of custom bone shapes.
Constraints
¶
The behavior of the "Limit Rotation" constraint has been modified to fix a bug (
Bug Report
,
ed2408400d
### Commit Summary: Fix #117927: Limit rotation constraint flipping · ed2408400d - blender - Blender Projects
### Commit Details:
The issue from the bug report mentions that the `Limit Rotation` constraint snaps
back to 0 when reaching 180 degrees with a min and max of 0 / 180.

The root cause of this goes a bit deeper though. Because the following also snaps back to 0.
* min max of 0 / 360
* angle of 185

The reason for this is that the clamping logic in the constraint was very simple.
It just took the matrix, decomposed it to euler and clamped the values directly.
However in that process, the euler angles are bound to a range of -180 / 180,
which means that any angle >= 180 would snap back to the min.

#118502
-------
). In older versions the constrained object would flip back to the minimum when an angle is higher than 180º. This is now changed so values higher than 180º are supported. This means a minimum of 90º and a maximum of 270º now works properly. Also instead of snapping back to the minimum, the rotation will snap to the closest boundary when the rotation is out of the allowed range.
Since older files may rely on the previous broken behavior, a "Legacy Behavior" option has also been added to the constraint. "Limit Rotation" constraints from old blend files will automatically have that option enabled to preserve behavior, but users are encouraged to update their rigs to work with the new fixed behavior.
Drivers
¶
A new "Copy Driver to Selected" menu item is now available in the right-click
  menu of driven properties (
bd3518946e
### Commit Summary: Anim: implement "Copy Driver to Selected" operator · bd3518946e - blender - Blender Projects
### Commit Details:
This allows the user to copy the driver(s) of a property to other selected items (e.g. objects, nodes, etc.) via the right-click menu.  The implementation is based on the "Copy to Selected" operator, and generally behaves the same except for copying drivers instead of values.
Resolves
#120518
-------
).  It copies the
  property's driver to the same property on all selected items (as long as they
  also have that property). It's essentially the same as the "Copy to Selected"
  feature, but copies drivers instead of values.
Copy Global Transform add-on
¶
Copy Global Transform (
manual
### Commit Summary: Copy Global Transform - Blender 4.2 Manual
### Commit Details:
Copy Global Transform
#
Copy and paste object and bone transforms with ease.
When copying, the global (
World Space
) transform is placed on the
clipboard. This can then be pasted onto any object or bone, at the current frame
or at another one.
Since the transform is placed on the clipboard as text, you can even copy-paste
it into an instant messenger and send it to someone else.
Activation
#
Open Blender and go to Preferences then the Add-ons tab.
Click Animation then Copy Global Transform to enable the add-on.
Interface
#
Located in
3D Viewport ‣ N-panel ‣ Animation tab
.
The figure on the right shows the main functionality of the Copy Global
Transform panel. The collapsed panels are described each in their own section
below.
Description
#
Copy
Inspects the active Object (in Object mode) or Bone (in Pose mode) and places
its current global transform onto the clipboard as a matrix.
Paste
Takes the copied global transform and applies it to the active Object or
Bone. This is done by
adjusting its location, rotation, and scale properties
.
Mirrored
Same as ‘Paste’ above, but then mirrored relative to some other object or
bone. This can be useful, for example, to copy the foot position of one foot
to the other. See
Mirror Options
below.
Paste to Selected Keys
Paste as described above and additionally use auto-keying to update one or
more frames. The key selection is used to tell Blender
which frames
this
should happen on; it does not influence which parts of the transform are
keyed.
What
is keyed is determined by the active keying set.
Paste and Bake
Almost the same as
Paste to Selected Keys
. Instead of only pasting on the
selected keys,
Paste and Bake
will paste & auto-key on every frame between
the first and last selected keys.
Mirror Options
#
The copied transform can be mirrored relative to an object or a
Bone
.
This requires choosing that object or bone first.
Armature + Bone
Choosing an
Armature
object as mirror object will show the bone
selector. You can use that to pick the bone to use as mirror. This will
always use the named bone on that specific armature object.
Bone Only
When you choose
no mirror object
at all, you can still choose a
bone
name
. This is used for mirroring against a bone in the
active armature
.
This can be useful to mirror bone transforms relative to the ‘chest’ bone
of the active character.
Object Only
This will just mirror relative to the chosen object.
After pasting with ‘Paste Mirrored’, the mirror axes can be chosen in the
redo panel
.
Fix to Camera
#
Also known as “bake to camera”, this operator will ensure selected objects/bones
remain static (relative to the camera) on unkeyed frames.
This is done by generating new keys. These keys will be of
type
‘Generated’
so that it remains clear which keys were manually
created, and which were generated. This way the tool can be re-run to
re-generate the keys.
Ensure your animation is keyed using constant interpolation. If this is not
the case yet, bake your animation (at least the transform channels). This
tool does _not_ work with the
“Stepped” F-Curve modifier
Choose which of the Location/Rotation/Scale channels you want to fix to the
camera. When unsure, make sure they are all checked.
Press the “Fix to Camera” button.
To undo the effect of the “Fix to Camera” operator, click on the trash bin
button. That will remove all the generated keys in either the scene range or the
frame range.
The tool operates on the scene frame range, or on the preview range if that is
active. Keys outside that range are ignored, both when fixing to the camera and
when removing generated keys.
Warning
This tool assumes that
all
keys with type ‘Generated’ are equal. It will
overwrite them (or remove them, depending on which button you press).
Relative Copy-Paste
#
The “Relative” panel has copy/paste buttons that work relative to a chosen
object. When copying, the world-space transform is determined, and then adjusted
to become relative to the world-space transform of the chosen object. When
pasting, this happens in reverse.
If no object is chosen, the copy/paste will happen relative to the active scene
camera. What is the active scene camera is determined for every action, so when
you paste it can be different from when you copied. This can help to keep an
object visually in the same place when switching cameras, or when switching
between scenes.
Limitations
#
Pasting a transform adjusts the Object/Bone’s location, rotation, and
scale. This means that when copying a skewed transform, this skew is lost.
If there are constraints on the Object/Bone, the resulting visual transformation
may not be the same as the pasted one. To give a concrete example: if you have a
constraint that adds a rotation, it will always add that rotation on top of the
pasted transform.
See also
Pose Library
for a way to manage
and share entire poses.
Reference
Category
:
Animation
Description
:
Simple add-on for copying world-space transforms.
Location
:
3D Viewport ‣ N-panel ‣ Animation tab
File
:
copy_global_transform.py
Author
:
Sybren A. Stüvel
Maintainer
:
Sybren A. Stüvel
License
:
GPL 2+
Support Level
:
Official
Note
:
This add-on is bundled with Blender.
-------
) has gotten two new, related features
(
0b1d563a2f
):
Copy Global Transform: Fix to Camera and Relative Copy-Paste
Fix to Camera
¶
Also known as "bake to camera", this operator will ensure selected objects/bones remain static
(relative to the camera) on unkeyed frames.
This is done by generating new keys. These keys will be of type 'Generated' so that it remains clear
which keys were manually created, and which were generated. This way the tool can be re-run to
re-generate the keys.
It operates on the scene frame range, or on the preview range if that is active.
Relative Copy-Paste
¶
The "Relative" panel has copy/paste buttons that work relative to some object. That object can also
be chosen in the panel. If no object is chosen, the copy/paste will happen relative to the active
scene camera.
Pose Library
¶
Added an option to "Blend Pose Flipped" from the context menu. Previously this was only available during modal operations. (
3a40d2813f
### Commit Summary: Anim: Pose Library - Allow blending flipped from the context menu · 3a40d2813f - blender - Blender Projects
### Commit Details:
This adds the `Blend Pose Flipped` option to the
context menu of the pose library.
The operator already accepted a flipped property,
it was just missing a dedicated menu entry for that.

In order for this to work, the modal operator had to be modified.
Instead of setting the flipped state, pressing `Ctrl` now acts as a toggle.
That means that if the operator has been started in flipped mode,
pressing and holding `Ctrl` will unflip it.

This has been a point of discussion in the A&R module meeting
https://devtalk.blender.org/t/2024-05-14-animation-rigging-module-meeting/34614#ux-quirks-in-the-pose-library-shelf-5
#121857
-------
)
Pressing
Ctrl
before dragging on a Pose Library item now starts it in flipped mode. Previously this was only possible once the blending operation has started. (
345cd70404
### Commit Summary: Fix: Pose Library - Ctrl click not applying flipped · 345cd70404 - blender - Blender Projects
### Commit Details:
This has been mentioned as a bug in the recent A&R module meeting
https://devtalk.blender.org/t/2024-05-14-animation-rigging-module-meeting/34614#ux-quirks-in-the-pose-library-shelf-5
Pressing `Ctrl` only worked from within the modal operator, but not to start it.
The issue was that the entry for that was missing from the keymap.

This PR adds a keymap entry to apply and to blend a pose flipped,
by holding `Ctrl` first and then clicking the pose asset.

#121860
-------
)
Python API
¶
See
Animation in the Python API section
.

'''''


2. Blender 4.2 LTS: Color Management¶

Blender 4.2 LTS: Color Management
¶
Khronos PBR Neutral
¶
The Khronos PBR Neutral view transform has been added. (
d1cbb10d17
### Commit Summary: Add Khronos PBR Neutral tone mapper · d1cbb10d17 - blender - Blender Projects
### Commit Details:
A tone mapper designed specifically for PBR color accuracy, to get sRGB
colors in the output render that match as faithfully as possible the input
sRGB baseColor under gray-scale lighting. This is aimed toward product
photography use cases, where the scene is well-exposed and HDR color values
are mostly restricted to small specular highlights.
Fixes
#118824
: Proposal: add a view transform for Khronos PBR Neutral Tone Mapper

Co-authored-by: Emmett Lalish
#118936
-------
)
This tone mapper was designed specifically for PBR color accuracy, to get sRGB
colors in the output render that match as faithfully as possible the input sRGB
base color in materials, under gray-scale lighting. This is aimed toward product
photography use cases, where the scene is well-exposed and HDR color values are
mostly restricted to small specular highlights.
Standard
AgX
Khronos PBR Neutral
More details and theory behind this mapper is available in the Tone Mapping Considerations for Physically-Based Rendering
article
.

'''''


3. Blender 4.2 LTS: Compositor¶

Blender 4.2 LTS: Compositor
¶
GPU Acceleration
¶
Compositing for final renders can now be GPU-accelerated (
727a90a0f1
### Commit Summary: Compositor: Make GPU compositor an official feature · 727a90a0f1 - blender - Blender Projects
### Commit Details:
Effectively, make GPU compositor available without need to enable
an experimental feature set.

The compositor device is now exposed in the Performance panel of
Render Buttons. It is also still available in the compositor's
N-panel, together with some other options which are more about how
editing works, and not exactly related to render performance.

#121398
-------
).
The device used for compositing is configured in either
Render settings -> Performance -> Compositor
,
or in the properties panel of the Compositor editor. It is expected that CPU and GPU compositor evaluation
gives the same results, with minimal differences between devices.
CPU Optimizations
¶
The render compositor CPU backend has also been rewritten to improve performance,
often making it several times faster than before.
There are some changes in behavior. These were made so that the final render and
3D viewport compositor work consistently, and can run efficiently on the GPU.
Manual adjustments might be necessary to get the same result as before. See the
Breaking Changes
section below for details.
Added
¶
Added an overlay to display each node's last execution time. The display of execution time is
  disabled by default, and can be enabled from the Overlays pop-over.
  The execution time statistics are gathered during compositor evaluation in the nodes editor.
  (
467a132166
### Commit Summary: Compositor: Implement per-node execution time report · 467a132166 - blender - Blender Projects
### Commit Details:
Visually it is the same as the execution time implemented for the
geometry nodes, and it is to be enabled in the overlay popover.

The implementation is separate from the geometry nodes, as it is
not easy or practical to re-use the geometry nodes implementation.

The execution time is stored in a run-time hash, indexed by a node
instance key. This is similar to the storage of the mode preview
images, but is stored on the scene runtime data and not on the node
tree. Indexing the storage by key allows to easily copy execution
statistics from localized tree to its original version.

The time is only implemented for full-frame compositor, as for the
tiled compositor it could be tricky to calculate reliable time for
pixel processing nodes which process one pixel at a time.

#117885
-------
)
The
Legacy Cryptomatte
node is now supported in the
Viewport Compositor
.
  (
2bd80f4b7a
### Commit Summary: Realtime Compositor: Implement Legacy Cryptomatte · 2bd80f4b7a - blender - Blender Projects
### Commit Details:
This patch implements the Legacy Cryptomatte node for the Realtime
Compositor. The only difference in logic between the new and legacy
Cryptomatte nodes is the source of the layers, so we share the same code
using a base class and specialize layer retrieval as needed.

#118570
-------
)
A new
Bloom
mode was added to the
Glare
node.
  It produces similar results to the Fog Glow mode but is much faster to compute,
  has a greater highlights spread, and has a smoother falloff.
  In the future, the Fog Glow mode will be improved to be faster and more physically accurate.
  (
f4f22b64eb
### Commit Summary: Compositor: Add Bloom option to Glare node · f4f22b64eb - blender - Blender Projects
### Commit Details:
This patch implements the GPU Bloom glare for the CPU compositor, and
adds a new option for it, leaving the Fog Glow option unimplemented once
again for the GPU compositor.

#119128
-------
)
The
Fast Gaussian
mode of the
Blur
node is now implemented for the viewport compositor.
  (
382131fef2
### Commit Summary: Realtime Compositor: Implement Fast Gaussian blur · 382131fef2 - blender - Blender Projects
### Commit Details:
This patch implements the Fast Gaussian blur mode for the Realtime
Compositor. This is a faster but less accurate implementation of
Gaussian blur.

This is implemented as a recursive Gaussian blur algorithm based on the
general method outlined in the following paper:

 Hale, Dave. "Recursive gaussian filters." CWP-546 (2006).

In particular, based on the table in Section 5 Conclusion, for very low
radius blur, we use a direct separable Gaussian convolution. For medium
blur radius, we use the fourth order IIR Deriche filter based on the
following paper:

  Deriche, Rachid. Recursively implementating the Gaussian and its
  derivatives. Diss. INRIA, 1993.

For high radius blur, we use the fourth order IIR Van Vliet filter based
on the following paper:

  Van Vliet, Lucas J., Ian T. Young, and Piet W. Verbeek. "Recursive
  Gaussian derivative filters." Proceedings. Fourteenth International
  Conference on Pattern Recognition (Cat. No. 98EX170). Vol. 1. IEEE,
  1998.

That's because direct convolution is faster and more accurate for very
low radius, while the Deriche filter is more accurate for medium blur
radius, while Van Vliet is more accurate for high blur radius. The
criteria suggested by the paper is a sigma value threshold of 3 and 32
for the Deriche and Van Vliet filters respectively, which we apply on
the larger of the two dimensions.

Both the Deriche and Van Vliet filters are numerically unstable for high
blur radius. So we decompose the Van Vliet filter into a parallel bank
of smaller second order filters based on the method of partial fractions
discussed in the book:

  Oppenheim, Alan V. Discrete-time signal processing. Pearson Education
  India, 1999.

We leave the Deriche filter as is since it is only used for low radii
anyways.

Compared to the CPU implementation, this implementation is more
accurate, but less numerically stable, since CPU uses doubles, which is
not feasible for the GPU.

The only change of behavior between CPU and this implementation is that
this implementation uses the same radius, so Fast Gaussian will match
normal Gaussian, while the CPU implementation has a radius that is 1.5x
the size of normal Gaussian. A patch to change the CPU behavior
#121211
.

#120431
-------
)
The
Translate
node now has an
Interpolation
option that allows choosing between
Nearest
,
Bilinear
, and
Bicubic
. (
483c854612
### Commit Summary: Compositor: implement interpolation methods for Translate node · 483c854612 - blender - Blender Projects
### Commit Details:
Compositor: Expose interpolation methods Nearest, Bilinear and Bicubic to the user for translate node

This is part of
#119592
.

#119603
-------
)
The
Fog Glow
mode of the
Glare
node is now implemented for the viewport compositor, albeit
  with a slow CPU-based implementation for now. (
f0c379e1d3
### Commit Summary: Realtime Compositor: Implement Fog Glow Glare node · f0c379e1d3 - blender - Blender Projects
### Commit Details:
This patch implements the Fog Glow Glare node by porting the CPU
implementation, so it is not GPU accelerated and is not expected to be
realtime. However, after
d4bf23771d
, it is now fast enough to be usable,
see that commit for more information on the implementation.

The only difference is that the kernel part of the convolution is cached
in the realtime compositor, so it should be about 30% faster than CPU
for interactive editing.

In the future, this implementation will be replaced by a proper GPU
implementation, likely based on VkFFT.
-------
)
Improved
¶
The
Fog Glow
mode of the
Glare
node is now up to 25x faster. (
d4bf23771d
### Commit Summary: Compositor: Optimize Fog Glow Glare node · d4bf23771d - blender - Blender Projects
### Commit Details:
This patches optimizes the Fog Glow Glare node to be about 25x faster
for 4K images. This is mainly achieved by utilizing the FFTW library and
multi-threading support code. Further improvements are still possible by
caching kernels, but the CPU compositor does not support caching yet.

The old Hartley transform was removed, so the node no longer works when
FFTW is disabled as a build time option, much like the OIDN node. A new
BLI library was introduced for FFTW, it includes some helper routines
relevant for FFTW as well as an initialization routine that sets up
multithreading using TBB as well as thread safety.

Build system support for threaded FFTW was also added, which defines the
relevant variables to detect threading support as well as add the
relevant libraries.

We do not currently have the threaded FFTW libs in our precompiled libs,
so the threading code is disabled until the libs lands in the coming
weeks. So currently, the code is only about 9x faster.

The only functional change is that the kernel is now odd sized, which
should produce more accurate results, but the final result is almost
identical and mostly undetectable.

The plan is to port this to the GPU as well similar to how we implement
OIDN until we have a GPU FFT implementation. GPU compositor can also do
caching, so it should be faster, being able to compute a 4K image in
under half a second.

#121653
-------
)
In the viewport compositor, the compositing space is now always limited to the camera region
  in camera view regardless of the passepartout value. This means areas outside of the camera will
  not be composited, but the result will match the final render better.
The
Hue Correct
node now evaluates the saturation and value curves at the original input hue,
  not the updated one resulted from the evaluation of the hue curve. (
69920a0680
### Commit Summary: Compositor: Use original hue in Hue Correct node · 69920a0680 - blender - Blender Projects
### Commit Details:
Currently, the Hue Correct node uses the adjusted hue when adjusting the
saturation and value of the input, so if the user adjusted the reds to
become blue, in order to change the saturation of the same area, one
would need to adjust the blues, which would overlap with the existing
blues.

This is contrary to how other compositing software like GIMP and Natron
do it, and it is less intuitive. So this patch changes the node to use
the original hue to the saturation and value curves as well.

#118487
-------
)
The
Hue Correct
node now wraps around, so discontinuities at the red hue will no longer be an
  issue. (
8812be59a4
### Commit Summary: Compositor: Make Hue Correct node wrap · 8812be59a4 - blender - Blender Projects
### Commit Details:
Compositor: Make Hue Correct node wrap

This patch makes the Hue Correct node as well as the Hue Correct VSE
modifiers to wrap, such that no discontinuities occur for the red hue.
Since it now wraps, the default curve preset now exempts the last point
of the curve.

A new CUMA_USE_WRAPPING flag was added to specify wrapping for curve
maps. The implementation works by adding two virtual points before and
after the terminal points in the curve map, such that their handles
match, and would then produce a continues curve.

This is a breaking change, since existing curves were also adjusted
using versioning. However, the change will not be significant, since in
most realistic cases, the terminal points will be close to each other,
and even with wrapping, the connection will be very sharp, almost
matching the old behavior.

#117114
-------
)
The
Blur
node now assume extended image boundaries, that is, it assumes pixels outside of the
  image boundary are the same color as their closest boundary pixels. While it previously ignored
  such pixels and adjusted blur weights accordingly. (
c409f2f7c6
### Commit Summary: Compositor: Unify Blur operation across CPU and GPU · c409f2f7c6 - blender - Blender Projects
### Commit Details:
This patch unifies the implementation of the separable Blur operation
across CPU and GPU. The difference is due to the fact that the CPU code
ignores pixels that are across the image boundary and adjusts the
weights accordingly, while the GPU code assumes extended boundaries.

Like the rest of the Blur nodes the CPU implementation is adjusted to
assume extended boundaries until an option to change the boundary
condition is added. The alpha version of this operation will be handled
in a separate patch.

#118517
-------
)
The
Vector Blur
node was rewritten to match EEVEE's motion blur. The Curved, Minimum, and
  Maximum options were removed. (
b229d32086
### Commit Summary: Compositor: Port GPU Vector Blur to CPU · b229d32086 - blender - Blender Projects
### Commit Details:
This patch ports the GPU Vector Blur node to the CPU, which is in turn
ported from EEVEE. This is a breaking change since it produces different
motion blur results that are more similar to EEVEE's motion blur.
Further, the Curved, Minimum, and Maximum options were removed on the
user level since they are not used in the new implementation.

There are no significant changes to the code, except in the max velocity
computation as well as the velocity dilation passes. The GPU code uses
atomic indirection buffers, while the CPU runs single threaded for the
dilation pass, since it is a fast pass anyways. However, we impose
artificial constraints on the precision of the dilation process for
compatibility with the atomic implementation.

There are still tiny differences between CPU and GPU that I haven't been
able to solve, but I shall solve them in a later patch.

#120135
-------
)
The
Fast Gaussian
mode of the
Blur
node now matches the size of other modes of blur, while it
  was previously larger in size. (
f595345f52
### Commit Summary: Compositor: Match size of Fast Gaussian with Gaussian · f595345f52 - blender - Blender Projects
### Commit Details:
This patch matches the size of the Fast Gaussian mode of blur with the
standard Gaussian mode. The sigma value was computed as half the radius,
while it should be third of the radius, since Blender's Gaussian
function is truncated at 3 of the standard deviation of the unit
Gaussian. The patch include versioning to adjust the size of existing
files.

#121211
-------
)
The
Bicubic
interpolation mode of the
Rotate
and
Stabilize 2D
nodes is now implemented as
  a bicubic b-spline interpolation, while previously it used bilinear. (
f1d4859e2a
### Commit Summary: Compositor: implement bicubic spline for CPU compositor · f1d4859e2a - blender - Blender Projects
### Commit Details:
Affected nodes:
- Rotate
- Translate
- Stabilize 2D node

#120886
-------
)
The
Update Views
button was removed from the
Switch View
node, and the updates now happen
  automatically. (
9484770551
### Commit Summary: Compositor: Switch View: automatically update views when render views are enabled/disabled · 9484770551 - blender - Blender Projects
### Commit Details:
Remove the button "Update Views" that requires the user to update visible views manually. This is now consistent with the automatic update of compositor tree, when views are added or deleted, see
#120685
.

The patch also addresses
#109866
(not really a fix since behavior in that bug report is intentional).

#122290
-------
)
Breaking Changes
¶
The changes mainly affects canvas and single-value handling: the new implementation
follows strict left-to-right node evaluation, including canvas detection. This
makes relative transform behave differently in some cases, and makes it so
single value inputs (such as RGB Input) can not be transformed as image.
Each of the following sections describe a difference in behavior that might affect the result of
old compositing setups.
Transformations
¶
Transforms are now immediately applied at the transform nodes, meaning that scaling down an image
will destructively reduce its resolution. In the old compositor, transformations were delayed until
it was necessary to apply them. This is demonstrated in the following example, where an image is
scaled down then scaled up again. Since the scaling was delayed in the old compositor, the image
didn't loose any information, while in the new compositor, the image was pixelated.
Old
New
Repetition
¶
The Wrapping option in the Translate node can no longer be used to repeat a pattern. It now solely
operates as a clip on one side wrap on the other side manner. This is demonstrated in the following
example, where an image gets Wrapping enabled then scaled down. For the old compositor, the
wrapping was delayed until the scale down node, producing repetitions. While in the new compositor,
wrapping only effects the translate node, which does nothing, so it is unaffected.
Old
New
Note
This functionality will be restored in the future in a more explicit form.
Size Inference
¶
The old compositor tried to infer an image size from upstream/output nodes, while the new
compositor evaluates the node tree from left to right without inferring image sizes from upstream
nodes. The new behavior is more predictable but made some tricks that were previously possible to
be no longer valid. This is demonstrated in the following example, where in the old compositor, the
translate node inferred its size as the size of the mandrill image, so it is as if the node
received a full image with the same size as the mandrill image filled with a red color, which when
translated down would leave a black area at the top, which when blurred created a gradient.
The new compositor on the other hand treats the translate node as having a single red color as an
input, which is transformation-less, similarly, the blur node also treated its input as a single
red value, which was passed through without blurring, and finally, the color mix node when
receiving a single red color, mixed it with the entire mandrill image as most nodes do.
Old
New
Clipping
¶
The old compositor will clip images if their inferred size is smaller than their actual size, while
the new compositor will not do size inference and consequently will not clip images. This is
demonstrated in the following example.
Old
New
Sampling Space
¶
The old compositor sampled images in their aforementioned inferred space, which can be potentially
clipped if the inferred size is smaller than the actual image size as mentioned before. The new
compositor samples images in their own space. This is demonstrated in the following example, where
a scaled up image is sampled in its entirety by using normalized [0, 1] gradients as the sampling
coordinates. The old compositor produced clipped mages since its inferred size is also clipped,
while the new compositor produces full images.
Old
New
Removed
¶
Two Pass
options has been removed (
6db8091f45
### Commit Summary: Compositor: Remove Two Pass option · 6db8091f45 - blender - Blender Projects
### Commit Details:
There are few issues with the logic and implementation of this option:

- While the first pass is faster in the terms of a wall-clock time, it
  is often not giving usable results to artists, as the final look of
  the result is so much different from what it is expected to be.

- It is not supported by the GPU compositor.

- It is based on some static rules based on the node type, rather than
  on the apparent computational complexity.

The performance settings are planned to be moved to the RenderData, and
it is unideal to carry on such limited functionality to more places. There
are better approaches to quickly provide approximated results, which we can
look into later.

#121558
-------
)
Edit and Render quality options have been removed (
9532ea3f8c
### Commit Summary: Compositor: Remove Render/Edit Quality setting · 9532ea3f8c - blender - Blender Projects
### Commit Details:
The setting was only affecting some of the blur operations, which
does not typically results in a measurable performance boost in real
compositor setups.

For the simplicity of settings on user level remove setting which
potentially makes compositor output worse, without much benefit.

There are better ways to gain performance, like compositing on a
lower resolution, exposing "preview" as an input to the node tree
(similar to the geometry nodes) etc.

#121576
-------
,
149e547de6
### Commit Summary: Compositor: Remove quality setting from DNA and UI · 149e547de6 - blender - Blender Projects
### Commit Details:
It was meant to be included into the previous commit in the area,
but was forgotten due to some technicalities.

Also remove the DisplaceSimpleOperation, which is now not used.

#121580
-------
)

'''''


4. Blender 4.2 LTS: Core¶

Blender 4.2 LTS: Core
¶
Undo
¶
Faster undo due to implicit sharing. (
0e8e219d71
### Commit Summary: Undo: support implicit-sharing in memfile undo step · 0e8e219d71 - blender - Blender Projects
### Commit Details:
This adds implicit sharing support for the `MemFile` undo-step. This decreases memory
usage and increases performance.

Implicit sharing allows the undo system to take (shared) ownership of some data.
Previously, the data would always be serialized and compared to the previous undo-step.
So this turns an O(n) operation into O(1) (in terms of memory usage and time).

Read/write code that wants to make use of this has to use the new `BLO_read_shared`
and `BLO_write_shared` functions respectively. Those either make use of implicit-sharing
internally or do the "full" read/write based on a passed-in function. It seems possible to
use the same API in the future to store shared data to .blend files.

Improvements:
* Much faster undo step creation in many cases by avoiding the majority data copies
  and equality checks. This
fixes
#98574
. I found undo step creation and undo step
  decoding to be 2-5 times faster in some demo files from the blender website and in
  some production files from the Heist project.
* Reduced memory usage when there is large data in `bmain`. For example, when
  loading the same highly subdivided mesh that I used in
#106228
the memory usage
  is 1.03 GB now (compared to 1.62 GB in `main` currently). The main remaining copy
  of the data now is done by rendering code.
* Some significant performance improvements were also measured for the new grease
  pencil type (
#105540
).

There is one main downside of using implicit-sharing as implemented here: `MemFile`
undo steps can't be written as .blend files anymore. This has a few consequences:
* Auto-save becomes slower (up to 3x), because it can't just save the previous undo step
  anymore and does a normal save instead. This has been discussed in more detail here:
https://devtalk.blender.org/t/remove-support-for-saving-memfile-undo-steps-as-blend-files-proposal/33544
It would be nice to work towards asynchronous auto-save to alleviate this problem.
  Some previous work has been done to reduce the impact of this change in
41b10424c7
and
f0f304e240
. This has been committed separately in
efb511a76d
.
* Writing `quit.blend` has to do a normal file save now. So it's a bit slower too, but it's
  less of a problem in practice.
* The `USE_WRITE_CRASH_BLEND` functionality does not work anymore. It doesn't seem
  to be used by anyone (removed in
e90f5d03c4
)

There are also benefits to not writing `MemFile` from undo steps to disk. It allows us to
more safely do undo-specific optimizations without risking corrupted .blend files. This
is especially useful when we want to preserve forward compatibility in some cases.
This requires converting data before writing the .blend files, but this conversion is not
necessary for undo steps. Trying to implement this kind of optimization in the past has
often lead to bugs (e.g.
43b37fbc93
).

Another new problem is that it is harder to know the size of each undo step. Currently, a
heuristic is used to approximate the memory usage, but better solutions could be found
if necessary.

#106903
-------
)
Portable Installation
¶
Creating a
portable installation
### Commit Summary: Blender’s Directory Layout - Blender 4.2 Manual
### Commit Details:
Blender’s Directory Layout
#
This page documents the different directories used by Blender.
This can be helpful for troubleshooting, automation and customization.
User Directories
#
User directories store preferences, startup file, installed extensions,
presets and more. By default these use the standard configuration folders
for each operating system.
Linux
#
$HOME/.config/blender/4.2/
If the
$XDG_CONFIG_HOME
environment variable is set:
$XDG_CONFIG_HOME/blender/4.2/
macOS
#
/Users/$USER/Library/Application Support/Blender/4.2/
Windows
#
%USERPROFILE%\AppData\Roaming\Blender Foundation\Blender\4.2\
Portable Installation
#
When running Blender from a portable drive, it’s possible to keep the configuration
files on the same drive to take with you.
To enable this, create a folder named
portable
at the following locations:
Windows: Next to the Blender executable, in the unzipped folder
Linux: Next to the Blender executable, in the unzipped folder
macOS: Inside the application bundle at
Blender.app/Contents/Resources
This folder will then store preferences, startup file, installed extensions
and presets.
Environment Variables
#
The
BLENDER_USER_RESOURCES
environment variable
can be set to a custom directory to replace the default user directory.
System Directories
#
System directories store files that come bundled with Blender and
are required for it to function. This includes scripts, presets, essential
assets and more.
Linux
#
Archive downloaded from blender.org:
./4.2/
Linux distribution packages:
/usr/share/blender/4.2/
macOS
#
./Blender.app/Contents/Resources/4.2/
Windows
#
Zip file downloaded from blender.org:
./4.2/
Installer downloaded from blender.org:
%ProgramFiles%\Blender Foundation\Blender\4.2\
Microsoft Store installation:
%ProgramFiles%\WindowsApps\BlenderFoundation.Blender
\Blender\4.2\
Environment Variables
#
BLENDER_SYSTEM_SCRIPTS
and
BLENDER_SYSTEM_EXTENSIONS
environment variables
can be used to
bundle additional scripts and extensions
,
that are not part of the regular Blender installation.
Other
BLENDER_SYSTEM
environment variables can override other system paths,
though are not commonly used in practice.
Path Layout
#
./autosave
Autosave blend-file location. (Windows only, temp directory used for other systems.)
Located in user directories.
./config
User configuration and session info.
Located in user directories.
./config/startup.blend
Blend file to load on startup.
./config/userpref.blend
User preferences.
./config/bookmarks.txt
File Browser bookmarks.
./config/recent-files.txt
Recent file menu list.
./config/{APP_TEMPLATE_ID}/startup.blend
Startup file for an application template.
./config/{APP_TEMPLATE_ID}/userpref.blend
User preferences file for an application template.
./datafiles
Data files loaded at runtime.
Located in both user and system directories. User data files either override
or add to system data files.
./datafiles/colormanagement
Default OpenColorIO configuration.
./datafiles/fonts
User interface fonts.
./datafiles/studiolights
Studio light images for 3D viewport.
./extensions
Extension repositories.
Located in both user and system directories. Repositories are loaded from
both directories.
./scripts
Add-ons, presets, templates, user interface, startup scripts.
Located in both user and system directories. Scripts are loaded from
both directories.
./scripts/addons/*.py
Python add-ons which may be enabled in the Preferences include import/export format support,
render engine integration and many handy utilities.
./scripts/addons/modules/*.py
Modules for add-ons to use
(added to Python’s
sys.path
).
./scripts/addons_core/*.py
The add-ons directory which is used for bundled add-ons.
./scripts/addons_core/modules/*.py
Modules for
addons_core
to use (added to Python’s
sys.path
when it found).
./scripts/modules/*.py
Python modules containing our core API and utility functions for other scripts to import
(added to Python’s
sys.path
).
./scripts/startup/*.py
Scripts which are automatically imported on startup.
./scripts/startup/bl_app_templates_user/{APP_TEMPLATE_ID}
Application templates installed in user directories.
./scripts/startup/bl_app_templates_system/{APP_TEMPLATE_ID}
pplication templates automatically loaded from system directories.
./scripts/presets/{preset}/*.py
Presets used for storing user-defined settings for cloth, render formats, etc.
./scripts/templates_py/*.py
Example scripts which can be accessed from
Text Editor ‣ Templates ‣ Python
.
./scripts/templates_osl/*.osl
Example OSL shaders which can be accessed from
Text Editor ‣ Templates ‣ Open Shading Language
.
./python
Bundled Python distribution.
Located in system directories.
Local Cache Directory
#
The cache directory is used to store persistent caches locally. Currently it is only used for the indexing of
Asset Libraries
. The operating system is not expected to clear this automatically.
The following path will be used:
Linux
:
$XDG_CACHE_HOME/blender/
if
$XDG_CACHE_HOME
is set, otherwise
$HOME/.cache/blender/
macOS
:
/Library/Caches/Blender/
Windows
:
%USERPROFILE%\AppData\Local\Blender
Foundation\Blender\Cache\
Temporary Directory
#
The temporary directory is used to store various files at run-time
(including render layers, physics cache, copy-paste buffer and crash logs).
The temporary directory is selected based on the following priority:
User Preference (see
File Paths
).
Environment variables (
TEMP
on Windows,
TMP
&
TMP_DIR
on other platforms).
The
/tmp/
directory.
-------
now works by creating a folder named
portable
next to the Blender executable,
  instead of a
4.2/config
folder. (
PR#122778
)
Environment Variables
¶
The new
BLENDER_SYSTEM_EXTENSIONS
environment variable adds extensions to a
  Blender installation. See the
Deploying Blender in Production
### Commit Summary: Deploying Blender in Production - Blender 4.2 Manual
### Commit Details:
Deploying Blender in Production
#
This page contains tips for setting up Blender in environments
such as animation studios and schools.
These environments often have special requirements regarding
security, automated deployment and customization.
Installing Blender
#
Blender downloads can be extracted to any directory on the system, as
a self contained installation. Multiple Blender versions can
co-exist on the same system, and deployment can be automated using
standard file management tools.
New Blender versions may add, remove or change functionality that
affects the results of production files. For a given project, it is
advisable to use a single
LTS
version
of Blender. LTS versions receive bug fixes for two years.
Working Offline
#
For security or other reasons, workstation may not have internet access.
By default Blender does not access the internet, however this can be
enabled in the System preferences with the
Online Access
option.
Working offline can be enforced by running with the
--offline-mode
command line argument
. Users
will then be unable to enable online access in the preferences.
Note
Add-ons that follow this setting will only connect to the internet if enabled.
However, Blender cannot prevent third-party add-ons from violating this rule.
Bundling Extensions
#
When working offline or in a more controlled environment, it may be useful
to provide a set of extensions to all users. For this there is a default
read-only System repository. This repository can for example be located
on a read-only network drive or in a system directory.
System repository
#
The
$BLENDER_SYSTEM_EXTENSIONS
environment variable
controls the default location. This should point to a directory, within
which a
system
directory should exist.
Extensions packages should be extracted in this
system
directory,
with a resulting path like this:
$BLENDER_SYSTEM_EXTENSIONS
/system/my-addon/blender_manifest.toml
In the Extensions preferences, it’s possible to manually set a custom
directory for the default System repository, or to create multiple
repositories.
Bundling Scripts
#
Besides extensions, it’s possible to bundle scripts for presets,
application templates, legacy add-ons, as well as scripts run on startup.
Script directories can be manually added in the File Paths preferences.
The
$BLENDER_SYSTEM_SCRIPTS
can also be used to add a script directory
without modifying the preferences.
These script directories are expected to contain specific directories
like
presets
,
addons
and
startup
for different types of
scripts. See
Path Layout
for a complete list.
Startup Scripts
#
The Blender Python API can be used to customize Blender. This includes
changing preferences, changing the startup file and adding UI elements.
For example, a script can enable add-ons for every user.
$BLENDER_SYSTEM_SCRIPTS
/startup/enable_addons.py
def
register
():
import
addon_utils
addon_utils
.
enable
(
"my-addon"
)
def
unregister
():
pass
if
__name__
==
"__main__"
:
register
()
Application Templates
#
Application Templates
can be used to set up Blender for particular
tasks or projects, separate from the default configuration. When
creating a new file the user can choose the template.
The files are expected to be placed in the system script directories like this:
$BLENDER_SYSTEM_SCRIPTS
/startup/bl_app_templates_system/MyTemplate/__init__.py
$BLENDER_SYSTEM_SCRIPTS
/startup/bl_app_templates_system/MyTemplate/startup.blend
Legacy Add-ons
#
Add-ons that have not been converted to become an extension yet need
to be placed in the
addons
script directory.
For example, an add-on could be located at:
$BLENDER_SYSTEM_SCRIPTS
/addons/simple_addon.py
$BLENDER_SYSTEM_SCRIPTS
/addons/complex_addon/__init__.py
VFX Platform
#
Blender follows the
VFX reference platform
,
which means it is able to run on the same systems as other VFX software
and exchange image, volume and scene files with them.
Python Version
#
Blender and the
by module
are only compatible
with a single Python version. This makes it possible for add-ons and VFX software
in general to only have to target a single Python version.
Blender bundles a complete Python installation and does not interact with the
system Python by default. This can be changed with the
--python-use-system-env
command line argument
, if care is
taken to set up a compatible Python version.
-------
documentation for details. (
PR#122832
)
The existing
BLENDER_SYSTEM_SCRIPTS
environment variable will now
  always add scripts likes legacy add-ons and presets to a Blender installation.
  This can be used for example in an animation studio to make scripts available to all users.
  Previously this environment variable often either did not work or behaved inconsistently.
  (
PR#122689
)
Command Line Arguments
¶
Running in background-mode using
-b
or
--background
now disables audio by default.
  (
7c90018f23
### Commit Summary: CLI: make "-noaudio" implicit with "-b/--background" · 7c90018f23 - blender - Blender Projects
### Commit Details:
Running background mode now behaves as if the "-noaudio" was passed in.

The -setaudio command now has a "Default" option which can be used
in the rare cases audio playback is desired in background mode. e.g.

  blender --background -setaudio Default

Ref
!118192
-------
)
New
--online-mode
and
--offline-mode
arguments to force Blender to
  enable or disable online access, overriding the preferences.
  (
PR#121994
)
Extensions can be managed via the command line using the
extension
### Commit Summary: Extensions Command Line Arguments - Blender 4.2 Manual
### Commit Details:
Extensions Command Line Arguments
#
Command for managing Blender extensions.
options:
-h
,
--help
show this help message and exit
subcommands:
Package Management
list
:
List all packages.
sync
:
Synchronize with remote repositories.
update
:
Upgrade any outdated packages.
install
:
Install packages.
install-file
:
Install package from file.
remove
:
Remove packages.
Repository Management
repo-list
:
List repositories.
repo-add
:
Add repository.
repo-remove
:
Remove repository.
Extension Creation
build
:
Build a package.
validate
:
Validate a package.
server-generate
:
Create a listing from all packages.
Package Management
#
Subcommand:
list
#
usage:
blender
--
command
extension
list
[
-
h
]
[
-
s
]
List packages from all enabled repositories.
options:
-h
,
--help
show this help message and exit
-s
,
--sync
Sync the remote directory before performing the action.
Subcommand:
sync
#
usage:
blender
--
command
extension
sync
[
-
h
]
Download package information for remote repositories.
options:
-h
,
--help
show this help message and exit
Subcommand:
update
#
usage:
blender
--
command
extension
update
[
-
h
]
[
-
s
]
Download and update any outdated packages.
options:
-h
,
--help
show this help message and exit
-s
,
--sync
Sync the remote directory before performing the action.
Subcommand:
install
#
usage:
blender
--
command
extension
install
[
-
h
]
[
-
s
]
[
-
e
]
[
--
no
-
prefs
]
PACKAGES
positional arguments:
PACKAGES
:
The packages to operate on (separated by
,
without spaces).
options:
-h
,
--help
show this help message and exit
-s
,
--sync
Sync the remote directory before performing the action.
-e
,
--enable
Enable the extension after installation.
--no-prefs
Treat the user-preferences as read-only,
preventing updates for operations that would otherwise modify them.
This means removing extensions or repositories for example, wont update the user-preferences.
Subcommand:
install-file
#
usage:
blender
--
command
extension
install
-
file
[
-
h
]
-
r
REPO
[
-
e
]
[
--
no
-
prefs
]
FILE
Install a package file into a user repository.
positional arguments:
FILE
:
The packages file.
options:
-h
,
--help
show this help message and exit
-r
REPO
,
--repo
REPO
The repository identifier.
-e
,
--enable
Enable the extension after installation.
--no-prefs
Treat the user-preferences as read-only,
preventing updates for operations that would otherwise modify them.
This means removing extensions or repositories for example, wont update the user-preferences.
Subcommand:
remove
#
usage:
blender
--
command
extension
remove
[
-
h
]
[
--
no
-
prefs
]
PACKAGES
Disable & remove package(s).
positional arguments:
PACKAGES
:
The packages to operate on (separated by
,
without spaces).
options:
-h
,
--help
show this help message and exit
--no-prefs
Treat the user-preferences as read-only,
preventing updates for operations that would otherwise modify them.
This means removing extensions or repositories for example, wont update the user-preferences.
Repository Management
#
Subcommand:
repo-list
#
usage:
blender
--
command
extension
repo
-
list
[
-
h
]
List all repositories stored in Blender’s preferences.
options:
-h
,
--help
show this help message and exit
Subcommand:
repo-add
#
usage:
blender
--
command
extension
repo
-
add
[
-
h
]
[
--
name
NAME
]
[
--
directory
DIRECTORY
]
[
--
url
URL
]
[
--
access
-
token
ACCESS_TOKEN
]
[
--
source
SOURCE
]
[
--
cache
BOOLEAN
]
[
--
clear
-
all
]
[
--
no
-
prefs
]
ID
Add a new local or remote repository.
positional arguments:
ID
:
The repository identifier.
options:
-h
,
--help
show this help message and exit
--name
NAME
The name to display in the interface (optional).
--directory
DIRECTORY
The directory where the repository stores local files (optional).
When omitted a directory in the users directory is automatically selected.
--url
URL
The URL, for remote repositories (optional).
When omitted the repository is considered “local”
as it is not connected to an external repository,
where packages may be installed by file or managed manually.
--access-token
ACCESS_TOKEN
The access token to use for remote repositories which require a token.
--source
SOURCE
The type of source in (‘USER’, ‘SYSTEM’).
System repositories are managed outside of Blender and are considered read-only.
--cache
BOOLEAN
Use package cache (default=1).
--clear-all
Clear all repositories before adding, simplifies test setup.
--no-prefs
Treat the user-preferences as read-only,
preventing updates for operations that would otherwise modify them.
This means removing extensions or repositories for example, wont update the user-preferences.
Subcommand:
repo-remove
#
usage:
blender
--
command
extension
repo
-
remove
[
-
h
]
[
--
no
-
prefs
]
ID
Remove a repository.
positional arguments:
ID
:
The repository identifier.
options:
-h
,
--help
show this help message and exit
--no-prefs
Treat the user-preferences as read-only,
preventing updates for operations that would otherwise modify them.
This means removing extensions or repositories for example, wont update the user-preferences.
Extension Creation
#
Subcommand:
build
#
usage:
blender
--
command
extension
build
[
-
h
]
[
--
source
-
dir
SOURCE_DIR
]
[
--
output
-
dir
OUTPUT_DIR
]
[
--
output
-
filepath
OUTPUT_FILEPATH
]
[
--
valid
-
tags
VALID_TAGS_JSON
]
[
--
split
-
platforms
]
[
--
verbose
]
Build a package in the current directory.
options:
-h
,
--help
show this help message and exit
--source-dir
SOURCE_DIR
The package source directory containing a
blender_manifest.toml
manifest.
Default’s to the current directory.
--output-dir
OUTPUT_DIR
The package output directory.
Default’s to the current directory.
--output-filepath
OUTPUT_FILEPATH
The package output filepath (should include a
.zip
extension).
Defaults to
{id}-{version}.zip
using values from the manifest.
--valid-tags
VALID_TAGS_JSON
Reference a file path containing valid tags lists.
If you wish to reference custom tags a
.json
file can be used.
The contents must be a dictionary of lists where the
key
matches the extension type.
For example:
{"add-ons":
["Example",
"Another"],
"theme":
["Other",
"Tags"]}
To disable validating tags, pass in an empty path
--valid-tags=""
.
--split-platforms
Build a separate package for each platform.
Adding the platform as a file name suffix (before the extension).
This can be useful to reduce the upload size of packages that bundle large
platform-specific modules (
*.whl
files).
--verbose
Include verbose output.
Subcommand:
validate
#
usage:
blender
--
command
extension
validate
[
-
h
]
[
--
valid
-
tags
VALID_TAGS_JSON
]
[
SOURCE_PATH
]
Validate the package meta-data in the current directory.
positional arguments:
SOURCE_PATH
:
The package source path (either directory containing package files or the package archive).
This path must containing a
blender_manifest.toml
manifest.
Defaults to the current directory.
options:
-h
,
--help
show this help message and exit
--valid-tags
VALID_TAGS_JSON
Reference a file path containing valid tags lists.
If you wish to reference custom tags a
.json
file can be used.
The contents must be a dictionary of lists where the
key
matches the extension type.
For example:
{"add-ons":
["Example",
"Another"],
"theme":
["Other",
"Tags"]}
To disable validating tags, pass in an empty path
--valid-tags=""
.
Subcommand:
server-generate
#
usage:
blender
--
command
extension
server
-
generate
[
-
h
]
--
repo
-
dir
REPO_DIR
[
--
html
]
[
--
html
-
template
HTML_TEMPLATE_FILE
]
Generate a listing of all packages stored in a directory.
This can be used to host packages which only requires static-file hosting.
options:
-h
,
--help
show this help message and exit
--repo-dir
REPO_DIR
The remote repository directory.
--html
Create a HTML file (
index.html
) as well as the repository JSON
to support browsing extensions online with static-hosting.
--html-template
HTML_TEMPLATE_FILE
An optional HTML file path to override the default HTML template with your own.
The following keys will be replaced with generated contents:
${body}
is replaced the extensions contents.
${date}
is replaced the creation date.
-------
sub-command (
13a3603578
### Commit Summary: Move addons from the addons repo to "addons_core" · 13a3603578 - blender - Blender Projects
### Commit Details:
Ref:
!121825
-------
)

'''''


5. Blender 4.2 LTS: Cycles¶

Blender 4.2 LTS: Cycles
¶
Ray Portals
¶
The Ray Portal BSDF transports rays to another location in the scene, with specified ray position and normal. It can be used to render portals for visual effects, and other production rendering tricks. (
PR#114386
)
See the
documentation
### Commit Summary: Ray Portal BSDF - Blender 4.2 Manual
### Commit Details:
Ray Portal BSDF
#
Cycles Only
The
Ray Portal BSDF
node transports rays that enter to another location
in the scene. It can be used to render portals for visual effects, and
other production rendering tricks.
It acts much like a
Transparent BSDF
:
render passes are passed through,
and it is affected by light path max transparent bounces.
Note
The
Ray Portal BSDF
only allows rays to pass through it in one direction. Add a
second portal at the target location to make rays go in the other direction as well.
Light sampling does not work efficiently through portals. This can lead to increased
noise from lights on the other side of portals. Particularly small lights may be very
noisy, or not pass through at all.
Inputs
#
Color
Tint rays passing through the portal.
Position
Ray start position at new location. Defaults to the current position,
matching the Position output of the
Geometry node
.
Direction
Ray direction at the new location. Defaults to the current view direction,
which is the same as the negation of the Incoming output of the
Geometry node
.
Properties
#
This node has no properties.
Outputs
#
BSDF
Standard shader output.
Examples
#
One use case for the
Ray Portal BSDF
is to connect two spaces together to
create effects like a portal to an alternative dimension, or “impossible spaces”
where something is bigger or smaller on the inside than expected.
To set up a
Ray Portal BSDF
for a technique like this, augment the
Position
and
Incoming
outputs of the
Geometry node
to set the exit point
and direction of the ray through the portal. Here are some examples:
Simple Offset
#
This simple node setup offsets the ray position.
In this example, the ray is offset 0 units along the X axis,
4 units along the Y axis, and 5 units along the Z axis.
#
Portal
#
In this example, the
Location of Portal Target
and
Rotation of Portal Target
vectors are obtained from a target portal object using
Drivers
.
#
Camera Feed
#
Along with augmenting rays, the ray position and ray direction can be replaced,
for effects like a camera feed on a screen.
Using the Ray Portal BSDF to replicate the effect of a camera feed on a screen.
#
Node setup for replicating a camera feed like effect on a screen.
#
-------
for details and example node setups.
Connecting two spaces through a portal
Simulating a camera feed
Thin Film Interference
¶
The Principled BSDF now supports physically accurate thin film interference effects for specular reflection and transmission. (
PR#118477
)
Initially, this is only applied to dielectric materials, support for metallic thin film effects is planned later. Similarly, the effect is not yet supported by EEVEE.
Simulating soap bubbles
Shaders
¶
Principled Hair with the Huang model now provides more accurate results when viewing hairs close up, by dynamically switching between a near and far field model depending on the distance. (
PR#116094
)
Subsurface Scattering node now has a Roughness input, matching the Principled BSDF. (
PR#114499
)
Denoising
¶
Upgrade OpenImageDenoise to version 2.3, with improved denoising quality.
GPU acceleration is now enabled on AMD GPUs on Windows and Linux.
CPU renders can now also use GPU accelerated denoising. (
PR#118841
)
The denoiser uses GPU device configured in the User Preferences. The side-effect of this is that
  OptiX denoiser requires having OptiX compute device configured in the preferences.
Sampling
¶
Blue noise dithered sampling to improve the visual quality of renders. This mainly helps when setting the maximum number of samples to a low number, and for interactive viewport renders. New files use this mode by default, while existing files can be changed in the Sampling → Advanced panel. (
PR#123274
)
Classic
Blue Noise
Raw
Denoised
Improved volume light sampling, particularly for spot lights and area light spread. (
PR#119438
) (
PR#122667
)
Other
¶
World Override option for view layers. (
PR#117920
)
Intel GPU rendering now supports host memory fallback. (
PR#122385
)
Drivers 101.5518-101.5525 and 101.5768 and higher are currently recommended for this feature. (
#124763
)
GPU kernels are now compressed, reducing Blender installation size. (
PR#123557
)
Motion Blur settings are now shared with EEVEE. (
74b8f99b43
### Commit Summary: Render: Merge EEVEE and Cycles motion blur settings · 74b8f99b43 - blender - Blender Projects
### Commit Details:
Merge duplicated motion blur settings between Cycles and EEVEE,
and move them to `RenderData`/`scene.render`:
* `scene.cycles.motion_blur_position` -> `scene.render.motion_blur_position`
* `scene.eevee.use_motion_blur` -> `scene.render.user_motion_blur`
* `scene.eevee.motion_blur_position` -> `scene.render.motion_blur_position`
* `scene.eevee.motion_blur_shutter` -> `scene.render.motion_blur_shutter`

On the C/C++ side, this also renames `RenderData::blurfac` to
`RenderData::motion_blur_shutter`.

#117913
-------
)
Embree has been updated to 4.3.2 (
PR#122242
) which relies on more driver components to provide Hardware Ray-tracing:
Intel GPU users on Linux should ensure
intel-level-zero-gpu-raytracing
package is installed as mentioned in the
documentation
### Commit Summary: Installing Client GPUs — Intel® software for general purpose GPU capabilities  documentation
### Commit Details:
Search
Intel® software for general purpose GPU capabilities
Overview
Releases
Installation for Data Center GPU
Installation for Client GPU
Installing Client GPUs
Installation options
Installing GPU packages
Installing out-of-tree drivers for GPU
Configuring the Isolated Desktop Solution
Kernel Driver Types
Supported Hardware
GPU Debugging
Troubleshooting
System Setup Guide
Examples of GPU Workloads
Frequently Asked Questions (FAQ)
Intel® software for general purpose GPU capabilities
Installation for Client GPU
Installing Client GPUs
View page source
Installing Client GPUs

Intel actively collaborates with various upstream projects to enable the best possible experience using the software and drivers provided by operating system distributions. However, because of release schedules and certain features that may not yet be available upstream, we also offer direct access to our packages and drivers. Follow this procedure only if you need features that are not yet included in the default operating system installation.
Starting with Ubuntu Desktop* 23.04, the full range of Intel® client GPUs is expected to work with the default Ubuntu installation, except for GPU debugging features.
Package and repository signing
Intel strives to continuously improve the products’ security. To ensure the continued security of the package repositories documented on this site, the GPG keys used to sign packages and repository metadata are updated on a recurring basis. In order for updates to continue to function, you have to update your local system with the GPG public key published by Intel at https://repositories.intel.com/gpu/intel-graphics.key.
wget
-qO
-
https://repositories.intel.com/gpu/intel-graphics.key
|
sudo
gpg
--yes
--dearmor
--output
/usr/share/keyrings/intel-graphics.gpg
Installation options

The software stack for clients differs based on whether the intended usage is client display-oriented or discrete GPU development. For systems with both an integrated GPU and a discrete GPU, there are a few installation options:
The easiest option
is to use the Ubuntu Desktop-supplied Hardware Enablement (HWE) starting with Ubuntu 23.04 for integrated and discrete graphics. This is the simplest option and does not require any custom settings. However, this option is not validated and some features are unavailable in the kernel driver supplied with Ubuntu 23.04 (Lunar), for example, GPU debugging.
Customized display stack
allows using the Intel out-of-tree kernel modules for integrated and discrete graphics. You can use Ubuntu Desktop 22.04 (Jammy) LTS and install the client packages to update the kernel module and user space packages, including Mesa. This setup enables the use of GPU debugging.
Isolated desktop from development
allows using the Ubuntu Desktop-supplied HWE for integrated graphics and hosting the discrete GPU in a virtual machine. You can use Ubuntu 22.04 (Jammy) LTS or newer for your primary desktop. Additional configuration allows passing the discrete GPU to a virtual machine running Ubuntu 22.04 (Jammy) LTS HWE and the Intel out-of-tree driver.
Installing GPU packages

Follow this procedure if you want to install the out-of-tree or upstream driver.
Configure your system to install client packages.
wget
-qO
-
https://repositories.intel.com/gpu/intel-graphics.key
|
\
sudo
gpg
--yes
--dearmor
--output
/usr/share/keyrings/intel-graphics.gpg
echo
"deb [arch=amd64,i386 signed-by=/usr/share/keyrings/intel-graphics.gpg] https://repositories.intel.com/gpu/ubuntu jammy client"
|
\
sudo
tee
/etc/apt/sources.list.d/intel-gpu-jammy.list
sudo
apt
update
If you experience problems with repository signatures during a system update, as opposed to the initial installation, use the following GPG public key to sign the package repositories:
wget
-qO
-
https://repositories.intel.com/gpu/intel-graphics.key
|
\
sudo
gpg
--yes
--dearmor
--output
/usr/share/keyrings/intel-graphics.gpg
Install Compute Runtime, Media, and Mesa packages.
sudo
apt
install
-y
\
intel-opencl-icd
intel-level-zero-gpu
level-zero
intel-level-zero-gpu-raytracing
\
intel-media-va-driver-non-free
libmfx1
libmfxgen1
libvpl2
\
libegl-mesa0
libegl1-mesa
libegl1-mesa-dev
libgbm1
libgl1-mesa-dev
libgl1-mesa-dri
\
libglapi-mesa
libgles2-mesa-dev
libglx-mesa0
libigdgmm12
libxatracker2
mesa-va-drivers
\
mesa-vdpau-drivers
mesa-vulkan-drivers
va-driver-all
vainfo
hwinfo
clinfo
Intel’s version of Mesa includes support for the out-of-tree driver. You can use the standard Mesa if you use the default Ubuntu 23.04 driver.
Restart your desktop either through a system reboot or by restarting your window manager.
If you use third-party applications that require i386 packages, for example, Steam, install the packages for i386:
sudo
dpkg
--add-architecture
i386
sudo
apt
update
sudo
apt
install
-y
\
udev
mesa-va-drivers:i386
mesa-common-dev:i386
mesa-vulkan-drivers:i386
\
libd3dadapter9-mesa-dev:i386
libegl1-mesa:i386
libegl1-mesa-dev:i386
\
libgbm-dev:i386
libgl1-mesa-glx:i386
libgl1-mesa-dev:i386
\
libgles2-mesa:i386
libgles2-mesa-dev:i386
libosmesa6:i386
\
libosmesa6-dev:i386
libwayland-egl1-mesa:i386
libxatracker2:i386
\
libxatracker-dev:i386
mesa-vdpau-drivers:i386
libva-x11-2:i386
If you need header files or pkg-config support, install development packages.
sudo
apt
install
-y
\
libigc-dev
intel-igc-cm
libigdfcl-dev
libigfxcmrt-dev
level-zero-dev
Installing out-of-tree drivers for GPU

The out-of-tree driver may be useful in scenarios such as:
GPU debugging
Accessing the latest Intel updates that have not yet been upstreamed
Situations where other constraints prevent you from updating your base operating system or kernel
Note
Intel’s out-of-tree driver is not validated on top of the default kernel provided with Ubuntu 23.04. If you plan to use GPU debugging, use Ubuntu 22.04 LTS HWE and the out-of-tree kernel module.
If you would like to try the new drivers and GPU debugging in a virtual machine (VM) without modifying the default Ubuntu 23.04 experience, see
Configuring the Isolated Desktop Solution
.
Installation procedure:
Install the Ubuntu Desktop 22.04 LTS HWE generic kernel.
sudo
apt
update
&&
sudo
apt
install
-y
--install-suggests
linux-generic-hwe-22.04
Update the GRUB boot loader, if necessary, to set the new kernel as the default.
Reboot the system for the kernel change to take effect.
sudo
reboot
Verify that the system is using the specified generic kernel.
uname
-r
Install DKMS and kernel header files.
sudo
apt
update

sudo
apt
-y
install
\
gawk
\
dkms
\
linux-headers-
$(
uname
-r
)
\
libc6-dev
Install the out-of-tree kernel module.
sudo
apt
install
-y
intel-i915-dkms
sudo
reboot
-h
now
Reboot the system to start using the new out-of-tree i915 module.
sudo
reboot
To verify whether your GPU is working with the i915 driver, check the display hardware connected to your system using the Data Center
verification
procedure. If any issues arise, search the
dmesg
logs for
drm
and
i915
entries to diagnose the problem.
©Intel Corporation
Terms of Use
*Trademarks
Privacy
Cookies
Supply Chain Transparency
Site Map
-------
.

'''''


6. Blender 4.2 LTS: EEVEE¶

Blender 4.2 LTS: EEVEE
¶
The EEVEE render engine was rewritten to allow deeper changes, removing long standing limitations and facilitating future evolution.
Migrating from Older Versions
¶
Most scenes should be automatically adjusted to keep the same look. However, there are some cases that need manual adjustments.
See
migration process
for more details.
Global Illumination
¶
EEVEE now uses screen space ray tracing for every BSDF. There is no longer any limitation to the number of BSDFs.
Materials using the
Blended
render method are now removed from reflections instead of being projected onto the background.
See the manual
### Commit Summary: Raytracing - Blender 4.2 Manual
### Commit Details:
Raytracing
#
Reference
Panel
:
Render ‣ Raytracing
The ray-tracing pipeline goal is to increase the accuracy of surface indirect lighting.
This is done by generating ray from each
BSDF
and finding their intersection with the scene individually.
When disabled, it is replaced by a faster pipeline that uses pre-filtered light-probes.
This fallback mode offers a more visually stable and optimized alternative when visual
fidelity is not the primary goal.
See also
Limitations
.
Method
Determine the tracing method used to find scene-ray intersections and indirect lighting.
Light Probe
:
Use light-probe spheres and planes to find scene intersection.
This option has the lowest tracing cost but relies on manually placed light-probes.
Screen-Trace
:
Trace ray against the screen depth buffer. Fallback to light-probes if ray exits the view.
Resolution
Resolution at which the ray-tracing is performed.
Lower options will be faster and use less memory but will produce blurrier results.
Max Roughness
Maximum roughness a
BSDF
can have to use ray-tracing.
BSDFs with higher roughness will progressively use the
Fast GI Approximation
.
A value of 1 will raytrace every surfaces and disable the Fast GI.
Screen Tracing
#
These settings control the behavior of the screen space ray-tracing.
They are only visible if
Screen-Trace
is the active tracing
Method
.
Precision
Higher values increase precision of the screen space ray-tracing but lower the maximum trace distance.
Increased precision also increases performance cost.
Thickness
How thick to consider the pixels of the depth buffer during the tracing.
Higher values will stretch the reflections and add flickering. Lower values may make the ray miss surfaces.
Denoising
#
Denoising can be enabled to reduce the amount of noise from the raw ray-traced output.
This can help image stability but will also over-blur the final ray-traced output.
Spatial Reuse
Reuse the rays from neighbor pixels.
Can introduce some light leaks across surfaces.
Temporal Accumulation
Accumulate samples by re-projecting the last ray tracing results.
This removes
Fireflies
but also introduces color bias.
Useful for viewport temporal stability or making renders converge faster.
Bilateral Filter
Blur the resolved ray-traced output using a bilateral filter.
Fast GI Approximation
#
Fast GI Approximation is a fallback to the ray-tracing pipeline for
BSDF
with high roughness.
It produces a less noisy output and captures bounce lighting more efficiently than individually traced rays.
This is currently implemented as a screen space effect and will inherit all associated
limitations
.
Method
Determine the method used to compute the fast GI approximation.
Ambient Occlusion
:
Use scene intersections to shadow the distant lighting from light-probes.
This is the fastest option.
Global Illumination
:
Compute global illumination taking into account light bouncing off surrounding objects.
Resolution
Resolution at which the fast GI is computed.
Lower options will be faster and use less memory but will produce blurrier results.
Rays
Number of GI rays per pixel at the specified
Resolution
.
Higher values will reduce noise.
Steps
Number of screen samples per GI ray.
Higher values will reduce the noise amount and increase the quality.
Tip
With a higher step count, there is less chance to miss other surfaces that could reflect or block the light.
This means that the Fast GI
Thickness
parameters can be tweaked to lower values without losing too much light
bounce energy.
Precision
Higher values increase the precision of the scene intersections with the GI rays.
Increased precision also increases performance cost.
Distance
If non-zero, the maximum distance at which other surfaces will contribute to the fast GI approximation.
Thickness Near
Geometric thickness of the surfaces when computing fast GI and ambient occlusion.
Reduces light leaking and missing contact occlusion.
The effectiveness decreases proportionally to the distance from the shading point,
following the inverse square law.
Far
Angular thickness of the surfaces when computing fast GI and ambient occlusion.
Reduces energy loss and missing occlusion of far geometry.
Higher values will make the very thin objects block or reflect too much light.
Bias
Bias the shading normal to reduce self intersection artifacts.
-------
.
Lights
¶
There is no longer a limit to the number of lights in a scene. However, only 4096 lights can be visible at the same time.
Lights are now visible through refractive surfaces. A new transmission influence factor has been added and set to 0 for older files.
Lights now support ray visibility options.
Glossy lighting no longer leaks at the back of objects.
Shadows
¶
Shadows are now rendered using Virtual Shadow Maps. This greatly increases the maximum resolution, reduces biases and simplifies the setup.
Light visibility is now computed using Shadow Map Ray Tracing, providing plausible soft shadows without needing shadow jittering.
Shadow Map biases have been removed and are now computed automatically. A workaround for the shadow terminator issue is planned for future releases.
Contact shadows have been removed since Virtual Shadow Maps are precise enough in most cases.
Shadow clip start has been removed and replaced by an automatic value.
Shading
¶
Shading Modes
¶
Material > Blend Mode
was replaced by
Material > Render Method
.
Blended
corresponds to the former
Alpha Blend
.
Material > Shadow Mode
was replaced by
Object > Visibility > Ray Visibility > Shadow
at the object level.
A
Backface Culling
option for shadow and a
Transparent Shadows
option were added to reduce the performance impact of rendering Virtual Shadow Maps.
Shadows and surfaces with the
Dithered
render method behave the same as the former
Alpha Hashed
method. To reproduce the same behavior as the former
Alpha Clip
option, materials need be modified by adding a
Math
node with mode
Greater Than
.
Blended
materials now have correct rendering ordering of their opaque pixels.
The
Screen-Space Refraction
option was renamed to
Raytraced Transmission
and affects all transmissive BSDF nodes (Translucent BSDF, Subsurface Scattering, Refraction BSDF, ...).
Displacement
¶
Displacement is now supported with the exception of the
Displacement Only
mode which falls back to
Displacement And Bump
.
See the manual
### Commit Summary: Displacement - Blender 4.2 Manual
### Commit Details:
Displacement
#
Detail can be added to the shape of a surface with displacement shaders.
To create displacement, connect a
Displacement
or
Vector Displacement
node
to the displacement input of the Material Output node. Procedural, painted or baked textures can
then be connected to these nodes.
Typical displacement node setup.
#
Three displacement methods exist, with varying accuracy, performance and memory usage.
The displacement method can be set per material in the
Material Settings
.
Bump only, displacement only, and displacement and bump combined.
#
Bump Only
#
The least accurate but most memory efficient method is bump mapping.
This method does not actually alter the mesh surface, but merely changes the shading to make it seem so.
Bump maps are often used to add smaller details on a model, for example pores or wrinkles on skin.
For baked bump maps, 8-bit images are commonly used. However, 16 or 32-bit float maps can provide
better looking results. When using image textures use Cubic interpolation to avoid stepping artifacts,
these are more visible for bump maps than other types of textures.
Important
Because bump mapping is a fake effect, it can cause artifacts if the actual shape of the geometry
is too different from the bump mapped shape. If this happens the strength of bump mapping should
be reduced or actual displacement should be used.
Displacement Only
#
Cycles Only
The most accurate and memory intensive displacement method is to apply true displacement to
the mesh surface.
It requires the mesh to be finely subdivided, which can be memory intensive.
Adaptive Subdivision
is the best way
to subdivide the mesh, so that exactly the right amount of subdivision is used depending on
the distance of the object to the camera.
For baked displacement maps, best results are achieved with 16 or 32-bit float maps,
as 8-bit images often can not represent all the necessary detail.
See also
The
Displace Modifier
can also be used to displace a mesh.
Displacement and Bump
#
Both methods can be combined to use actual displacement for the bigger displacement and
bump for the finer details. This can provide a good balance to reduce memory usage.
Once you subdivide the mesh very finely, it is better to use only actual displacement.
Keeping bump maps will then only increase memory usage and slow down renders.
-------
Thickness
¶
A new Thickness output has been introduced. This allows better modeling of Refraction, Subsurface Scattering and Translucency. Some materials might need adjustment to keep the same appearance. This replaces the former
Refraction Depth
option. (
PR#120384
)
Subsurface Scattering
¶
The new Subsurface Scattering implementation supports any number of BSSRDF nodes with arbitrary radii.
Subsurface Scattering no longer leaks between objects and has no energy loss.
Subsurface translucency is always computed and the associated option has been removed.
Light Probes
¶
The render panel options have been split between the light probe data panel and the world data panel.
Volume Light Probes
¶
The new volume light probes baking converges faster with higher resolutions.
Baking is now done at the object level, allowing volume light probes to be edited after baking and linked from other files. Optionally they can bake sky visibility for dynamic sky lighting.
There is a new rejection algorithm and flood fill to reduce shadow leaking.
Volume light probes now affect volume shading. However object volumes and world volumes are not yet captured by the volume light probes.
Sphere Light Probes
¶
Sphere light probes are now dynamic and get updated as they move.
Filtered versions for rough surfaces are now firefly-free. The look of the reflections can appear less "foggy" than in the previous EEVEE version.
Volumes
¶
World volumes are no longer limited to clipping distance, which means they can completely block sun lights and the world background. Older file can be converted using the conversion operator in the Help menu or in the
World > Volume
panel. (
PR#114062
)
Volume lighting is now dithered to avoid flickering.
EEVEE now maximizes the depth range automatically if no world is present.
Mesh objects now have correct volume intersection instead of rendering bounding boxes.
Evaluation of many small volume objects has been optimized.
World
¶
Sun light contribution is now automatically extracted from HDRI lighting.
See the manual
### Commit Summary: World Settings - Blender 4.2 Manual
### Commit Details:
World Settings
#
The world environment can emit light, ranging from a single solid color
to arbitrary textures.
In EEVEE, the world lighting contribution is stored into an internal
Light Probe
.
This makes the lighting less precise than Cycles.
Mist Pass
#
Reference
Panel
:
World ‣ Mist Pass
Note
The mist pass must be enabled in the View Layer tab
of the
Properties Editor
before the settings below are available in the World tab.
Mist can greatly enhance the illusion of depth in your rendering. To create mist,
Blender generates a render layer with a depth map ranging between 0.0 and 1.0
that can be used in the Compositor to generate a mist effect.
Start
The distance from the camera at which the mist starts to fade in.
Depth
The distance from
Start
of the mist, that it fades in over.
Objects further from the camera than
Start + Depth
are completely hidden by the mist.
Falloff
The curve function that controls the rate of change of the mist’s strength further and further into the distance.
Quadratic
:
Uses the same calculation as light falloff (
\(1\over{x^2}\)
) and provides the smoothest
transition from transparent (0.0) to opaque (1.0).
Linear
:
Has a steeper start than quadratic (
\(1\over{x}\)
).
Inverse Quadratic
:
Has the steepest start (
\(1\over{\sqrt{x}}\)
) and approaches 1.0 faster than the other two functions.
Tip
A visualization can be activated in the
Camera ‣ Viewport Display
panel.
Mist example
(
blend-file
).
#
Settings
#
Reference
Panel
:
World ‣ Light Probe
Light Probe
#
Resolution
The resolution used to store the light from the world.
This is equivalent to the resolution for light probe spheres.
See also
Light Probe Sphere
.
Sun
#
EEVEE can separate the light from intense light sources
(e.g. a sun from an outdoor
HDRI
) and
replace them with a sun light. This increases the quality of the lighting as the internal light probes
alone cannot reproduce this type of lighting with enough precision.
Threshold
If non-zero, the maximum value for world contribution that will be recorded inside the world light probe.
The excess contribution is converted to a sun light.
This reduces the light bleeding caused by very bright light sources.
A value of zero will disable this feature and all lighting will be stored inside the internal light probes.
Angle
Angular diameter of the extracted sun light as seen from the Earth.
Use Shadow
Enable shadow casting on the extracted sun light.
See also
The shadow properties control the extracted sun shadows.
They are exactly the same as for a sun light object.
Light Properties
.
-------
.
Image Stability
¶
Improvements in viewport image stability through velocity-aware temporal supersampling should help reduce the noise and aliasing issues that were previously present.
Clamping options have been enhanced to help prevent fireflies and to better match Cycles. The properties remain independent for each renderer.
Motion Blur
¶
Motion blur is now partially supported in the viewport, through the camera view.
Shutter curves are now supported.
Depth of Field
¶
Depth of field was rewritten and optimized, removing the
Denoise Amount
and
High Quality Slight Defocus
settings which are now always on.
User Interface
¶
The panels and properties have been adjusted to be closer to Cycles.
The object
Display As
property set to
Wire
or
Bounds
will now render in
Render
viewport shading mode. (
1f2b935146
### Commit Summary: EEVEE-Next: Display volumes in render mode if drawtype is not solid · 1f2b935146 - blender - Blender Projects
### Commit Details:
This is for consistency with cycles behavior. This doesn't
change the behavior for final render.
-------
)
Cycles and EEVEE now share the
Cast Shadow
property.
Multithreaded Shader Compilation
¶
There's a new
Max Shader Compilation Subprocesses
option in
Preferences > System > Memory & Limits
that allows using multiple subprocesses to speed-up shader compilation on Windows and Linux.
Platform compatibility
¶
There are some platforms that are currently not working as expected at the initial release. Improvements to hardware support will become available in future updates.
Apple Intel iGPU can leave red spots when ray tracing is enabled. [
#122361
]
Windows on Intel HD 5000 series of GPU doesn't render dithered materials [
#122837
]
Linux Mesa AMD RX 7000 series crashes after rendering when motion blur is enabled [
#124044
]

'''''


7. EEVEE migration from older versions to Blender 4.2 LTS¶

EEVEE migration from older versions to Blender 4.2 LTS
¶
In Blender 4.2 LTS, a major rewrite of EEVEE was released. While most of the features are kept compatible, some were completely rewritten and the compatibility is broken. This page explains the porting procedures and how to reproduce similar setup between both engine versions.
World
¶
World volume now completely blocks distant light (world and sun lights) (
PR#114062
). To keep the same appearance, the volume needs to be converted to a physical object. A conversion operator is provided in the top bar help menu or in the
World > Volume
panel. The operator will only appear if there is something to convert.
World light now casts shadows from an extracted light position. When loading older files,
World > Settings > Sun > Shadow
is disabled to preserve their appearance.
Shadows
¶
Previous settings for sun lights shadow resolution cannot be automatically converted, they are replaced by a new setting
Data > Light > Shadow > Resolution Limit
(see
documentation
### Commit Summary: Light Settings - Blender 4.2 Manual
### Commit Details:
Light Settings
#
Reference
Panel
:
Properties ‣ Light
Shader Editor ‣ Sidebar ‣ Options
Next to lighting from the background and any object with an emission shader,
lights are another way to add light into the scene.
The difference is that they are not directly visible in the rendered image,
and can be more easily managed as objects of their own type.
Common
#
Light settings
for all renderers.
EEVEE
#
Specular
Specular Light intensity multiplier. Use it for artistic control. Defines the intensity with which the light object
will be visible in reflections on the surface of specular objects, like metals or mirrors.
Setting this to 0 will make the light object disappear from specular reflections. Keep it exactly at 1.0 for
photo-realistic results.
Custom Distance
If enabled, uses
Distance
as the custom attenuation distance instead of global Light Threshold.
In order to avoid long setup times, this distance is first computed
automatically based on a light threshold. The distance is computed
at the light origin and using the inverse square falloff.
Distance
Specifies where light influence will be set to 0.
See also
Global
Light Threshold
.
Note
The light’s
Power
/
Strength
affect both specular and diffuse light.
Shadows
#
Common Parameters
#
Clip Start
Distance from the light object at which the shadow map starts.
Any object which is closer to the light than Clip Start will not cast shadows.
Clip Start
is only available for point, spot and area lights.
Bias
Bias applied to the depth test to reduce self-shadowing artifacts.
This determines, what size of surface details (for example, bumps) will cast shadows on the object itself.
If this value is low, small bumps will cast shadows on the object’s surface.
This might cause jagged shadow edge between the sunny and shadowy side of the object,
but it can be smoothed out by turning on
Soft Shadows
Contact Shadows
#
This type of shadow exists to fix light leaking caused by bias or shadow map undersampling.
It uses the depth buffer to find occluders (just like Screen Space Reflections).
However, just like Screen Space Reflections it has the same limitations,
namely, unknown object thickness and effect disappearing at screen edges.
Tip
The distance of action of Contact Shadows should remain quite small.
They are not accurate enough to shadow the entire scene.
Distance
World space distance in which to search for screen space occluder.
Bias
Bias applied to the ray tracing to reduce self-shadowing artifacts.
Thickness
Pixel thickness used to detect occlusion, treating any potential occluder as this thick.
Cascaded Shadow Map
#
Sun lights usually illuminate a large scene with many objects, some close, some far away.
To optimize shadow calculation in this situation, a technique called Cascaded Shadow Maps is used.
The distance between the camera’s near clip and far clip point is divided into as many equal intervals
(called cascades) as you set the Count parameter below.
For each cascade a different resolution shadow will be displayed: higher resolution for closer cascades and lower
resolution for distant ones.
Do note that cascade shadow maps are always updated because they depend on the camera position or your view origin in
the 3D-Viewport. This means they have a high performance impact.
Note
In orthographic view the cascades cover the whole depth range of the camera
with an evenly distributed shadow precision.
Count
Number of cascades to use. More cascades means better shadow precision but a lower update rate.
Fade
When the Fade is greater than 0, the size of each cascade (distance interval) is increased so that neighboring
cascades overlap. Then a fade is applied in the overlapping region to provide a smooth transition between cascades.
Higher values mean the cascade’s size is increased more, which decreases the available shadow resolution
inside the cascade since some of it is used in the overlapping region.
Max Distance
Distance away from the view origin (or camera origin if in camera view) to cover by the cascades.
If the view far clip distance is lower than Max Distance, the view far clip distance will be used.
Only works in perspective view.
Distribution
Puts more resolution towards the near clip plane. Only works in perspective view.
See also
Limitations
.
Limitations
#
Unlike in Cycles, the
Size
of spot lights does not change the softness of the cone.
-------
). If the previous resolution was much lower than the default value of the new setting, it might cause a huge performance penalty or trigger the
Shadow buffer full
error. Increasing the
Resolution Limit
will lower the resolution and fix the issue.
Render Settings > Shadow > Soft Shadows
is now a per light option
Data > Light > Shadow > Jitter
. This option is disabled by default since shadow map ray tracing can output plausible soft shadows at a much lower cost. If the shadow map ray tracing doesn't give satisfactory results, jittered shadows can be re-enabled on a per light basis.
Jittered shadows are not visible by default in the viewport because of their cost. Turn on
Render Settings > Sampling > Viewport > Jittered Shadows
to enable them back.
Contact Shadows
is no longer available, since the accuracy of the new shadow maps is enough in most cases. For lights that were set up to rely heavily on
Contact Shadows
, the
Resolution Limit
might need to be lowered to avoid light leaking.
Materials
¶
Material
Blend Mode
was replaced by
Render Method
. To reproduce the same behavior as the former
Alpha Clip
or
Opaque
, materials need be modified by adding a
Greater Than
Math mode. This is automatically handled for simple materials, but more complex setups need to be converted manually. See below for an example of how to port more complex mixing.
Converting a complex alpha clip material to work with the new version of EEVEE
Material
Shadow Mode
was replaced by
Object > Visibility > Ray Visibility Shadow
. This new setting is turned off if all materials assigned to an object were using
Shadow Mode > None
option.
If
Shadow Mode
was
Alpha Clip
, it might have been automatically handled along side the
Blend Mode
compatibility. Otherwise the material node-tree might need similar adjustment.
If
Shadow Mode
was
Opaque
, the new
Material > Settings > Transparent Shadows
is turned off.
If
Shadow Mode
was
None
, the material node tree should have been automatically modified to disable shadows. See below for how to do it manually.
Setup to disable shadow per material
The introduction of the new see
Thickness workflow
### Commit Summary: No title found
### Commit Details:
No details found (Error: Page not found)
-------
can affect materials using transmissive shader nodes.
Automatic conversion is done for
Refraction Depth
if the material was using
Screen Space Refraction
.
Translucent BSDF now uses a more accurate approximation when thickness is not zero. To reproduce the same results as in 4.1, a
Value
node with a value of 0 need to be connected to the
Thickness
socket of the material output node.
Subsurface Translucency
has been removed as it is now always evaluated. However, it relies on the
Thickness
socket output to determine the inner absorption of the object. Shadow maps can still be use to refine this thickness by enabling
Material > Settings > Thickness From Shadow
. This can help achieve similar results as in 4.1.
Screen Space Refraction
and Light probe planes are no longer supported in materials using
Blended
render method (former
Alpha Blend
). The only workaround for now is to use
Dithered
render method and enable
Render Settings > Raytracing
. There are discussions adding new refraction option for these materials (
#122979
).
Render Settings
¶
Volumes now receive indirect light. When loading older files,
Clamping > Volume > Indirect Light
is set to near zero to preserve their appearance. To enable indirect light, reset the aforementioned property to the default value.
Light Probes
¶
Light probe volumes samples location and influence volume have changed. They might need to be manually scaled up to avoid light leaking.
Light probe volumes now have a
Surfel Resolution
option that might need some tweaking to be able to bake older scene (refer to the
manual
### Commit Summary: Light Probe Volume - Blender 4.2 Manual
### Commit Details:
Light Probe Volume
#
A volume probe records the light incomming from all directions at many locations inside a volume.
The light is then filtered and only the diffuse light is recorded.
The capture point positions are visible as an overlay when the Irradiance Volume object is selected.
If an object is not inside any Irradiance Volume, or if the indirect lighting has not been baked,
the world’s diffuse lighting will be used to shade it.
Tip
When lighting indoor environments, try to align grids with the room shape.
Try not to put too much resolution in empty areas or areas with a low amount of lighting variation.
Bad samples can be fixed by adding a smaller grid near the problematic area.
Large scenes may require using many volumes with different level of details.
Properties
#
Reference
Panel
:
Object Data ‣ Probe
Intensity
Intensity factor of the recorded lighting.
Making this parameter anything other than 1.0 is not physically correct.
To be used for tweaking, animating or artistic purposes.
Sampling Bias
Normal Bias
Offset sampling of the irradiance grid in the surface normal direction to reduce light bleeding.
Can lead to specular appearance of diffuse surface if set too high.
View Bias
Offset sampling of the irradiance grid in the viewing direction to reduce light bleeding.
Can lead to view dependant result if set too high. Prefer this if camera is static.
Facing Bias
When set to zero, avoids capturing points behind the shaded surface to bleed light onto
the shaded surface. This produces non-smooth interpolation when the capture resolution is high.
Increasing this bias will make the interpolation smoother but also introduce some light bleeding.
Validity & Dilation
During the baking process, a validity score is assigned to each capture point.
This score is based on the number of back-faces hit when capturing the incoming lighting.
Only materials with
Single Sided
turned on for Light Probe Volumes will reduce the validity score.
Validity Threshold
Capture points with validity below this threshold will be ignored during lighting interpolation.
This remove the influence of capture points trapped inside closed geometry, reducing the artifacts they produced.
Dilation Threshold
Capture points with validity below this threshold will have their data replaced using valid neighbors.
Radius
Radius in capture points in which to search for a valid neighbor.
Bake
#
Light probe volume light data is static and needs to be manually baked.
Once baked, the data is stored inside the object data-block and can be moved, animated and linked
between blender files.
Note
Baking uses the render visibility of the objects in the scene.
During baking, the scene is converted into a different representation to accelerate light transport.
This representation can be very memory intensive and prevents baking if it cannot fit inside the GPU memory.
There are a few way to deal with this issue:
Larger scenes should be divided into smaller sections or use different level of details.
Reduce
Surfel Resolution
.
Turn off the light probe volume visibility option on objects that have little to no effect in the bake.
Tip
The internal scene representation can be inspected using the
Debug
Value
3, 4 and 5.
Resolution
#
Resolution X, Y, Z
Spatial resolution for volumetric light probes is determined per probe.
The local volume is divided into a regular grid of the specified dimensions.
The lighting will be captured for each cell in this grid.
Bake Samples
Number of ray directions to evaluate when baking.
This increases the baking time proportionally to the size of the scene representation.
Surfel Resolution
Number of surfels to spawn in one local unit distance.
Higher values increase quality, but have a huge impact on memory usage.
Tip
A good value is twice the maximum
Resolution
.
Capture
#
Capture Distance
Distance around the light probe volume that will be captured during the bake.
A distance of 0 will only considered the inside of the volume.
World Contribution
Bake incoming light from the world instead of just visibility for more accurate lighting,
but lose correct blending to surrounding irradiance volumes.
Indirect Light Contribution
Capture light bounces from light source.
Emission Contribution
Capture emissive surfaces when baking.
Clamping
#
Direct Light
Clamp incoming direct light. 0.0 disables direct light clamping.
Here direct light refers to the light that bounces only once (from the light object)
or light coming from emissive materials.
Indirect Light
Clamp incoming indirect light. 0.0 disables indirect light clamping.
Here indirect light refers to the light that bounces off a surface after the first bounce (from the light object)
or during the first bounce if the light comes from emissive materials.
Tip
Setting
Clamp Indirect
to a very non-zero value will effectively only record the first light bounce leading.
Offset
#
In order to reduce artifacts caused by bad capture point positioning,
the bake process adjusts their location before capturing light.
It moves the capture points slightly away from surrounding surfaces and tries to move them out of objects
if they are not too far bellow the surface.
Surface Offset
Distance to move the capture points away from surfaces.
Search Distance
Distance to search for valid capture positions if the capture point is near the back-face of a single-sided object.
Note
Only materials with
Single Sided
turned on for Light Probe Volumes will move capture point position.
Viewport Display
#
Data
Show the captured light using small diffuse spheres of the given size.
Influence
Show the influence bounds in the 3D Viewport. The inner sphere is where the falloff starts.
Clipping
Show the clipping distance in the 3D Viewport.
-------
for more detail).
Light probe volumes object now contains the baked lighting. Baking needs to be performed again using
Scene > Light Probes > Bake All Light Probe Volumes
. Baking can also be performed on a per volume basis using
Data > Bake > Bake Light Cache
Light probe spheres option has been moved to
World > Settings > Light Probe
and
Scene > Light Probes
. Their meaning has change as they now correspond to square textures instead of cube textures.
Light probe spheres and planes only record diffuse lighting. All specular & glossy lighting is converted to diffuse lighting. This is a limitation currently being investigated.
Light probe visibility collections have been removed in favor of per object visibility option. Manual conversion is needed.
Bloom
¶
The Bloom feature and its associated render pass has been removed in favor of the realtime compositor
Glare
node with
Bloom
glare type. Old files need to be manually adjusted by adding the
Glare
node in the compositor setup. The compositor result can be previewed in the viewport by enabling the compositor in the Shading pop-over.

'''''


8. Blender 4.2 LTS: Extensions¶

Blender 4.2 LTS: Extensions
¶
Extensions are add-ons, themes, and potentially anything else that can extend Blender’s native functionality (e.g. key maps, assets). An extension is an archive (.zip) containing the files and a manifest with metadata such as license, copyright, permissions, useful links, etc.
Announcement
.
User manual
### Commit Summary: How to Create Extensions - Blender 4.2 Manual
### Commit Details:
How to Create Extensions
#
Creating an extension takes only a few steps:
Open the directory containing the add-on code or theme file.
Add a
blender_manifest.toml
file with all the required meta-data
(name,
maintainer,
...)
.
Use the
Blender command-line tool
to build the extension .zip file.
How to publish to the
Blender Extensions Platform
:
Install from Disk
to test if everything is working well.
Upload the .zip file
(this step requires Blender ID).
The extension will be held for
review
,
and published once the moderation team approves it.
Extension files
#
An extension is shared as a
.zip
archive containing a manifest file and other files.
The expected files depend on the extension type.
Add-on extension
#
Add-ons
need at least the manifest and an
__init__.py
file,
while more complex add-ons have a few different .py files or wheels together.
my_extension-0.0.1.zip
├─ __init__.py
├─ blender_manifest.toml
└─ (...)
Theme extension
#
A theme extension only needs the manifest and the .xml theme file.
my_extension-0.0.1.zip
├─ blender_manifest.toml
└─ theme.xml
Note
Extensions can optionally have all its files inside a folder (inside the archive).
This is a common behavior when saving a repository as ZIP from version-control platforms.
Manifest
#
A manifest is a file with all the meta-data required for an extension to be processed.
This example is a good starting point to the
blender_manifest.toml
that should be inside the
.zip
.
schema_version
=
"1.0.0"
# Example of manifest file for a Blender extension
# Change the values according to your extension
id
=
"my_example_extension"
version
=
"1.0.0"
name
=
"Test Extension"
tagline
=
"This is another extension"
maintainer
=
"Developer name <
[email protected]
>"
# Supported types: "add-on", "theme"
type
=
"add-on"
# Optional link to documentation, support, source files, etc
# website = "https://extensions.blender.org/add-ons/my-example-package/"
# Optional list defined by Blender and server, see:
# https://docs.blender.org/manual/en/dev/advanced/extensions/tags.html
tags
=
[
"Animation"
,
"Sequencer"
]
blender_version_min
=
"4.2.0"
# # Optional: Blender version that the extension does not support, earlier versions are supported.
# # This can be omitted and defined later on the extensions platform if an issue is found.
# blender_version_max = "5.1.0"
# License conforming to https://spdx.org/licenses/ (use "SPDX: prefix)
# https://docs.blender.org/manual/en/dev/advanced/extensions/licenses.html
license
=
[
"SPDX:GPL-3.0-or-later"
,
]
# Optional: required by some licenses.
# copyright = [
#   "2002-2024 Developer Name",
#   "1998 Company Name",
# ]
# Optional list of supported platforms. If omitted, the extension will be available in all operating systems.
# platforms = ["windows-x64", "macos-arm64", "linux-x64"]
# Other supported platforms: "windows-arm64", "macos-x64"
# Optional: bundle 3rd party Python modules.
# https://docs.blender.org/manual/en/dev/advanced/extensions/python_wheels.html
# wheels = [
#   "./wheels/hexdump-3.3-py3-none-any.whl",
#   "./wheels/jsmin-3.0.1-py3-none-any.whl",
# ]
# # Optional: add-ons can list which resources they will require:
# # * files (for access of any filesystem operations)
# # * network (for internet access)
# # * clipboard (to read and/or write the system clipboard)
# # * camera (to capture photos and videos)
# # * microphone (to capture audio)
# #
# # If using network, remember to also check `bpy.app.online_access`
# # https://docs.blender.org/manual/en/dev/advanced/extensions/addons.html#internet-access
# #
# # For each permission it is important to also specify the reason why it is required.
# # Keep this a single short sentence without a period (.) at the end.
# # For longer explanations use the documentation or detail page.
#
# [permissions]
# network = "Need to sync motion-capture data to server"
# files = "Import/export FBX from/to disk"
# clipboard = "Copy and paste bone transforms"
# Optional: build settings.
# https://docs.blender.org/manual/en/dev/advanced/extensions/command_line_arguments.html#command-line-args-extension-build
# [build]
# paths_exclude_pattern = [
#   "__pycache__/",
#   "/.git/",
#   "/*.zip",
# ]
Required values:
blender_version_min
:
Minimum supported Blender version - use at least
4.2.0
.
id
:
Unique identifier for the extension.
license
:
List of
licenses
,
use
SPDX license identifier
.
maintainer
:
Maintainer of the extension.
name
:
Complete name of the extension.
schema_version
:
Internal version of the file format - use
1.0.0
.
tagline
:
One-line short description - cannot end with punctuation.
type
:
“add-on”, “theme”.
version
:
Version of the extension - must follow
semantic versioning
.
Optional values:
blender_version_max
:
Blender version that the extension does not support, earlier versions are supported.
website
:
Website for the extension.
copyright
:
Some licenses require a copyright, copyrights must be “Year Name” or “Year-Year Name”.
tags
:
List of tags. See the
list of available tags
.
platforms
:
List of supported platforms. If omitted, the extension will be available in all operating systems.
The available options are
[“windows-x64”, “windows-arm64”, “macos-x64”, “macos-arm64”, “linux-x64”]
wheels
:
List of relative file-paths
Python Wheels
.
permissions
:
Add-ons can list which resources they require. The available options are
files
,
network
,
clipboard
,
camera
,
microphone
.
Each permission should be followed by an explanation (short single-sentence with no end punctuation (
.
)).
Optional values for “build”:
These values are only used by the
build
sub-command.
paths
:
A list of file-paths relative to the manifest to include when building the package.
paths_exclude_pattern
:
A list of file-path patterns to exclude include when building the package.
The pattern matching is compatible with
gitignore
.
Note that setting this value isn’t supported when
paths
is also declared.
If the
[build]
table isn’t declared the following default is used:
[build]
paths_exclude_pattern
=
[
"__pycache__/"
,
".*"
,
"*.zip"
,
]
Reserved:
These values
must not
be declared in a TOML and are reserved for internal use.
[build.generated]
Note
All the values present in the manifest file must be filled
(i.e., cannot be empty, nor text
""
, nor list
[]
).
If you don’t want to set one of the optional values just exclude it from the manifest altogether.
Command-line
#
Extensions can be built, validated & installed via command-line.
To build the package defined in the current directory use the following commands:
blender
--command
extension
build
See
build
docs.
—
To validate the manifest without building the package:
blender
--command
extension
validate
You may also validate a package without having to extract it first.
blender
--command
extension
validate
add-on-package.zip
See
validate
docs.
See also
Extensions Command Line Arguments
.
Third party extension sites
#
If you want to host the extensions yourself, see the
Creating an Extensions Repository
docs.
-------
.
Initial commit (
c4a0bbb1f4
### Commit Summary: Extensions: Support online extensions and move add-ons outside Blender · c4a0bbb1f4 - blender - Blender Projects
### Commit Details:
The extensions system allows to extend Blender with connectivity to the internet. Right now it means Blender can
discover and install add-ons and themes directly from the internet, and notify users about their updates.

By default this is disabled (opt-in), and users can enable it the first time they try to install an extension or visit
the Prefences > Extensions tab. If this is enabled, Blender will automatically check for updates for
extensions.blender.org upon startup.

When will Blender access the remote repositories:

* Every time you open the Preferences → Extensions: ALL the enabled repositories get checked for the latest info (json)
* Every time you try to install by dragging: ALL the enabled repositories get checked for the latest info (json).
* Every time you start Blender: selected repositories get checked for the latest info (json).

------------------

From the Blender code point of view, this means that most of the add-ons and themes originally bundled with Blender
will now be available from the online platform, instead of bundled with Blender. The exception are add-ons which are
deemed core functionality which just happened to be written as Python add-ons.

Links:
* Original Extenesions Platform Announcement:
https://code.blender.org/2022/10/blender-extensions-platform/
* Extensions website:
https://extensions.blender.org/
* User Manual:
https://docs.blender.org/manual/en/4.2/extensions/index.html#extensions-index
* Technical specifications:
https://developer.blender.org/docs/features/extensions/
* Changes on add-ons bundling:
https://devtalk.blender.org/t/changes-to-add-on-bundling-4-2-onwards/34593
------------------

This PR does the following:

* Move extensions out of experimental.
* No longer install `scripts/addons` & `scripts/addons_contrib`.
* Add `scripts/addons_core` to blender's repository.

These add-ons will still be bundled with Blender and will be always enabled in the future, with their preferences
moved to be more closely integrated with the rest of Blender. This will happen during the remaining bcon2 period.
For more details, see
#121830
From scripts/addons:

* copy_global_transform.py
* hydra_storm
* io_anim_bvh
* io_curve_svg
* io_mesh_uv_layout
* io_scene_fbx
* io_scene_gltf2
* pose_library
* ui_translate
* viewport_vr_preview

Extra: bl_pkg (scripts/addons_contrib)

Note: The STL (legacy) add-on is going to be moved to the extensions platform. There is already a C++ version on core
which is enabled by default.

All the other add-ons are already available at extensions.blender.org. To use them you need to:

* Go to User Preferences > Extensions
* You will be greated with an "Online Extensions" message, click on "Enable Repository".
* Search the add-on you are looking for (e.g, Import Images as Planes).
* Click on Install

Over time their maintaince will be transferred over to the community so their development can carry on. If you used to
help maintain a bundled add-on please read:
https://devtalk.blender.org/t/changes-to-add-on-bundling-4-2-onwards/34593
Ref:
!121825
-------
).
Bundling
¶
When working offline or in a more controlled environment, it may be useful to provide a set of extensions to all users. These can be served from the
default read-only System repository
### Commit Summary: Deploying Blender in Production - Blender 4.2 Manual
### Commit Details:
Deploying Blender in Production
#
This page contains tips for setting up Blender in environments
such as animation studios and schools.
These environments often have special requirements regarding
security, automated deployment and customization.
Installing Blender
#
Blender downloads can be extracted to any directory on the system, as
a self contained installation. Multiple Blender versions can
co-exist on the same system, and deployment can be automated using
standard file management tools.
New Blender versions may add, remove or change functionality that
affects the results of production files. For a given project, it is
advisable to use a single
LTS
version
of Blender. LTS versions receive bug fixes for two years.
Working Offline
#
For security or other reasons, workstation may not have internet access.
By default Blender does not access the internet, however this can be
enabled in the System preferences with the
Online Access
option.
Working offline can be enforced by running with the
--offline-mode
command line argument
. Users
will then be unable to enable online access in the preferences.
Note
Add-ons that follow this setting will only connect to the internet if enabled.
However, Blender cannot prevent third-party add-ons from violating this rule.
Bundling Extensions
#
When working offline or in a more controlled environment, it may be useful
to provide a set of extensions to all users. For this there is a default
read-only System repository. This repository can for example be located
on a read-only network drive or in a system directory.
System repository
#
The
$BLENDER_SYSTEM_EXTENSIONS
environment variable
controls the default location. This should point to a directory, within
which a
system
directory should exist.
Extensions packages should be extracted in this
system
directory,
with a resulting path like this:
$BLENDER_SYSTEM_EXTENSIONS
/system/my-addon/blender_manifest.toml
In the Extensions preferences, it’s possible to manually set a custom
directory for the default System repository, or to create multiple
repositories.
Bundling Scripts
#
Besides extensions, it’s possible to bundle scripts for presets,
application templates, legacy add-ons, as well as scripts run on startup.
Script directories can be manually added in the File Paths preferences.
The
$BLENDER_SYSTEM_SCRIPTS
can also be used to add a script directory
without modifying the preferences.
These script directories are expected to contain specific directories
like
presets
,
addons
and
startup
for different types of
scripts. See
Path Layout
for a complete list.
Startup Scripts
#
The Blender Python API can be used to customize Blender. This includes
changing preferences, changing the startup file and adding UI elements.
For example, a script can enable add-ons for every user.
$BLENDER_SYSTEM_SCRIPTS
/startup/enable_addons.py
def
register
():
import
addon_utils
addon_utils
.
enable
(
"my-addon"
)
def
unregister
():
pass
if
__name__
==
"__main__"
:
register
()
Application Templates
#
Application Templates
can be used to set up Blender for particular
tasks or projects, separate from the default configuration. When
creating a new file the user can choose the template.
The files are expected to be placed in the system script directories like this:
$BLENDER_SYSTEM_SCRIPTS
/startup/bl_app_templates_system/MyTemplate/__init__.py
$BLENDER_SYSTEM_SCRIPTS
/startup/bl_app_templates_system/MyTemplate/startup.blend
Legacy Add-ons
#
Add-ons that have not been converted to become an extension yet need
to be placed in the
addons
script directory.
For example, an add-on could be located at:
$BLENDER_SYSTEM_SCRIPTS
/addons/simple_addon.py
$BLENDER_SYSTEM_SCRIPTS
/addons/complex_addon/__init__.py
VFX Platform
#
Blender follows the
VFX reference platform
,
which means it is able to run on the same systems as other VFX software
and exchange image, volume and scene files with them.
Python Version
#
Blender and the
by module
are only compatible
with a single Python version. This makes it possible for add-ons and VFX software
in general to only have to target a single Python version.
Blender bundles a complete Python installation and does not interact with the
system Python by default. This can be changed with the
--python-use-system-env
command line argument
, if care is
taken to set up a compatible Python version.
-------
.

'''''


9. Blender 4.2 LTS: Geometry Nodes¶

Blender 4.2 LTS: Geometry Nodes
¶
Geometry Nodes
¶
The
Realize Instances
node now supports partially realizing the geometry (
1db538683d
### Commit Summary: Geometry Nodes: add selection and depth options to Realize Instances node · 1db538683d - blender - Blender Projects
### Commit Details:
Previously, the Realize Instances node would always realize everything in the geometry.
Now it's possible to more selectively realize parts of the geometry:
* One can choose which top level instances should be realized.
* The realization depth can be controlled per top-level instance. For example, if there are
  5 top level instances, each of which contains 10 other instances, it's now possible to
  realize only one level so that one ends up with 50 instances.

#116582
-------
).
Some sampling nodes now support a Group ID input to process the input geometry in multiple pieces.
Sample Nearest Surface
(
75e9056cac
### Commit Summary: Geometry Nodes: support group ids in Sample Nearest Surface node · 75e9056cac - blender - Blender Projects
### Commit Details:
This adds group ids to the `Sample Nearest Surface` node. This allows e.g. finding
the closest point on a specific mesh island.

Three new sockets are added:
* `Group ID`: Is evaluated on the face domain and splits the input mesh into  multiple
  parts, each with its own id.
* `Sample Group ID`: Determines in which group the closest nearest surface is detected.
* `Is Valid`: Outputs true if a nearest surface was found, it's false if the group is empty.

#118150
-------
).
Geometry Proximity
(
0494605e7e
### Commit Summary: Geometry Nodes: support group ids in Geometry Proximity node · 0494605e7e - blender - Blender Projects
### Commit Details:
This is the same
75e9056cac
but for the Geometry Proximity node.

#118467
-------
).
The
Remove Named Attribute
node now supports removing multiple attributes
  that have the same prefix or suffix
  (
6c46178a7f
### Commit Summary: Geometry Nodes: support wildcard in Remove Named Attribute node · 6c46178a7f - blender - Blender Projects
### Commit Details:
This adds support for removing multiple named attributes from a geometry at once
using a string pattern that can contain a single wildcard character (`*`).

Using the pattern `sim_*` removes all attributes with the `sim_` prefix for example.

The most difficult design issue here is the decision of what pattern matching language
to use. In the end we only settled on the lowest common denominator for now. This
is already very useful and does not limit us much in the future if we want to support
more complex pattern matching. Once we support lists, some of the use-cases can
also be solved more generally without extra functionality in the Remove Named Attribute
node.

Different pattern matching languages have been discussed before:
https://devtalk.blender.org/t/string-pattern-matching-language-in-blender-and-geometry-nodes/27410
#118258
-------
).
The
Capture Attribute
node now supports capturing multiple attributes at once (
28cef56ad2
### Commit Summary: Geometry Nodes: support capturing multiple attributes at once · 28cef56ad2 - blender - Blender Projects
### Commit Details:
By capturing multiple attributes with one node, the user can make sure that those
are evaluated together in the same context. This can be quite a bit more efficient
compared to capturing multiple fields separately (also because we don't optimize
grouping multiple capture nodes together yet).

The change is fully backward compatible. Forward compatibility has been added
for some cases. Especially, files created in older versions that are saved with this
newer version will still work in the older version.

Co-authored-by: Hans Goudey
#121665
-------
).
The
Store Named Attribute
node can now write 8-bit integer attributes
  (
1681e55114
### Commit Summary: Geometry Nodes: Add 8-bit integer attribute type to store attribute node · 1681e55114 - blender - Blender Projects
### Commit Details:
We already expose two other types that don't have a directly
corresponding socket type-- float2 and byte colors. This also solves
the inability to write to the nurbs_order attribute in geometry nodes.
Fixes
#119843
#119879
-------
).
The rotation socket workflow is improved with more nodes and sockets.
The
Curve to Points
node now has a rotation instead of vector output socket
(
248dafef74
### Commit Summary: Geometry Nodes: use rotation socket in Curve to Points node · 248dafef74 - blender - Blender Projects
### Commit Details:
Looks like this was forgotten before. Other similar sockets have been converted already.

#120526
-------
).
The new
Axes to Rotation
node simplifies creating a rotation based on two orthogonal axes. Usually those are a normal and a tangent (
25c134fd08
### Commit Summary: Geometry Nodes: new Axes to Rotation node · 25c134fd08 - blender - Blender Projects
### Commit Details:
This adds a new `Axes to Rotation` node which creates a new rotation.
In many cases, the primary and secondary axis inputs are a normal and
tangent of a mesh or curve. This provides a simpler and more direct way
to create this rotation compared to using two `Align Rotation to Vector` nodes.

This more direct way of computing the rotation also allows us to optimize
the case better.

The node rotates one axis (X, Y or Z) to the given primary axis direction. Then
 it rotates around that primary direction to align the second axis to the given
secondary direction. Ideally, both input axes are orthogonal. However, the node
still creates the "best" rotation when they are not orthogonal. If one or the axes
is zero or both are (close to) parallel, the resulting rotation is unstable. There is
not too much the node can do to make it more stable.

#104416
-------
).
Align Rotation to Vector
replaces the now-deprecated
Align Euler to Vector
node,
with better performance and clearer socket types (
462e7aeedd
### Commit Summary: Geometry Nodes: Add Align Rotation to Vector node · 462e7aeedd - blender - Blender Projects
### Commit Details:
A version of "Align Euler to Vector" with the rotation socket
instead of the vector Euler socket. Other than that, and a few
cleanups to use newer math functions, the node is the same.

The old node is just "Deprecated" for now. We could remove
it with versioning, but we can also wait to do that.

In a simple test this node is about 1.7 times faster than the old one.

#118565
-------
).
The new
Rotation
input node allows inserting a constant rotation in a node group (
968b98be56
### Commit Summary: Geometry Nodes: new Input Rotation node · 968b98be56 - blender - Blender Projects
### Commit Details:
This adds a new node input node for a constant rotation.
Similar nodes exist for vector, integer, boolean, etc. already.

#120345
-------
).
There have been a few user interface improvements specific to geometry nodes.
The sockets in the
Repeat
and
Simulation
zone and
Bake
node are now aligned
(
1f30f41af8
### Commit Summary: Geometry Nodes: align input and output sockets in simulation and repeat zone nodes · 1f30f41af8 - blender - Blender Projects
### Commit Details:
This changes the drawing of the zone nodes to align corresponding input
and output sockets. The resulting nodes are smaller and it's easier to see
how data is passed through them.

Drawing aligned sockets is already technically supported for quite a while
already, but we haven't used it so far. Using them for zone nodes seems to
provide benefits only. How we use aligned sockets in other nodes still has
to be discussed more.

This patch only changes run-time data. It doesn't affect what is written to
.blend files.

In the node declaration, aligned sockets are created by tagging a socket
so that it is aligned with the previous socket. This is a bit different from
what we had before where a single socket declaration would be used for
an input and output socket. I think the approach used here works better,
especially in a potential future scenario where the input and output socket
has a different type.

#118335
-------
,
5f02eaae9f
### Commit Summary: Geometry Nodes: use aligned sockets in bake node · 5f02eaae9f - blender - Blender Projects
### Commit Details:
This aligns the corresponding input and output sockets in the Bake node.
A similar change has been done for simulation and repeat zones before in
#118335
.

#121496
-------
).
The
Simulation
zone node now has an overlay showing which frames are baked (
96db947f16
### Commit Summary: Geometry Nodes: show info in simulation node when it is baked · 96db947f16 - blender - Blender Projects
### Commit Details:
This adds the same overlay that already exists for the bake node to the simulation output node.
Without this, it's quite hard to see if the simulation zone is baked or not currently.

#121497
-------
).
The socket list for some nodes is now in the properties panel instead of in an
independent panel. This applies the Bake node and repeat zone, among others
(
0c585a1b8a
### Commit Summary: Geometry Nodes: move socket items ui and operators from Python to C++ · 0c585a1b8a - blender - Blender Projects
### Commit Details:
This has some benefits:
* Nodes with dynamic socket amounts can remain more self-contained
  (2 fewer files to edit with this patch).
* It's easier to reuse existing C++ code, reducing redundancy.

One new thing I'm doing here is to define operators in node files. It seems
reasonable to register operators that belong to a node together with that
node. Without this, code spreads out further than necessary without any real benefit.

This patch affects the simulation zone, repeat zone, bake node and index switch node.

The UI is slightly affected too. Since we had the UI defined in Python before,
it wasn't possible to integrate it into the node properties panel. That is possible
now and looks better anyway. The previous UI was an artifact of technical limitations.

#121178
-------
).
The
Menu Switch
node now has an "extend" socket (
176c6ef329
### Commit Summary: Geometry Nodes: unify menu switch with other nodes with dynamic sockets · 176c6ef329 - blender - Blender Projects
### Commit Details:
This changes the menu switch socket to use the socket-items system
(`NOD_socket_items.hh`) that is already used by the simulation zone, repeat
zone, bake node and index switch node. By using this system, the per-node
boilerplate can be removed significantly. This is especially important as we
plan to have dynamic socket amounts in more nodes in the future.

There are some user visible changes which make the node more consistent with
others:
* Move the menu items list into the properties panel as in
0c585a1b8a
.
* Add an extend socket.
* Duplicating a menu item keeps the name of the old one.

There is also a (backward compatible) change in the Python API: It's now
possible to directly access `node.enum_items` and `node.active_index` instead of
having to use `node.enum_definition.enum_items`. This is consistent with the
other nodes. For backward compatibility, `node.enum_definition` still exists,
but simply returns the node itself.

Many API functions from `NodeEnumDefinition` like
`NodeEnumDefinition::remove_item` have been removed. Those are not used anymore
and are unnecessary boilerplate. If ever necessary, they can be implemented back
in terms of the socket-items system.

The socket-items system had to be extended a little bit to support the case for
the menu switch node where each socket item has a name but no type. Previously,
there was the case without name and type in the index switch node, and the case
with both in the bake node and zones. The system was trivial to extend to this
case.

#121234
-------
).
The Face Neighbors mesh topology node now gives the correct number of unique faces
  (
dd672c38b1
### Commit Summary: Fix #117515: Geometry Nodes: Count of unique face neighbors · dd672c38b1 - blender - Blender Projects
### Commit Details:
Regular topology mapping does not care about deduplication of relations. And
this is correct for a lot of the case where we expect creating difference of this
relations in next operations. But this is not the case for users, since this should
be actually trivial info. Due to this reason, construct full topology map and count
number of unique connections. Performance side: difference linear check and
hash set for different sizes of connections set.

#118848
-------
).
The Mesh Boolean node now has a "float" solver option (
e3f030cce6
### Commit Summary: Geometry Nodes: Add float solver to mesh boolean node · e3f030cce6 - blender - Blender Projects
### Commit Details:
This adds a "Solver" option to the geo boolean node, with the options
Exact and Float.
The current geo boolean node only uses the Exact solver.
This adds the ability to use the faster original floating point boolean solver.
The float solver has issues with coplanar and other coincident geometry,
but is generally much faster than the Exact solver, and users have asked
for this option (which is available in the Boolean Modifier and edit mode
boolean tool).

Like the modifier, the Float solver needs to convert the Mesh to BMesh,
do the operation, and then convert back to Mesh. It also has to do it
iteratively if more than two operands are supplied.

This is the first of a planned series of commits that will add a
new exact boolean solver, based on the Ember paper, as a solver option.
Ember will be much faster than the current exact solver, but may still not
be as fast as float, and also will not handle some non-volume-enclosing
inputs as well as Float, so it is likely that the Float solver will always remain.
We may eventually retire the old Exact Solver, however.

This commit also prepares for more sensible code in the future by
changing the internal enum names for the solvers to better reflect the
algorithms used: Fast -> Float, and Exact -> Mesh_Arr (which means
"Mesh Arrangments, the name of the paper upon which the current
exact solver is based).

Co-authored-by: Howard Trickey
Co-authored-by: Hans Goudey
#119294
-------
).
Previously, only the "exact" solver was used in the Mesh Boolean geometry node.
Now there is a choice between using the exaxt solver and the float solver, just like the Boolean modifier has.
Performance
¶
The
Scale Elements
node was rewritten to become at least 4-10x faster
  (
2cb3677557
### Commit Summary: Geometry Nodes: Rewrite Scale Elements node · 2cb3677557 - blender - Blender Projects
### Commit Details:
Rewrite of Scale Elements. Main changes related with removing unnecessary
abstractions (like structures of fields). Next, by using grouping approach,
all data is represented as spans. This provide ability to unify code for
different domains. Using of general utils like IndexMask, Group processing
and array utils provides much more parallelism and better memory usage.
In result, this refactoring result in 4-10 average speed improvement in
attached benchmark file with different probability and scale of elements.

See the PR for more before/after timing information and a benchmark file.

#115142
-------
).
The
Sample UV Surface
node is 10-20x faster when used on large meshes
  (
0a430fb8cb
### Commit Summary: Geometry: speedup reverse UV sampler · 0a430fb8cb - blender - Blender Projects
### Commit Details:
This implements a new internal data structure for reverse uv sampling.
Being better than the previous one was not particularly hard, because it
was never really optimized and used a very simple approach. I found the
new implementation to be about 10-20x faster in my tests. Simon was
able to reproduce an comparable speedups in production files.

The speed-up is mainly achieved by a better memory layout and better
multi-threading during construction. The lookup performance is mostly the
same as before.

Like the old data structure, the new one also splits the uv space into
uniformly sized cells.  The size of the cells is based on the number of
triangles. Then it sorts all triangles into the rows that they touch. Finally,
it creates a flat array for each row that contains the triangle indices
contained in each cell.

There are still ways to optimize this further, but for now this is a good
improvement already.

#118772
-------
).
Many nodes (e.g.
Grid
) became faster due to general threading optimization
  (
b99c1abc3a
### Commit Summary: BLI: speedup memory bandwidth bound tasks by reducing threading · b99c1abc3a - blender - Blender Projects
### Commit Details:
This improves performance by **reducing** the amounts of threads used for tasks
which require a high memory bandwidth.

This works because the underlying hardware has a certain maximum memory
bandwidth. If that is used up by a few threads already, any additional threads
wanting to use a lot of memory will just cause more contention which actually
slows things down. By reducing the number of threads that can perform certain
tasks, the remaining threads are also not locked up doing work that they can't
do efficiently. It's best if there is enough scheduled work so that these tasks
can do more compute intensive tasks instead.

To use this new functionality, one has to put the parallel code in question into
a `threading::memory_bandwidth_bound_task(...)` block. Additionally, one also
has to provide a (very) rough approximation for how many bytes are accessed. If
the number is low, the number of threads shouldn't be reduced because it's
likely that all touched memory can be in L3 cache which generally has a much
higher bandwidth than main memory.

The exact number of threads that are allowed to do bandwidth bound tasks at the
same time is generally highly context and hardware dependent. It's also not
really possible to measure reliably because it depends on so many static and
dynamic factors. The thread count is now hardcoded to 8. It seems that this many
threads are easily capable of maxing out the bandwidth capacity.

With this technique I can measure surprisingly good performance improvements:
* Generating a 3000x3000 grid: 133ms -> 103ms.
* Generating a mesh line with 100'000'000 vertices: 212ms -> 189ms.
* Realize mesh instances resulting in ~27'000'000 vertices: 460ms -> 305ms.

In all of these cases, only 8 instead of 24 threads are used. The remaining
threads are idle in these cases, but they could do other work if available.

#118939
-------
).
Node Tools
¶
The
Mouse Position
gives access to the click position and a "Wait for Click"
  option can delay the operator's execution until the user clicks
  (
ce224fe401
### Commit Summary: Node Tools: Add mouse position node, wait for cursor option · ce224fe401 - blender - Blender Projects
### Commit Details:
Add a "Mouse Position" node that outputs the location of the mouse
cursor in region space and the overall size of the region, both in pixel
units. Both outputs are integers to help reflect their pixel units.
If there the mouse position is ever accessible in sub-pixels, they can
easily be changed to floats.

Also add a "Wait for Cursor" option similar to the one for some built-in
operators that delay's the operator's execution until there is a mouse
click in the viewport. That way the operator can be called from menus
even though it is interactive. This option is placed in the node editor
header. When there are more options, it will be part of an "Options"
popover panel similar to the existing "Modes" and "types" popovers.

Combined with the viewport transform node, and other nodes like Raycast,
these features can allow making tools that create geometry where you
click in the scene.

#121043
-------
).
The
Viewport Transform
node provides access to the view direction and location
  of the 3D viewport(
83ed92d533
### Commit Summary: Geometry Nodes: Add Viewport Transform node · 83ed92d533 - blender - Blender Projects
### Commit Details:
Add a node that outputs the transform of the viewport relative to the
self object's transform. This node can be used to build effects like
billboarding or aligning geometry to the current view. In combination
with the mouse position node in the future it will allow tools like
generating geometry at the mouse click position.

There are two output matrices. The first is the projection matrix
that takes positions in camera space and applies the final perspective
projection. The other is the "view" matrix which contains the location
and rotation of the camera. These are separate because though their
combination is useful, it isn't used like a typical rotation/transform matrix.

#118680
-------
).
Data-block (collection, object, material, image) inputs are now supported,
  with the limitation that data-blocks from separate library files with non-unique
  names cannot be used (
65803f262f
### Commit Summary: Node Tools: Basic support for data-block inputs · 65803f262f - blender - Blender Projects
### Commit Details:
Currently support for data-block inputs is disabled because pointer
properties in operator properties aren't properly handled in Blender
(for more info, see
871c717c6e
). This commit brings basic
support for them by storing strings (data-block names) in the operator
properties instead. The main downside of using strings compared other
theoretical solutions is that data-blocks from different library files
can have the same name. This solution won't work well for those cases.
However, it still brings a lot of utility to node tools for a relatively
simple code change.

I investigated two other solutions for this that didn't work out. Using
the recently added enum custom property support didn't work because
the data-block names would still have to be unique. Plus generating an
enum would require a bunch of boilerplate code. Extending the existing
button search code to handle integer session UID backed data-blocks was
much trickier than I expected. The code there is already quite spagetti-
like, and things got out of hand quickly. That's still valid future work
though. The implementation can be changed without breaking
compatibility of files.

#121148
-------
).
The new
Active Element
node makes the active vertex, edge, or face available to tools (
2fe92c63d3
### Commit Summary: Geometry Nodes: Add Active Element tool node · 2fe92c63d3 - blender - Blender Projects
### Commit Details:
This pull request adds an "Active Element" node that exposes the active
vertex, edge, or face index to the geometry node tool context. The
presence of an active element is available as a boolean.

This node enables the creation of "active-to-selected" style operators.

Co-authored-by: Hans Goudey
#121333
-------
).
Extra object evaluations are now avoided, improving overall performance, especially when objects have modifiers
  (
b3ecfcd77d
### Commit Summary: Node Tools: Avoid depsgraph evaluation when possible · b3ecfcd77d - blender - Blender Projects
### Commit Details:
Currently for node tools we create and evaluate a temporary depsgraph
with all the selected object data-blocks and all data-blocks referenced
by the node tree.

Needless to say, this can be very slow when those data-blocks contain
arbitrary procedural operations. Re-evaluating all the selected objects
is particularly because it will give a slowdown even in very basic uses
of node tools.

Originally I hoped that geometry nodes could be made to work with
original as well as evaluated data-blocks. But that would require far
too many tricky changes and arguably isn't right design-wise anyway.
Instead of that, this commit makes node tools dependency graph
evaluation more fine-grained in a few ways.

1. Remove the evaluation of selected objects. These are always visible
   in the viewport and part of the active depsgraph anyway. To protect
   against cyclic dependencies, we now compare `orig_id` instead of the
   object pointer itself.
2. Evaluate the node group and its dependencies in a separate depsgraph
   used only when necessary. This allows using the original node tree
   without any copies when it doesn't reference any data-blocks.
3. Evaluate IDs from node group inputs (from the redo panel) in the extra
   depsgraph as well, only when necessary.

#120723
-------
).
Socket inspection now works in the node editor for node tools
  (
740d1fbc4b
### Commit Summary: Geometry Nodes: Log socket values for node tools · 740d1fbc4b - blender - Blender Projects
### Commit Details:
To ease the process of debugging a node group while creating
a node tool, while the group is visible in a node editor, log the socket
values from its last execution. The values are only logged for the
active object is nothing selected. The Viewer node is still not supported
because visualization would probably be very tricky.

#120596
-------
).
Matrix Socket
¶
There is a new matrix socket type and a few corresponding nodes.
Combine Transform
: Builds a matrix based on location, rotation and scale.
Separate Transform
: Decomposes a matrix into its location, rotation and scale components.
Transform Point
: Applies the matrix transformation on a point.
Transform Direction
: Applies the matrix transformation on a direction. This ignores the
  location/translation component of the matrix.
Project Point
: Applies the matrix on a point and also performs perspective divide.
Combine Matrix
: Builds a 4x4 matrix from raw values (
831e91c357
### Commit Summary: Geometry Nodes: support working with raw matrix values · 831e91c357 - blender - Blender Projects
### Commit Details:
These nodes allow working with the raw values that make up a matrix.
This can be used to construct a 4x4 matrix directly, without using the
`Combine Transform` node. This allows building transforms with arbitrary
skew, or projection matrices.

#121283
-------
).
Separate Matrix
: Splits a 4x4 matrix into raw values (
831e91c357
### Commit Summary: Geometry Nodes: support working with raw matrix values · 831e91c357 - blender - Blender Projects
### Commit Details:
These nodes allow working with the raw values that make up a matrix.
This can be used to construct a 4x4 matrix directly, without using the
`Combine Transform` node. This allows building transforms with arbitrary
skew, or projection matrices.

#121283
-------
).
Set Instance Transform
: Assign a transformation matrix to each instance.
Instance Transform
: Access the built-in
instance_transform
attribute (
fb6b9092a7
### Commit Summary: Geometry Nodes: new Instance Transform attribute input node · fb6b9092a7 - blender - Blender Projects
### Commit Details:
New node to access `instance_transform` built-in attribute of instances.

#122477
-------
).
Invert Matrix
Multiply Matrices
Transpose Matrix
The
Object Info
node now has a Transform matrix output (
4dfc1ede58
### Commit Summary: Geometry Nodes: output transform matrix from object info node · 4dfc1ede58 - blender - Blender Projects
### Commit Details:
This adds a new `Transform` output socket of matrix type to the Object Info node.

This is clearly useful, but we did not do this before for a couple of reasons:
* It's redundant with the location, rotation and scale outputs.
* We might want separate `Object Transform` and `Object Geometry` nodes.

For now just adding the socket is probably useful enough to justify it. Even more
so because it's addition doesn't really block other designs in the future either.

#121437
-------
).
The
Transform Geometry
node now supports transforming with a matrix (
9fcf97d978
### Commit Summary: Geometry Nodes: support matrix in Transform Geometry node · 9fcf97d978 - blender - Blender Projects
### Commit Details:
Now the Transform Geometry node either has individual components (location,
rotation and scale) or a matrix as input. In many cases that is just more
convenient when working with matrices. Often this is identical to splitting
the matrix into it's individual components. However, if the matrix contains
shearing, information is lost when splitting it into individual components.

#121438
-------
).
4x4 matrices can now be stored as attributes.
The
Accumulate Field
node now supports accumulating transform matrices (
78c1c1a170
### Commit Summary: Geometry Nodes: support matrix socket in accumulate field node · 78c1c1a170 - blender - Blender Projects
### Commit Details:
This adds support for transform matrices in the accumulate field node. This is quite
useful to evaluate chains of parent matrices (although branching is not easily possible
with this approach).

The main tricky thing here is that matrices are generally accumulated using
multiplication and the order of multiplication matters. For other data types we
currently always use addition. I don't have use cases for other ways to accumulate
matrices right now, so maybe it's fine not to add additional options here for now.
It should be fairly straight forward to version this to support more accumulation
modes in the future. Additionally, I hope we get a more general solution for custom
accumulations at some point.

#121326
-------
).

'''''


10. Blender 4.2 LTS: Import & Export¶

Blender 4.2 LTS: Import & Export
¶
Collection Exporters
¶
File format exporters can now be associated with Collections. One or
more exporters can be added and configured in the Collection properties
panel. Settings are stored in .blend files for easy sharing and persistence
across Blender sessions. (
509a7870c3
### Commit Summary: Collection Exporters: Enable file exporters to be specified on Collections · 509a7870c3 - blender - Blender Projects
### Commit Details:
This implements the ability to have file exporters added and configured on Collections.

Exporting is reachable from several locations:
- Individually on each exporter configuration: The `Export` button in each panel header
- For all exporters on the collection: The `Export All` button in the main panel interface
- For all exporters on all collections in the scene: The `File`->`Export All Collections` button

Visibility of which collections currently have exporters configured is done by ways of an icon added to the Collection row in the Outliner.

Adding multiple exporters for the same file type is permitted. The user is free to setup several exports of the same format but with different file locations or settings etc.

Notes:
Only USD and Wavefront OBJ are enabled for the initial commit. Additional formats, including those implemented in Python will be added as separate commits after this.

Ref
#115690
#116646
-------
)
This feature streamlines the process of re-exporting the same asset(s)
repeatedly. For example when creating glTF assets for a game and
iterating on the look, or when using Blender in a studio pipeline to
create USD assets.
All collections in the scene can be exported with a single
click through the File menu. Additionally, each collection can be
exported to multiple file formats simultaneously.
USD
¶
The hair curves object type is now supported for both import and export. (
ea256346a8
### Commit Summary: Alembic/USD: Use GeometrySets to import data · ea256346a8 - blender - Blender Projects
### Commit Details:
This rewrites the Alembic and USD data importers to work with and
output GeometrySets instead of Meshes.

The main motivation for this change is to be able to import properly
point clouds, which are currently imported as Meshes, and curves
data, which suffer from a lot of issues due to limitations of
legacy curves structures (fixed by the new curves data-block) and are
also converted to Meshes. Further, for Curves, it will allow importing
arbitrary attributes.

This patch was primarily meant for Alembic, but changes to USD import
were necessary as they share the same modifier.

For Alembic:
There should be no behavioral changes for Meshes
Curves are imported as the new Curves object type
Points are imported as PointClouds

For USD:
There should be no behavioral changes for Meshes
Curves are imported as the new Curves object type
Note that the current USD importer does not support loading PointClouds,
so this patch does not add support for it.

For both Alembic and USD, knots arrays are not read anymore, as the new
Curves object does not expose the ability to set them. Improvements can
be made in the future if and when example assets are provided.

This fixes at least the following:
#58704
: Animated Alembic curves don't update on render
#112308
: Curves have offset animations (alembic / USD)
#118261
: wrong motion blur from usd in cycles and reverting to the first
frame when disabeling motion blur

Co-authored-by: Jesse Yurkovich
#115623
-------
,
21db0daa4e
### Commit Summary: USD: Read and write custom attributes for Curves · 21db0daa4e - blender - Blender Projects
### Commit Details:
Add support for reading and writing custom `Curves` attributes.

This allows us to roundtrip Blender's Hair grooms containing UVs and
other attribute data. Note that animated attribute values are not
supported with this change.

This will also address
#120042
#121928
-------
)
Point cloud import is now supported. (
e4ef0f6ff4
### Commit Summary: USD: UsdGeomPoints import support · e4ef0f6ff4 - blender - Blender Projects
### Commit Details:
The commit addresses issue
#106398
.

Provide an implementation of a `USDPointsReader` class to import
`UsdGeomPoints` primitives as Blender Point Clouds.

Co-authored-by: DevinBayly
Co-authored-by: Jesse Yurkovich
#120060
-------
)
Unicode names are now supported on import and are optional for export. Only software using USD 24.03 or greater can support Unicode files. (
9ad2c7df0b
### Commit Summary: USD: implement native Unicode support · 9ad2c7df0b - blender - Blender Projects
### Commit Details:
Make use of USD's new UTF-8 support to allow our import/export code to
accept and generate appropriate USD files. This has been a long standing
shortcoming since USD's introduction, with incomplete and complicated
DCC-specific workarounds often attempted.

Summary of changes
- Export gets a new "Allow Unicode" option defaulting to "false". The
  new Unicode USD files are not backward compatible. DCCs using older
  versions of USD (before 24.03) will not be able to load such files so
  we want to provide this as an opt-in option for now.
- Every location which used to call either `USDHierarchyIterator::make_valid_name`
  or `pxr::TfMakeValidIdentifier` will now go through a new `make_safe_name`
  API instead
- Export code is responsible for passing in the `allow_unicode` option
- Import code will always pass in `true` meaning Blender will happily
  accept both existing and new Unicode USD files

Strangely, USD does not provide a convenient way of making valid UTF-8
identifiers and they left their old API unchanged. We had to roll our
own per their advice:
https://forum.aousd.org/t/how-to-make-a-unicode-identifier-valid/1435
#122471
-------
)
New Import options
Import only defined prims or all (
bfa54f22ce
### Commit Summary: USD Import: Added an option to import only defined prims · bfa54f22ce - blender - Blender Projects
### Commit Details:
Prims in a UsdStage can be created directly (def) or as an over. Overs
might not always be desired at import time. This patch adds the ability
to choose whether to load only defined prims (the default behaviour, and
as it exists currently in main). By unchecking this option at import
time, prims created as overs will also be imported.

Co-authored-by: Charles Wardlaw
#121321
-------
)
Convert USD dome light to a world shader (
e1a6749b3d
### Commit Summary: USD: dome light IO · e1a6749b3d - blender - Blender Projects
### Commit Details:
This commit adds logic to convert between USD dome lights and Blender
world materials.

The USD dome light rotation is represented in a mapping node input to the
environment texture.  If the dome light has a color specified in addition to
the texture map, the color will be converted to a vector multiply on the
the environment texture output.

I the imported USD has multiple dome lights, only the first dome light will
be converted to a world material.

Co-authored-by: kiki
Co-authored-by: Michael Kowalski
#121800
-------
)
Validate meshes on import (
2548132e23
### Commit Summary: USD Import: Added mesh validation on import as an option · 2548132e23 - blender - Blender Projects
### Commit Details:
Added mesh validation on import as an option.

If bad mesh data is imported, there may be a crash on a switch to edit
mode or similar. This adds an option to validate if a user determines
the file is corrupted, allowing the possibility for data recovery.
This is especially useful for importing files exported from certain CAD
applications.

The option here matches the option that OBJ and Alembic both provide.

Co-authored-by: Charles Wardlaw
#121054
-------
)
New Export options
Filter which types to export (
a6a5fd053a
### Commit Summary: USD Export: filtering option for types to export · a6a5fd053a - blender - Blender Projects
### Commit Details:
Added option for filtering types of objects to export.  Meshes,
materials, lights, cameras, volumes, and curves are all equally
supported.

This is useful for many situations in which a user might want a
subset of objects from a Collection without wanting to build a
sub-collection or otherwise reorganize their scene.  Exporting
Armatures and their animation as UsdSkel objects and UsdSkelAnim
clips, but without meshes, is a good example.

Co-authored-by: Charles Wardlaw
#121325
-------
)
Convert the world shader to a USD dome light (
e1a6749b3d
### Commit Summary: USD: dome light IO · e1a6749b3d - blender - Blender Projects
### Commit Details:
This commit adds logic to convert between USD dome lights and Blender
world materials.

The USD dome light rotation is represented in a mapping node input to the
environment texture.  If the dome light has a color specified in addition to
the texture map, the color will be converted to a vector multiply on the
the environment texture output.

I the imported USD has multiple dome lights, only the first dome light will
be converted to a world material.

Co-authored-by: kiki
Co-authored-by: Michael Kowalski
#121800
-------
)
Stage up axis (
2415380061
### Commit Summary: USD Export: Adding the ability to choose Stage Up Axis at export time. · 2415380061 - blender - Blender Projects
### Commit Details:
This patch allows the user to choose the Stage Up Axis at export time,
allowing the export to match another target software package. The most
common is reorienting to Y up. The up axis is written to stage metadata
and a top-level orientation is applied to reorient objects in the Stage.

The new orientation is required because the Stage metadata `upAxis` is,
apparently, not used during certain USD composition arcs. The
recomendation is to only use a single `upAxis` throughout the pipeline
and this option here allows files produced by Blender to more easily
conform to the conventions used as needed.

Co-authored-by: Charles Wardlaw
#121226
-------
)
XForm operator convention (
36f1a4f94f
### Commit Summary: USD Export: Added option to specify types of XForm ops written. · 36f1a4f94f - blender - Blender Projects
### Commit Details:
Different pipelines standardize on different XForm op setups (T-R-S,
T-orient quat-S, Matrix).  Having this options means that this standard
can be chosen at export time instead of having to patch on load.

Speaking from experience, this is a very helpful option.

Co-authored-by: kiki
#121627
-------
)
Triangulate meshes (
b2d1979882
### Commit Summary: USD Export: option to triangulate meshes · b2d1979882 - blender - Blender Projects
### Commit Details:
This allows for the source of truth data in the Blender scene to remain
untouched while producing triangulated output suitable for game and VR
pipelines, where only triangles are ingested. This addition aligns USD
with some of the other exporters which offer a similar feature.

Co-authored-by: Charles Wardlaw
#121274
-------
)
Down-sample exported textures for USDZ (
3e73b9caa5
### Commit Summary: USD Export: Add the ability to downsample textures for USDZ · 3e73b9caa5 - blender - Blender Projects
### Commit Details:
This allows for exporting multiple versions of an asset's textures
without having to manually save or do manual edits from within the UI.
This is beneficial for game creators who might want to store the
original textures at full resolution, but then bake down at export time
for multiple different targets quality levels.  It can also be good for
compressing textures for VR usage.

This only affects USDZ exports.

Default option: Keep textures at the same resolution. Choosing a
resolution will downsample any images that exceed that maximum
resolution while leaving the others.

A custom setting is provided to allow the user to manually enter their
desired size if the provided options aren't suitable.

Co-authored-by: Charles Wardlaw
#121237
-------
)
Generate MaterialX network from Blender shader nodes. Supports a subset of all shader nodes and their functionality. (
PR#122575
)
Rename active UV map to
st
, following USD conventions. This is enabled by default. (
eaeb8ba8cd
### Commit Summary: USD: Rename active UV Map to "st" by default · eaeb8ba8cd - blender - Blender Projects
### Commit Details:
This was previously attempted in
#109518
and reverted in
#112234
. Now do
both the changes in the mesh and material export, and make it an option
in USD export. Hydra always renamed to "st" and continues to do it.
Fix
#122800
: Missing textures with MaterialX materials

#123326
-------
)
Alembic
¶
The hair curves object type is now supported for both import and export. (
ea256346a8
### Commit Summary: Alembic/USD: Use GeometrySets to import data · ea256346a8 - blender - Blender Projects
### Commit Details:
This rewrites the Alembic and USD data importers to work with and
output GeometrySets instead of Meshes.

The main motivation for this change is to be able to import properly
point clouds, which are currently imported as Meshes, and curves
data, which suffer from a lot of issues due to limitations of
legacy curves structures (fixed by the new curves data-block) and are
also converted to Meshes. Further, for Curves, it will allow importing
arbitrary attributes.

This patch was primarily meant for Alembic, but changes to USD import
were necessary as they share the same modifier.

For Alembic:
There should be no behavioral changes for Meshes
Curves are imported as the new Curves object type
Points are imported as PointClouds

For USD:
There should be no behavioral changes for Meshes
Curves are imported as the new Curves object type
Note that the current USD importer does not support loading PointClouds,
so this patch does not add support for it.

For both Alembic and USD, knots arrays are not read anymore, as the new
Curves object does not expose the ability to set them. Improvements can
be made in the future if and when example assets are provided.

This fixes at least the following:
#58704
: Animated Alembic curves don't update on render
#112308
: Curves have offset animations (alembic / USD)
#118261
: wrong motion blur from usd in cycles and reverting to the first
frame when disabeling motion blur

Co-authored-by: Jesse Yurkovich
#115623
-------
,
b24ac18130
### Commit Summary: Alembic: Support new Curves object type for export · b24ac18130 - blender - Blender Projects
### Commit Details:
Support the new Curves object type in Alembic when exporting curve data.
Make corresponding fixes to importing at the same time.

Summary of changes
 - Exporter now supports the `Curves` object type during Export
   including when using the convert to mesh option
 - Exporter will now enforce that only 1 combination of curve type and
   periodicity are in a given object [0].
 - Catmul-rom basis curves are now supported and will be used for Hair
   data [1].
 - Bezier curves are exported with their left/right handle data [2].
 - Cyclic bezier and nurbs curves should be handled correctly now.

Along the way this required changes on the Import side as well in order
to be complete
 - Importer will now load bezier curve handle data correctly
 - Importer could fail to set the correct cyclic data on the last spline
   of a multi-curve object

See PR for screenshots

[0] See
https://github.com/alembic/alembic/blob/master/lib/Alembic/AbcGeom/OCurves.h#L55
Prior to this change the Alembic exporter could write invalid data to
the file in these cases.
[1] Alembics created with the new Curves Hair object with this patch
will not be loadable in prior versions of Blender. The importer does not
handle the curve data correctly and will crash.
[2] There was a long-standing TODO about how to handle bezier curve data
since nothing is documented on Alembic's side. Bezier data wouldn't even
round-trip properly inside Blender itself. On a hunch, because USD was
influenced by certain aspects of Alembic which came before it, I decided
to try writing out the data the same way as USD. That turned out to work
quite well in at least 1 external software so that's what this patch
will use for both import and export.

#119894
-------
)
Import multiple files at once. (
PR#121492
)
Fix: Addressed long-standing issue where animated curves would not update during render. (
ea256346a8
### Commit Summary: Alembic/USD: Use GeometrySets to import data · ea256346a8 - blender - Blender Projects
### Commit Details:
This rewrites the Alembic and USD data importers to work with and
output GeometrySets instead of Meshes.

The main motivation for this change is to be able to import properly
point clouds, which are currently imported as Meshes, and curves
data, which suffer from a lot of issues due to limitations of
legacy curves structures (fixed by the new curves data-block) and are
also converted to Meshes. Further, for Curves, it will allow importing
arbitrary attributes.

This patch was primarily meant for Alembic, but changes to USD import
were necessary as they share the same modifier.

For Alembic:
There should be no behavioral changes for Meshes
Curves are imported as the new Curves object type
Points are imported as PointClouds

For USD:
There should be no behavioral changes for Meshes
Curves are imported as the new Curves object type
Note that the current USD importer does not support loading PointClouds,
so this patch does not add support for it.

For both Alembic and USD, knots arrays are not read anymore, as the new
Curves object does not expose the ability to set them. Improvements can
be made in the future if and when example assets are provided.

This fixes at least the following:
#58704
: Animated Alembic curves don't update on render
#112308
: Curves have offset animations (alembic / USD)
#118261
: wrong motion blur from usd in cycles and reverting to the first
frame when disabeling motion blur

Co-authored-by: Jesse Yurkovich
#115623
-------
)
glTF
¶
glTF is now part of the core add-ons bundle that ships with Blender. (
13a3603578
### Commit Summary: Move addons from the addons repo to "addons_core" · 13a3603578 - blender - Blender Projects
### Commit Details:
Ref:
!121825
-------
)
Importer
Option to set bone shape + bone shape size (
08d43667c8
### Commit Summary: glTF importer: Fix bone shape size not always pertinent · 08d43667c8 - blender - Blender Projects
### Commit Details:
We don't have yet the perfect formula, so adding
- An option to disable bone shape for Blender heuristic, if needed
- An option to scale factor the bone shape for Blender heuristic
-------
)
EEVEE : Use nodes for alpha clipping (
b583b6ec39
### Commit Summary: glTF I/O: Use nodes for alpha clipping · b583b6ec39 - blender - Blender Projects
### Commit Details:
Replace the use of Blend Mode on EEVEE (legacy), not existing on EEVEE-Next
-------
)
Remove Eevee legacy blend_method (
d9d5597a6c
### Commit Summary: glTF importer: Remove legacy EEVEE blend_method update · d9d5597a6c - blender - Blender Projects
### Commit Details:
No details found
-------
)
Implement KHR_animation_pointer (
f8368df0c8
)
Use layout panels instead of PanelTypes (for collection export) (
033d552a7b
)
Exporter
New features
Option to export Vertex Color even if not use in material node tree (
0f0a8df8a9
### Commit Summary: glTF exporter: Option to export VC even if not used in node tree · 0f0a8df8a9 - blender - Blender Projects
### Commit Details:
glTF specification says that VC must be used as a base color multiplier, so you should add it to your node tree to see it.
But seems common usage of VC is to use it for custom data. Custom properties/attribute is the best place for these data,
but in order not to break production workflow/pipeline, we add an option to export active VC
-------
)
Implement KHR_animation_pointer (
f8368df0c8
)
Enable collection export (
bf2d56e814
)
Collection export option to export at center of mass of root objects (
c6e38d084c
### Commit Summary: glTF exporter: Collection Export: Exporting a center of mass of root objects option · c6e38d084c - blender - Blender Projects
### Commit Details:
No details found
-------
)
Perf: on 'disable viewport' option, manage drivers too (
6a4210ff90
### Commit Summary: glTF exporter: Perf: Manage drivers on SK when disable viewport option · 6a4210ff90 - blender - Blender Projects
### Commit Details:
When trying to optimize performance, we can disable other object in viewport when baking animation
We are now able to bake also drivers on SK with this option
The solution is to copy drivers to temporary created custom properties on armature,
to be able to evaluate them during baking
-------
)
Add profile option (debug) at export (
804a276688
)
EEVEE : Use nodes for alpha clipping (
b583b6ec39
### Commit Summary: glTF I/O: Use nodes for alpha clipping · b583b6ec39 - blender - Blender Projects
### Commit Details:
Replace the use of Blend Mode on EEVEE (legacy), not existing on EEVEE-Next
-------
)
EEVEE : backwards compatibility for alpha clipping (
8fd9712df9
### Commit Summary: glTF exporter: add alphamode management backward compatibility · 8fd9712df9 - blender - Blender Projects
### Commit Details:
When a file is created with pre- 4.2 version, but is open with 4.2 version:
We can now detect the automatically created node setup
Wrong for the exact value of the cutoff, but better than nothing to get it detected
-------
)
UDIM for merged channel texture (
a71027d37f
### Commit Summary: glTF exporter: UDIM for merged channel textures · a71027d37f - blender - Blender Projects
### Commit Details:
Was never implemented
-------
)
Allow float socket (such as alpha) coming from a color socket (
c05c08cbff
### Commit Summary: glTF exporter: Allow float socket (ex. Alpha) to get data from Color socket · c05c08cbff - blender - Blender Projects
### Commit Details:
This is how it works in Blender, but before this commit, only R channel was used
Now, we convert RGB to BW to get float data
-------
)
Fixes
Fix alpha Vertex Color export (
730987cce3
)
Fix UVMAP export when coming from an attribute node (
ac97907841
### Commit Summary: glTF exporter: Fix UVMap export when is set from an attribute node · ac97907841 - blender - Blender Projects
### Commit Details:
No details found
-------
)
Fix exporting both factor & Vertex Color at same time (
d80a1dd5f8
### Commit Summary: glTF exporter: Fix exporter both VertexColor & colorFactor in the same time · d80a1dd5f8 - blender - Blender Projects
### Commit Details:
No details found
-------
)
Do not set/reset object when no track to export (
b156daa989
)
Fix (experimental) Geometry Nodes export when modifiers + shapekeys (
786428011f
)
Fix crash exporting instanced collection whamp light option is enabled (
6b8b29648c
)
Avoid crash with full hierarchy + light export (
6ac680c1a7
)
Fix crash filtering collections (
c794324c8a
)
Instanced collections can have regular children (
be96d5144a
### Commit Summary: glTF exporter: Instanced collection can have regular children · be96d5144a - blender - Blender Projects
### Commit Details:
No details found
-------
)
Fix material on evaluated data (
c297a9513e
### Commit Summary: glTF exporter: Fix material check on evaluated data · c297a9513e - blender - Blender Projects
### Commit Details:
No details found
-------
)
Fix hierarchy of objects inside full hierarchy of collections (
68c49290e3
)
Fix Geometry Nodes data check (
9ba22d4bc7
### Commit Summary: glTF exporter: Fix #122379: Fix GN data type check · 9ba22d4bc7 - blender - Blender Projects
### Commit Details:
No details found
-------
)
Remove some false positive user warnings (
cab79018ee
### Commit Summary: glTF exporter: Remove false positive warning · cab79018ee - blender - Blender Projects
### Commit Details:
No details found
-------
)
Fix vendor extension declaration (
04b08bcb40
### Commit Summary: glTF exporter: Fix glTF vendor extensions declaration · 04b08bcb40 - blender - Blender Projects
### Commit Details:
No details found
-------
)
Various typo fixes (
d41feda6c7
,
f5f6c460ed
)
Fix crash on unlit + animation pointer (
1c840422cf
)
Cleanup user warnings (
f8b8a1a5b6
### Commit Summary: glTF exporter: cleanup user warnings · f8b8a1a5b6 - blender - Blender Projects
### Commit Details:
No details found
-------
)
Update hook UI registration after Blender changes (
018ece5309
### Commit Summary: glTF: Update user extension ui registration after Blender changes · 018ece5309 - blender - Blender Projects
### Commit Details:
After Panel UI refactoring for I/O, there is no more Panel class
-------
)
Various fixes:
5789031072
### Commit Summary: glTF exporter: fix invalid escape sequence · 5789031072 - blender - Blender Projects
### Commit Details:
No details found
-------
c9daea2d5b
### Commit Summary: glTF exporter: Fix typo in socket name · c9daea2d5b - blender - Blender Projects
### Commit Details:
No details found
-------
f86fe707ce
### Commit Summary: glTF exporter: Fix merge after extra anim feature merge · f86fe707ce - blender - Blender Projects
### Commit Details:
No details found
-------
COLLADA
¶
The built-in support for COLLADA is now
considered legacy
. It will be removed in a future version. (
82f9501a4a
### Commit Summary: Collada: Mark the I/O operators as legacy in the UI. · 82f9501a4a - blender - Blender Projects
### Commit Details:
Ref.
https://devtalk.blender.org/t/moving-collada-i-o-to-legacy-status/34621
-------
,
20e4984ad6
)
Validation
¶
OBJ, PLY, STL importers now default to the Validate Meshes option being on.
This makes import process a bit slower, but prevents later crashes in case input files
contain malformed data. Validation itself is now 2-3x faster compared to previous versions.
(
761dd6c923
### Commit Summary: IO: enable mesh validation by default for STL, PLY & OBJ importers · 761dd6c923 - blender - Blender Projects
### Commit Details:
When moving importers from Python to C++ validation was removed
(from PLY) & disabled by default (STL & OBJ) which re-introduces
crashes reported by users such as
#31835
.

Enable validation by default because crashes caused by imported data
should be avoided, especially since the crashes may happen later when
users enter edit-mode or run certain editing operations.

This does slow down importing, from testing a 236MB .OBJ it takes around
twice as long to import (~1.5 to ~3 seconds). Although validation can
be optimized to reduce the overhead ad well as run in parallel for
importers that load multiple objects.

The defaults for USD and Alembic remain unchanged since this was never
enabled by default, although we could consider enabling these as well.
-------
,
PR#121413
).

'''''


11. Blender 4.2 LTS: Modeling & UV¶

Blender 4.2 LTS: Modeling & UV
¶
Transform
¶
Customizable rotation snap increment added for
Transform
tool
  (
060174cf14
### Commit Summary: Transform: customizable rotation snap increment values · 060174cf14 - blender - Blender Projects
### Commit Details:
Add two snapping increment options: a regular value
(activated with Ctrl) and a precise value (activated with Ctrl+Shift).
These values are separate for 2D and 3D views.

Ref
!118760
-------
).
The 'Absolute Grid Snap' option has been replaced with a new snap mode: Snap to Grid.
  (
f0479e915f
### Commit Summary: Transform: Implement Snap to Grid mode · f0479e915f - blender - Blender Projects
### Commit Details:
Addresses two improvements to `Snap to Grid` as suggested in
#73993
:
- Make 'Absolute Grid Snapping' a new Snap Mode
- Snap to Grid in Non-Side View performed at ground level

Implementation details:

- Snap to Grid has no cursor symbol, unless we are in `Set Snap Base`
  mode. Similar to the previous 'Absolute Grid Snap' behavior.
- In Non-Side view, Snap to Grid is performed at ground level.
- If `Snap Base` is `Closest`, Snap to Grid uses the transform pivot
  point instead. Similar to the previous 'Absolute Grid Snap' behavior.
- The "Absolute Grid Snap" option has been removed.

#116109
-------
). If combined with Snap to Increments it allows for 3D Volume Grid Snap.
Modifiers
¶
New option to pin modifiers to the bottom of the stack (
7ee189416c
### Commit Summary: UI: Show modifier pinning with icon, adjust name · 7ee189416c - blender - Blender Projects
### Commit Details:
User feedback has been that the pinned modifier looks broken because
there is no feedback in the UI showing that it's pinned (related to the
recently reported
#121620
). It's also inconvenient to disable the pinning
if it's required to move the modifier up (before another modifier that
controls normals for example). Now the "Pin" icon is displayed here,
and clicking on it turns off the pinning.

Also, change the property name from "Stick to Last" to "Pin to Last".
"Stick" is a weird word in the UI, it sounds uncommon and strangely
physical. "Pin" is more associated with this concept.

---

![Screenshot from 2024-05-29 11-41-06](/attachments/4581d362-e2fb-4edf-83dd-7f1e1b71ec4d)

#122444
-------
)
New operator, Shade Auto Smooth, to quickly add a Smooth by Angle modifier and pin it to the bottom of the stack (
2f289857af
### Commit Summary: Object: add Shade Auto Smooth operator · 2f289857af - blender - Blender Projects
### Commit Details:
Based on the design in
#120230
.
* Replaces the `Shade Smooth by Angle` operator with `Shade Auto Smooth`
  in the object context menu menu.
* The new operator automatically adds and removes the modifier instead
  of being a destructive operation.
* The `Shade Smooth` and `Shade Flat` operators now remove the
  `Smooth by Angle` modifier automatically.
* Add a pin option to modifiers, which limits dragging and keeps the
  modifier after newly added modifiers in the list.

Co-authored-by: Hans Goudey
#121494
-------
)
Moved Normal Edit and Weighted Normal modifiers to new Normals menu (
b0eb48c4dc
### Commit Summary: UI: Move Normal Edit and Weighted Normal modifiers to "Normals" menu · b0eb48c4dc - blender - Blender Projects
### Commit Details:
Though the whole modifier menu could use a reorganization, it probably doesn't
make sense to do that before we have a builtin library of node group assets.
We already have the "Normals" category though, so these two modifiers make
more sense there.

#122168
-------
)
UV Editing
¶
The Edge and Vert Slide operators have been ported to the UV Editor
  (
aaadb5005e
### Commit Summary: UV: Support Edge and Vert Slide · aaadb5005e - blender - Blender Projects
### Commit Details:
This commit adapts the existing Edge Slide and Vert Slide to work with
UVs as well.

It addresses [0] for the addition of an edge slide tool to the UV
Editor.

This feature allows users to slide UVs towards adjacent edges,
providing more convenient ways to edit UV maps.

[0]:
https://blender.community/c/rightclickselect/66dbbc
#119041
-------
).
The
Set Snap Base
feature (key
B
) have been enabled in the UV Editor
  (
a56a975760
### Commit Summary: UV: Enable 'Set Snap Base' feature  · a56a975760 - blender - Blender Projects
### Commit Details:
Just like for objects in 3D View, UVs can also benefit from the
`Set Snap Base` feature (key `B`).
-------
).
Curves Editing
¶
Curves edit mode draws evaluated curves and handles now (
15dbfe54e4
### Commit Summary: Curves: draw evaluated curves and handles in edit mode · 15dbfe54e4 - blender - Blender Projects
### Commit Details:
This makes the edit mode drawing for the new curves data more similar
to the old edit mode. Specifically, it draws the evaluated curves now instead
of just a poly curve. Furthermore, it now draws bezier handles as well as
a separate control curve for nurbs curves.

#119053
-------
).
Support converting curves types (
23265a2b6d
### Commit Summary: Curves: add edit mode operator to convert curve types · 23265a2b6d - blender - Blender Projects
### Commit Details:
This operator shares the underlying code with the corresponding node.

#120269
-------
,
3f2c4db951
### Commit Summary: Curves: support more curve type conversion options in edit mode · 3f2c4db951 - blender - Blender Projects
### Commit Details:
This adds a new `Handles` checkbox to the conversion operator that
affects how the conversion works in the following cases:
`Bezier -> Catmull Rom / Poly / Nurbs` and `Catmull Rom -> Nurbs`.
If enabled, three control points are added for each original control
point, otherwise only one.

-----

The images show the effect of the toggle. The top result is always the one with handles and the bottom one without.
* `Bezier -> Poly`
  ![image](/attachments/c4833568-fb8a-415e-b4fc-a8af2002ded8)
* `Bezier -> Catmull Rom`
  ![image](/attachments/df62e4c0-1a88-4f04-aa82-506bc40765a2)
* `Bezier -> Nurbs`
  ![image](/attachments/3b78d49d-c840-4c15-a342-050fb1f5c3f5)
* `Catmull Rom -> Nurbs`
  ![image](/attachments/de9a4c08-d442-4f97-a0e0-6393b0f0e6de)

#120423
-------
).
New
Add
menu to insert some primitive curves (
549d02637a
### Commit Summary: Curves: add menu to add some primitive curves in edit mode · 549d02637a - blender - Blender Projects
### Commit Details:
This adds operators to add a bezier and circle primitive in curves
edit mode. The operators support the same settings as in the
legacy curve edit mode. The `shift+A` shortcut is added as well.

#120513
-------
).
New operator to set the handle type for bezier curves (
549d02637a
### Commit Summary: Curves: add menu to add some primitive curves in edit mode · 549d02637a - blender - Blender Projects
### Commit Details:
This adds operators to add a bezier and circle primitive in curves
edit mode. The operators support the same settings as in the
legacy curve edit mode. The `shift+A` shortcut is added as well.

#120513
-------
).
New operator to subdivide curves (
548df007a5
### Commit Summary: Curves: add subdivide curves edit mode operator · 548df007a5 - blender - Blender Projects
### Commit Details:
No details found
-------
).
New operator to switch direction of curves (
6c25c66194
### Commit Summary: Curves: add switch direction edit mode operator · 6c25c66194 - blender - Blender Projects
### Commit Details:
No details found
-------
).
New operator to toggle whether curves are cyclic (
d315a6a793
### Commit Summary: Curves: add toggle cyclic edit mode operator · d315a6a793 - blender - Blender Projects
### Commit Details:
This operator also exists in legacy edit mode and allows changing
whether the curve is cyclic. If all curves are non-cyclic, the attribute
is removed because it does not contain any useful information.

#120266
-------
).
New option to only draw onto selected objects in "project to surface" draw mode (
241c19a57a
### Commit Summary: Add "Only project onto selected" for curve, GP3, and annotation drawing · 241c19a57a - blender - Blender Projects
### Commit Details:
Implementation of the proposal in:
#121535
When drawing with "project to surface" turned on, it is now possible to restrict the projection to only the selected objects.
This is really useful for drawing onto surfaces that has a lot of detail meshes that you don't want to project onto.
-------
).

'''''


12. Blender 4.2 LTS: Physics¶

Blender 4.2 LTS: Physics
¶
Physics
¶
Fluid domains now have liquid meshing enabled by default, so that they are visible in renders. For visualizing the particles better, this option can be disabled. (
a36d7774cc
### Commit Summary: Physics: Enable liquid mesh generation by default · a36d7774cc - blender - Blender Projects
### Commit Details:
Previously mesh generation was disabled by default. This meant it was
only visible for wireframe or x-ray in the viewport, and not visible
in renders.

#120832
-------
)

'''''


13. Blender 4.2 LTS: Python API¶

Blender 4.2 LTS: Python API
¶
Add-on Packaging
¶
With the
new extensions platform
, there is also a new method for packaging add-ons.
It uses a separate
blender_manifest.toml
file instead of
bl_info
embedded in the script.
See the
extensions user manual
### Commit Summary: How to Create Extensions - Blender 4.2 Manual
### Commit Details:
How to Create Extensions
#
Creating an extension takes only a few steps:
Create a directory for your extension and populate it with the add-on code or theme file.
Add a
blender_manifest.toml
file with all the required meta-data
(name,
maintainer,
...)
.
Compress the directory as a
.zip
file.
Install from Disk
to test if everything is working well.
Upload the zip file
(this step requires Blender ID).
The extension will be held for
review
,
and published once the moderation team approves it.
Extension files
#
An extension is shared as a
.zip
archive containing a manifest file and other files.
The expected files depend on the extension type.
Add-on extension
#
Add-ons
need at least the manifest and an
__init__.py
file,
while more complex add-ons have a few different .py files or wheels together.
my_extension-0.0.1.zip
├─ __init__.py
├─ blender_manifest.toml
└─ (...)
Theme extension
#
A theme extension only needs the manifest and the .xml theme file.
my_extension-0.0.1.zip
├─ blender_manifest.toml
└─ theme.xml
Note
Extensions can optionally have all its files inside a folder (inside the archive).
This is a common behaviour when saving a repository as ZIP from version-control platforms.
Manifest
#
A manifest is a file with all the meta-data required for an extension to be processed.
This example is a good starting point to the
blender_manifest.toml
that should be inside the
.zip
.
schema_version
=
"1.0.0"
# Example of manifest file for a Blender extension
# Change the values according to your extension
id
=
"my_example_extension"
version
=
"1.0.0"
name
=
"Test Extension"
tagline
=
"This is another extension"
maintainer
=
"Developer name <
[email protected]
>"
# Supported types: "add-on", "theme"
type
=
"add-on"
# Optional: add-ons can list which resources they will require:
# * "files" (for access of any filesystem operations)
# * "network" (for internet access)
# * "clipboard" (to read and/or write the system clipboard)
# * "camera" (to capture photos and videos)
# * "microphone" (to capture audio)
# permissions = ["files", "network"]
# Optional link to documentation, support, source files, etc
# website = "http://extensions.blender.org/add-ons/my-example-package/"
# Optional list defined by Blender and server, see:
# https://docs.blender.org/manual/en/dev/extensions/tags.html
tags
=
[
"Animation"
,
"Sequencer"
]
blender_version_min
=
"4.2.0"
# Optional: maximum supported Blender version
# blender_version_max = "5.1.0"
# License conforming to https://spdx.org/licenses/ (use "SPDX: prefix)
# https://docs.blender.org/manual/en/dev/extensions/licenses.html
license
=
[
"SPDX:GPL-2.0-or-later"
,
]
# Optional: required by some licenses.
# copyright = [
#   "2002-2024 Developer Name",
#   "1998 Company Name",
# ]
# Optional list of supported platforms. If omitted, the extension will be available in all operating systems.
# platforms = ["windows-amd64", "macos-arm64", "linux-x86_64"]
# Other supported platforms: "windows-arm64", "macos-x86_64"
# Optional: bundle 3rd party Python modules.
# https://docs.blender.org/manual/en/dev/extensions/python_wheels.html
# wheels = [
#   "./wheels/hexdump-3.3-py3-none-any.whl",
#   "./wheels/jsmin-3.0.1-py3-none-any.whl"
# ]
# Optional: build setting.
# https://docs.blender.org/manual/en/dev/extensions/command_line_arguments.html#command-line-args-extension-build
# [build]
# paths_exclude_pattern = [
#   "/.git/"
#   "__pycache__/"
# ]
Required values:
blender_version_min
:
Minimum supported Blender version - use at least
4.2.0
.
id
:
Unique identifier for the extension.
license
:
List of
licenses
, use
SPDX license identifier
.
maintainer
:
Maintainer of the extension.
name
:
Complete name of the extension.
schema_version
:
Internal version of the file format - use
1.0.0
.
tagline
:
One-line short description - cannot end with punctuation.
type
:
“add-on”, “theme”.
version
:
Version of the extension - must follow
semantic versioning
.
Optional values:
blender_version_max
:
Maximum version of Blender that can run this.
website
:
Website for the extension.
copyright
:
Some licenses require a copyright, copyrights must be “Year Name” or “Year-Year Name”.
permissions
:
Add-ons can list which resources they require. The available options are
[“files”, “network”, “clipboard”, “camera”, “microphone”].
tags
:
List of tags. See the
list of available tags
.
platforms
:
List of supported platforms. If omitted, the extension will be available in all operating systems.
The available options are
[“windows-amd64”, “windows-arm64”, “macos-x86_64”, “macos-arm64”, “linux-x86_64”]
wheels
:
List of relative file-paths
Python Wheels
.
Optional values for “build”:
These values are only used by the
build
sub-command.
paths
:
A list of file-paths relative to the manifest to include when building the package.
paths_exclude_pattern
:
A list of file-path patterns to exclude include when building the package.
The pattern matching is compatible with
gitignore
.
Note that setting this value isn’t supported when
paths
is also declared.
If the
[build]
table isn’t declared the following default is used:
[build]
paths_exclude_pattern
=
[
"__pycache__/"
,
".*"
,
]
Note
All the values present in the manifest file must be filled
(i.e., cannot be empty, nor text
""
, nor list
[]
).
If you don’t want to set one of the optional values just exclude it from the manifest altogether.
Command-line
#
Extensions can be built, validated & installed via command-line.
Note
Extension commands currently require a daily build of Blender with extensions enabled in the preferences.
To build the package defined in the current directory use the following commands:
blender
--command
extension
build
See
build
docs.
—
To validate the manifest without building the package:
blender
--command
extension
validate
You may also validate a package without having to extract it first.
blender
--command
extension
validate
add-on-package.zip
See
validate
docs.
See also
Extensions Command Line Arguments
.
Third party extension sites
#
Third party sites that wish to support extensions in Blender can do so in two ways:
Fork the entire
Extensions Website
as a start point; or
Host a JSON file listing all the packages of your repository.
To generate a valid JSON file you can use the command-line tool:
blender
--command
extension
server-generate
--repo-dir
=
/path/to/packages
This creates a listing from all the packages found in the specified location.
See
server-generate
docs.
Example of what the JSON is expected to look like:
{
"version"
:
"v1"
,
"blocklist"
:
[],
"data"
:
[
{
"id"
:
"blender_kitsu"
,
"name"
:
"Blender Kitsu"
,
"tagline"
:
"Pipeline management for projects collaboration"
,
"version"
:
"0.1.5-alpha+f52258de"
,
"type"
:
"add-on"
,
"archive_size"
:
856650
,
"archive_hash"
:
"sha256:3d2972a6f6482e3c502273434ca53eec0c5ab3dae628b55c101c95a4bc4e15b2"
,
"archive_url"
:
"https://extensions.blender.org/add-ons/blender-kitsu/0.1.0/download/"
,
"blender_version_min"
:
"4.2.0"
,
"maintainer"
:
"Blender Studio"
,
"tags"
:
[
"Pipeline"
],
"license"
:
[
"SPDX:GPL-3.0-or-later"
],
"website"
:
"http://extensions.blender.org/add-ons/blender-kitsu/"
,
"schema_version"
:
"1.0.0"
}
]
}
Just like for the manifest file, the optional fields (e.g.,
blender_version_max
) are either to have a value
or should be omitted from the entries.
For the official Extensions Platform, the
website
value is the page of the extension in the online platform.
Even if the manifest points to the project specific website.
Note
Any remote repository is expected to follow the latest
API
.
-------
for details.
The old packaging still works but is considered legacy,
and add-ons are recommended to switch to the new manifest file.
Additions
¶
Online Access
¶
bpy.app.online_access
is a read-only property to check whether Blender (and add-ons)
  is expected to access the internet.
Add-ons are expected to check for this property before accessing the internet. See
documentation
### Commit Summary: Add-ons - Blender 4.3 Manual
### Commit Details:
Add-ons
¶
Add-ons
let you extend Blender’s functionality using Python.
Most of the time you can get add-ons as part of the
Extensions
system.
Tip
If the Add-on does not activate when enabled,
check the
Console window
for any errors that may have occurred.
Internet Access
¶
If the add-on needs to use internet, it must check for the (read-only) property
bpy.app.online_access
.
This option is controlled by Preferences, which can be overriding via command-line
(
--offline-mode
/
--online-mode
).
For better error messages, you can check also for
bpy.app.online_access_overriden
,
to determine whether users can turn
Allow Online Access
on the preferences, or not.
Note
Add-ons that follow this setting will only connect to the internet if enabled.
However, Blender cannot prevent third-party add-ons from violating this rule.
Bundle Dependencies
¶
For add-ons to be bundled as extensions, they must be self-contained.
That means they must come with all its dependencies. In particular 3rd party Python modules.
There are a few options for this:
Bundle with
Python Wheels
.
This is the recommended way to bundle dependencies.
Bundle other add-ons together.
This is recommended if an add-on depends on another add-on.
Make sure that both the individual and the combined add-on
check for already registered types (Operators, Panels, …).
This avoids duplication of operators and panels on the interface
if the add-ons are installed as a bundle and individually.
Bundle with
Vendorize
This can be used as a way to bundle a pure Python dependencies as a sub-module.
This has the advantage of avoiding version conflicts although it requires some work to setup each package.
Local Storage
¶
Add-ons must not assume their own directory is user writable since this may not be the case for “System” repositories.
Writing files into the add-on’s directory also has the down side that upgrading the extension will remove all files.
Add-ons which need their own user directory should use a utility function provided for this purpose:
extension_directory
=
bpy
.
utils
.
extension_path_user
(
__package__
,
path
=
""
,
create
=
True
)
If you wish create subdirectories, this can be done with the
path
argument.
This directory will be kept between upgrades but will be removed if the extension is uninstalled.
Legacy vs Extension Add-ons
¶
With the introduction of Extensions in Blender 4.2, the old way of creating add-ons is considered deprecated.
While the changes are rather small they impact existing add-ons.
In order to allow a smooth transition process, the so-called legacy add-ons will continue to be supported by Blender.
They can be installed via
Install legacy Add-on
button in the User
Preferences.
All add-on maintainers are urged to convert the add-ons they want to share, so they are future proof and can support
features like updating from the extensions platform.
Converting a Legacy Add-on into an Extension
¶
Create a
manifest file
.
Remove the
bl_info
information (this is now in the manifest).
Replace all references to the module name to
__package__
.
Make all module imports to use relative import.
Use
wheels
to pack your external Python dependencies.
Remember to test it thoroughly.
Note
For testing it is important to
install the extension from disk
and check if
everything is working well. This will get you as close to the final experience as possible.
Extensions and Namespace
¶
The legacy add-ons would use their module name to access the preferences. This could lead to a name clash when
extensions with the same name (from different repositories) would be installed.
To prevent this conflict, the repository name is now part of the namespace.
For example, now instead of
kitsu
the module name would be
bl_ext.{repository_module_name}.kitsu
instead.
This has a few implications for preferences and module imports.
User Preferences and
__package__
¶
Add-ons can define their own preferences which use the package name as an identifier.
This can be accessed using
__package__
.
This was already supported in the legacy add-ons, but not reinforced.
As such this can break backward compatibility.
Before:
class
KitsuPreferences
(
bpy
.
types
.
AddonPreferences
):
bl_idname
=
"kitsu"
# ... snip ...
# Access with:
addon_prefs
=
bpy
.
context
.
preferences
.
addons
[
"kitsu"
]
Now:
class
KitsuPreferences
(
bpy
.
types
.
AddonPreferences
):
bl_idname
=
__package__
# ... snip ...
# Access with:
addon_prefs
=
bpy
.
context
.
preferences
.
addons
[
__package__
]
Sub-packages
An add-on that defines sub-packages (sub-directories with their own
__init__.py
file)
that needs to use this identifier will have to import the top-level package using a relative import.
from
..
import
__package__
as
base_package
Then
base_package
can be used instead of
__package__
.
The
..
imports relative to the packages parent, sub-sub-packages must use
...
and so on.
Note
The value of
__package__
will vary between systems so it should never be replaced with a literal string.
Extensions must not manipulate the value of
__package__
as this may cause unexpected behavior or errors.
Relative Imports
¶
before
:
from
kitsu
import
utils
now
:
from
.
import
utils
Importing packages within the add-on module need to use relative paths.
This is a standard Python feature and only applicable for add-ons that have multiple folders.
This was already supported in the legacy add-ons, but not reinforced. As such this can break backward compatibility.
-------
.
Also available is
bpy.app.online_access_override
which tells whether Blender was launched with
--offline-mode
/
--online-mode
.
bpy.app
Module
¶
Added
bpy.app.python_args
to support calling Python in an environment matching Blender's Python environment.
  (
14b03fca3c
### Commit Summary: PyAPI: add bpy.app.python_args, use when calling Python from Blender · 14b03fca3c - blender - Blender Projects
### Commit Details:
Expose arguments to use when creating a Python sub-process.

Python could fail to start when loaded in a customized environment,
with PYTHONPATH set for e.g. Blender ignores these and loads but a
Python sub-process attempts to use these environment variables which
may point to incompatible Python versions.

Resolve the root cause of
#124731
.
-------
).
Note: this was back-ported to 4.2.1 and is not available in 4.2.0.
bpy.utils
Module
¶
The
EXTENSIONS
option has been added to
bpy.utils.user_resource()
(
dc9430c480
### Commit Summary: Extensions: support system repositories & BLENDER_SYSTEM_EXTENSIONS · dc9430c480 - blender - Blender Projects
### Commit Details:
Support for "System" extensions as an alternative to the current
"User" extensions repository.

The purpose of this change is to support bundling extensions for
offline work or in environments where users setting up thier own
extensions isn't desirable, see
#122512
.

Details:

The default "System" repository on Linux will for example use:
- `/usr/share/blender/4.2/extensions/{system}` For system installs.
- `./4.2/extensions/{system}` For portable installs.

- Blender's default startup now has a "System" repository
  which users or administrators may populate.

- Repositories can select between User/System paths,
  setting a custom path overrides overrides this setting.

- Add "BLENDER_SYSTEM_EXTENSIONS" (matching "BLENDER_LOCAL_EXTENSIONS").

Ref
!122832
-------
).
Add
bpy.utils.register_cli_command
&
unregister_cli_command
so scripts can define their own command line functionality via (
-c
,
--command
).
  (
9372e0dfe0
### Commit Summary: CLI: support defining custom commands via C++ & Python API · 9372e0dfe0 - blender - Blender Projects
### Commit Details:
Add support for add-ons to define commands using the new argument
`-c` or `--command`.

Commands behave as follows:

- Passing in a command enables background mode without the need to pass
  in `--background`.
- All arguments following the command are passed to the command
  (without the need to use the `--` argument).
- Add-ons can define their own commands via
  `bpy.utils.register_cli_command` (see examples in API docs).
- Passing in `--command help` lists all available commands.

Ref
!119115
-------
)
Add
bpy.utils.extension_path_user(__package__, path="", create=False)
(
96906536db
### Commit Summary: Extensions: add a Python API for user editable extension directories · 96906536db - blender - Blender Projects
### Commit Details:
Provide a convenient way to access a writable directory for extensions.
This will typically be accessed via:

  bpy.utils.extension_path_user(__package__, create=True)

This API is provided as some extensions on extensions.blender.org
are writing into the extensions own directory which is error prone:

- The extensions own directory is removed when upgrading.
- Users may not have write access to the extensions directory,
  especially with "System" repositories which may be on shared network
  drives for example.

These directories are only removed when:

- Uninstalling the extension.
- Removing the repository and its files.
-------
).
Animation
¶
rna_struct.keyframe_insert()
now has a new, optional keyword argument
keytype
to set the key
  type (
1315991ecb
### Commit Summary: Anim: add keytype argument to `keyframe_insert()` RNA function · 1315991ecb - blender - Blender Projects
### Commit Details:
Add an optional keyword argument `keytype` to the
`rna_struct.keyframe_insert()` function.

This makes it possible to set the new key's type. The code for this was
almost all in place, the only thing that was missing was the RNA
wrapper, which is what this commit adds.

Example: `bpy.context.object.keyframe_insert("location",
keytype='JITTER')`

There is no backward compatibility issue here, because the argument is
optional and defaults to the previously hardcoded value of `KEYFRAME`.

#120578
-------
).
  This makes it possible to set the new key's type directly.
  Example:
bpy.context.object.keyframe_insert("location", keytype='JITTER')
.
There is a new function on the F-Curve:
bake
.
  This creates keys at a given interval for a given range on the existing curve
  (
20a4c9c928
### Commit Summary: Anim: Implement RNA function on the FCurve to bake keys · 20a4c9c928 - blender - Blender Projects
### Commit Details:
This exposes the bake function introduced with
#111263
to the RNA of the FCurve.
That makes it a lot easier to use that functionality from python.

#120783
-------
).
Layout Panels
¶
Added support for layout panels for operator properties drawing, in popups, redo panel and the
file browser sidebar. Add-ons are recommended to use panels for organizing properties now,
to follow Blender user interface conventions.
(
aa03646a74
### Commit Summary: UI: support layout panels in popups · aa03646a74 - blender - Blender Projects
### Commit Details:
Enables operators that uses `WM_operator_props_dialog_popup`
or `redo` popup to use layout panels.

Other popups would likely also support layout panels, only
they need to set its dummy panel with `UI_popup_dummy_panel_set`.
Popups don't normally use `Panel`, but that's the type that stores the
layout panel states. Therefore, to use layout panels in a popup, one
currently needs to create a dummy panel whose purpose is to store the
layout panel states for as long as the popup is open.

Alternatively, we could potentially also store the layout panel states
somewhere else in the future for popups, but that might be a more involved
change for now.

See
#119519
for an example script that uses layout panels in a popup.

#119519
-------
,
02681bd44d
### Commit Summary: UI: support layout panels in popovers · 02681bd44d - blender - Blender Projects
### Commit Details:
Make use of UI_popup_dummy_panel_set so layout panels can be used.
-------
)
Exporters
¶
Exporter add-ons can add support for the new
Collection Exporters
.
This requires a
FileHandler
with
bl_export_operator
, and a string property named
collection
on the operator to indicate the collection to export.
See the FBX and glTF add-ons for an example.
Modal Operators
¶
Window.modal_operators
provides a list of running modal operators.
  (
#122193
)
Modal operator can add
MODAL_PRIORITY
to
bl_options
to handle events before other
  modal operators. (
6efd7a6a50
### Commit Summary: Operators: Add option to give a modal operator priority in event handling · 6efd7a6a50 - blender - Blender Projects
### Commit Details:
This may be used by add-ons like screencast keys, to log events before a
modal operator like transform handles them.

#122226
-------
)
Handlers
¶
Render: include info string for "render_stats" handler
  (
fcc481a407
### Commit Summary: Render: include info string for "render_stats" handler · fcc481a407 - blender - Blender Projects
### Commit Details:
The "render_stats" handler now includes the message line that was
written to stdout as the first arg (using `BKE_callback_exec_string`
instead of just `BKE_callback_exec_null`).

This can be useful to track render progress (and people were relying on
parsing stdout in the past).

Was a request in chat.

This also corrects possible output from the callback being written in
between message parts in `do_write_image_or_movie` (which was probably a
mistake in
93d5e106aa
).

#119789
-------
)
UI
¶
Add support defaulting to cancel for operator confirm/cancel buttons:
WindowManager.invoke_props_dialog(..., cancel_dfault=False)
(
1cfc83d5f6
### Commit Summary: UI: add cancel_default option to WindowManager.invoke_props_dialog · 1cfc83d5f6 - blender - Blender Projects
### Commit Details:
Make it possible that the cancel option is default for operator
popups.
-------
).
Add
Region.tag_refresh_ui
to support refreshing popups such as popovers or operator dialogs
  (
fa27d2fe65
### Commit Summary: PyAPI: expose Region.tag_refresh_ui · fa27d2fe65 - blender - Blender Projects
### Commit Details:
Expose ED_region_tag_refresh_ui to the Python API.
This allows scripts to trigger regions to refresh which was previously
only accessible indirectly (via wmOperatorType::check).

Needed so scripts can make the splash screen refresh using a timer,
see
#120612
.
-------
).
Add
Context.region_popup
to access the region of a popup
  (
742a8b47cd
### Commit Summary: PyAPI: expose the popup region in the context · 742a8b47cd - blender - Blender Projects
### Commit Details:
Expose the region used for a temporary popup to the context so it's
possible for scripts to access the popup-region they're being drawn in.

Note that the internal naming is currently "menu" which is misleading
as these are used for all kinds of dialogs & popups. The RNA member is
called `region_popup` in this commit,
we could consider changing the name internally too.

Needed so it's possible for scripts to access the splash screen
so it can be refreshed, see:
#120612
.
-------
).
Breaking changes
¶
Statically Typed IDProperties
¶
IDProperties have never be statically typed before, modifying their type was (way) too easy from
Python. A mere assignment of a float value to an IDProperty from Python code would e.g.
convert that property to a 'double' one. This was especially problematic for system-defined
IDProperties (i.e. these used as backend storage for internal Blender data, like geometry node
modifier properties, or Python-defined 'dynamic RNA' properties).
It would also easily break library overrides,
which cannot give useful results when the type of the reference and override data differs.
The following IDProperties now have a fixed,
static type that cannot be modified from the python API.
In array (vector) cases, the length is also considered as part of the type, and therefore fixed.
System-defined:
Geometry Node modifier settings IDProperties.
Python-defined properties (through the
bpy.props.
module).
User-defined:
Properties created from the UI (
Custom Properties
panel, in the
Properties
editor),
  when their
Library Overridable
option is enabled.
When assigning a value to such property, a 'reasonable conversion' is attempted if possible (e.g.
an integer can be converted to a float, but a float cannot be assigned to an integer IDProperty),
otherwise the assignment fails.
Note
Technically, this is a breaking change.
In particular in Geometry Nodes modifier case, where the 'expected' way to
access these data from python is currently through 'raw' IDProperty path.
However, practically, no 'valid' usages of the IDProperties should be broken by it.
Further details can be found in the
design task
.
Commits:
4d1fe98604
### Commit Summary: IDProps: Add 'static type' option to IDProperties. · 4d1fe98604 - blender - Blender Projects
### Commit Details:
This implements (most of) the proposal in
#122743
:

* Add a new `IDP_FLAG_STATIC_TYPE` IDProperty flag.
* Update `BPy_IDProperty_Map_ValidateAndCreate` and related to never
  change an existing property type if statically typed.

The biggest change happens in bpy assignement code, since instead of
replacing the old exisitng property by a newly created one, and copying
over a few settings, now the old property is kept if possible, and a new
one is only created if needed.

And in case the existing property is statically typed, if it cannot be
re-used to store the given value, and error is reported and it remains
unchanged.

`IDP_ARRAY` is also supported for basic numeric types, so 'vector'
properties and such work as expected. Lentgh is considered as part of
the static type (i.e. one can only assign a 3 components py sequence to
a 3-len array property, etc.).

Such in-place update is not yet implemented for `IDP_IDPARRAY` and
`IDP_GROUP` types. While important (especially the group one), they are
not that critical for the current issues related to changing IDProperty
types.
-------
,
b278e37f70
### Commit Summary: IDProps: Make 'dynamic RNA' IDProperties statically typed. · b278e37f70 - blender - Blender Projects
### Commit Details:
All IDProperties generated as part of 'storage backend' for dynamic RNA
properties are now statically typed.

Also adds some basic unittests for the new statically typed IDProperty
system, based on py-defined RNA data.

Ref.
#122743
.
-------
,
76f03eb141
### Commit Summary: IDProps: Make overridable IDProps systematically statically typed. · 76f03eb141 - blender - Blender Projects
### Commit Details:
LibOverride gets practically useless when types of 'matching' data
differs between the linked reference data and the overridden one.

Ref.
#122743
.
-------
,
9c41bf4fa2
### Commit Summary: IDProps: Make GeometryNode modifier properties statically typed. · 9c41bf4fa2 - blender - Blender Projects
### Commit Details:
Conceptually, these are the same as IDProps used for regular dynamic RNA
data (should have been done that way from the beginning). At least make
them statically typed, to avoid all kind of issues when the IDProp type
change and does not match expectations from the geometry nodes anymore.

Ref.
#122743
.

#122891
-------
bpy.utils
Module
¶
The
AUTOSAVE
option has been removed from
bpy.utils.user_resource()
(
6bfc8612bf
### Commit Summary: Cleanup: remove BLENDER_USER_AUTOSAVE · 6bfc8612bf - blender - Blender Projects
### Commit Details:
This was only used on WIN32 when the temporary directory didn't exist.
When the check was added [0] this made some sense because it relied on
`U.tempdir` existing, since then additional checks have been added to
ensure a temporary directory can be used. Further, this fall-back
location isn't documented in the user manual.

[0]:
615db01b01
-------
).
Render Settings
¶
EEVEE identifier has been changed to
BLENDER_EEVEE_NEXT
Motion Blur settings have been de-duplicated between Cycles and EEVEE and moved to
bpy.types.RenderSettings
. (
74b8f99b43
### Commit Summary: Render: Merge EEVEE and Cycles motion blur settings · 74b8f99b43 - blender - Blender Projects
### Commit Details:
Merge duplicated motion blur settings between Cycles and EEVEE,
and move them to `RenderData`/`scene.render`:
* `scene.cycles.motion_blur_position` -> `scene.render.motion_blur_position`
* `scene.eevee.use_motion_blur` -> `scene.render.user_motion_blur`
* `scene.eevee.motion_blur_position` -> `scene.render.motion_blur_position`
* `scene.eevee.motion_blur_shutter` -> `scene.render.motion_blur_shutter`

On the C/C++ side, this also renames `RenderData::blurfac` to
`RenderData::motion_blur_shutter`.

#117913
-------
)
scene.cycles.motion_blur_position
->
scene.render.motion_blur_position
scene.eevee.use_motion_blur
->
scene.render.user_motion_blur
scene.eevee.motion_blur_position
->
scene.render.motion_blur_position
scene.eevee.motion_blur_shutter
->
scene.render.motion_blur_shutter
Light cast shadow setting have been de-duplicated between Cycles and EEVEE and moved to
bpy.types.Light
. (
1036d9bdb2
### Commit Summary: Cycles: Use blender's `use_shadow` RNA property · 1036d9bdb2 - blender - Blender Projects
### Commit Details:
This unify Cycles and EEVEE setting.
We always copy the Cycles setting in versionning
except if the first scene is using EEVEE as renderer.

Note that this currently breaks importers
addons who will try to `cycles.cast_shadow`property
on the light.

#121804
-------
)
light.cycles.cast_shadow
->
light.use_shadow
Bloom has been deprecated in EEVEE. (
#123059
)
view_layer.eevee.use_pass_bloom
scene.eevee.use_bloom
scene.eevee.bloom_threshold
scene.eevee.bloom_color
scene.eevee.bloom_knee
scene.eevee.bloom_radius
scene.eevee.bloom_clamp
scene.eevee.bloom_intensity
EEVEE (pre 4.2) specific Material settings have been deprecated or aliased where possible.
  (
c7807a425a
### Commit Summary: EEVEE: Alias/remove legacy RNA material attributes · c7807a425a - blender - Blender Projects
### Commit Details:
- `bpy.types.Material.blend_method` aliases `bpy.types.Material.surface_render_method`.
  'Opaque' and 'Alpha Clip' maps to deferred.
- Renamed `show_transparent_back` to `use_transparency_overlap`
- Renamed `use_screen_refraction` to `use_raytrace_refraction`
- Deprecate `use_sss_translucency` and `use_sss_translucency`

Related to:
#113976
**NOTE**
The light probe changes will be done in a different patch.
Both patches should land just before we remove EEVEE Legacy
from the code-base.

#122297
-------
)
bpy.types.Material.blend_method
=>
bpy.types.Material.surface_render_method
.
  'Opaque' and 'Alpha Clip' maps to deferred.
show_transparent_back
has been renamed to
use_transparency_overlap
.
use_screen_refraction
has been renamed to
use_raytrace_refraction
.
use_sss_translucency
and
use_sss_translucency
have been deprecated.
Light probe API has been changed. (
6a71a91b83
### Commit Summary: EEVEE-Next: Light Probe RNA · 6a71a91b83 - blender - Blender Projects
### Commit Details:
Split `bpy.types.LightProbe` into specialized subclasses.
- Rename all grid_* to remove the prefix in the RNA and limit access to
  volume probe.
- Parallax and other sphere probe only properties should be limited to
  sphere probe.
- `visibility` properties are deprecated (to be removed in a future
  Blender version)

Ref
#113976
#122353
-------
)
Each light probe type now has its own type ()
grid_
prefix has been removed and access has been limited to volume probes.
Parallax and other sphere probe only properties are be limited to sphere probes.
visibility
properties have been deprecated.
Deprecated shadow settings
shadow_cube_size
and
shadow_cascade_size
are not used anymore and will be removed
  in a future release.
Nodes
¶
Unused
parent
argument removed from the
NodeTreeInterface.new_panel
function
  for creating node group panels. (
#118792
)
Some node properties have been renamed to fix name collisions
  (
deb332601c
### Commit Summary: Fix #113090, #111450, #104909: node rna properties collide with built-in names · deb332601c - blender - Blender Projects
### Commit Details:
This fixes the following name collisions:
* Compositor Box/Ellipse Mask node: `width` -> `mask_width`
  (also renamed the `height` property accordingly)
* Shader AOV Output node: `name` -> `aov_name`
* Geometry Color node: `color` -> `value`.

Those are breaking changes unfortunately, because looking up those property
names yielded the node-specific and not the common property. Therefore, this is
targeted at `main` instead of `4.1`.

#119284
-------
):
Compositor Box/Ellipse Mask node:
width
->
mask_width
(same for
height
)
Shader AOV Output node:
name
->
aov_name
Geometry Color node:
color
->
value
Image Object Operators
¶
The "add image object" operator has been deduplicated and unified into one operator:
object.empty_image_add
. (
013cd3d1ba
### Commit Summary: Fix: Remove duplicate image_add operators in the 3D view port · 013cd3d1ba - blender - Blender Projects
### Commit Details:
As part of
#118623
, we discovered that the operator used for adding images in the 3D viewport was not the same when drag and dropping as when adding it from the add menu. This lead to different and potentially confusing behaviour for the user when they use both.

This patch removes the python operator and unifies the functionality into one operator. It also renames the operator to be in line with the other "Add X" object operators.

#118973
-------
)
Previously there were two operators to add image empties
  (
object.load_reference_image
and
object.load_background_image
)
  with a separate operator for dropping (
object.drop_named_image
).
The "add/remove background image from camera" operator has been renamed to clarify that this is
  only for the camera object (
013cd3d1ba
### Commit Summary: Fix: Remove duplicate image_add operators in the 3D view port · 013cd3d1ba - blender - Blender Projects
### Commit Details:
As part of
#118623
, we discovered that the operator used for adding images in the 3D viewport was not the same when drag and dropping as when adding it from the add menu. This lead to different and potentially confusing behaviour for the user when they use both.

This patch removes the python operator and unifies the functionality into one operator. It also renames the operator to be in line with the other "Add X" object operators.

#118973
-------
):
view3d.background_image_add
->
view3d.camera_background_image_add
.
view3d.background_image_remove
->
view3d.camera_background_image_remove
.

'''''


14. Blender 4.2 LTS: Sculpt, Paint, Texture¶

Blender 4.2 LTS: Sculpt, Paint, Texture
¶
Sculpting
¶
New Tools
¶
Trim, Mask, Hide, and Face Set sculpt tools in Blender 4.2 LTS
All Trim, Face Set, Mask, and Hide tools now have Line and Polyline
counterparts, allowing for a quick way to create polygonal shapes.
Polyline Mask
-
Manual
### Commit Summary: Mask Gesture Tools - Blender 4.2 Manual
### Commit Details:
Mask Gesture Tools
#
Reference
Mode
:
Sculpt Mode
Mask gesture tools apply a constant value to all selected vertices within the selection area.
By default, these tools fully mask each vertex. Holding
Ctrl
while performing the selection
clears the mask.
All mask gesture tools can be activated in the Toolbar and are comprised of the following:
Box Mask
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Box Mask
Shortcut
:
B
Creates a new
Mask
based on a
box gesture
.
Lasso Mask
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Lasso Mask
Creates a new
Mask
based on a
lasso gesture
.
Line Mask
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Line Mask
Creates a new
Mask
based on a
line gesture
.
Polyline Mask
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Polyline Mask
Creates a new
Mask
based on a
polyline gesture
.
Tool Settings
#
Front Faces Only
Only creates a mask on the faces that face towards the view.
-------
(
025df21a0f
### Commit Summary: Sculpt: Add Polyline Mask, Face Set, and Trim · 025df21a0f - blender - Blender Projects
### Commit Details:
This PR adds the *Polyline Mask*, *Polyline Face Set*, and
*Polyline Trim* tools.

## Limitations
* *Polyline Face Set* is not added to either of the *Sculpt*
or *Face Sets* menu as none of the other face set gestures are in
either.

#122248
-------
)
Polyline Hide
-
Manual
### Commit Summary: Hide Gesture Tools - Blender 4.2 Manual
### Commit Details:
Hide Gesture Tools
#
Reference
Mode
:
Sculpt Mode
Hide gesture tools hide all selected vertices within the selection area and any of their connected
edges and faces.
Holding
Ctrl
while performing the selection reveals the vertices, edges, and faces.
Pressing
LMB
with any of these tools without also dragging reveals all elements of a mesh.
All hide gesture tools can be activated in the Toolbar and are comprised of the following:
Box Hide
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Box Hide
Hides vertices and connected edges and faces based on a
box gesture
.
Lasso Hide
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Lasso Hide
Hides vertices and connected edges and faces based on a
lasso gesture
.
Line Hide
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Line Mask
Hides vertices and connected edges and faces based on a
line gesture
.
Polyline Hide
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Polyline Mask
Hides vertices and connected edges and faces based on a
polyline gesture
.
Note
The Polyline Hide tool does not support showing all vertices via pressing
LMB
.
Tool Settings
#
Visibility Area
Determines whether all vertices inside or outside the selected area should be affected.
Inside
:
All vertices and connected elements inside the selection area will be hidden.
Outside
:
All vertices and connected elements outside the selection area will be hidden.
-------
(
55fc1066ac
### Commit Summary: Sculpt: Polyline hide operator · 55fc1066ac - blender - Blender Projects
### Commit Details:
This PR adds a polyline hide operator for sculpt mode as well as the
necessary generic callback code to allow using this gesture in other
selection tools.

Added features include:
* *Polyline Hide* operator
* `WM_gesture_polyline_*` callback functions for other operators
* Status bar text while using the polyline modal
* Common *Gesture Polyline* keymap for usage with the modal

Unlike the *Box Hide* and *Lasso Hide* operators, the *Polyline Hide*
operator does not provide a simple shortcut to click and show all
hidden elements in a mesh. This is because the existing operators
operate on a click-drag action while the new operator is invoked by
just a click.

Design Task:
#119353
#119483
-------
)
Polyline Face Set
-
Manual
### Commit Summary: Face Set Gesture Tools - Blender 4.2 Manual
### Commit Details:
Face Set Gesture Tools
#
Reference
Mode
:
Sculpt Mode
Face Set gesture tools apply a single new Face Set to all faces within the selection area.
All Face Set gesture tools can be activated in the Toolbar and are comprised of the following:
Box Face Set
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Box Face Set
Creates a new
Face Set
based on a
box gesture
.
Lasso Face Set
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Lasso Face Set
Creates a new
Face Set
based on a
lasso gesture
.
Line Face Set
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Line Face Set
Creates a new
Face Set
based on a
line gesture
.
Polyline Face Set
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Polyline Face Set
Creates a new
Face Set
based on a
polyline gesture
.
Tool Settings
#
Front Faces Only
Only creates a face set on the faces that face towards the view.
-------
(
025df21a0f
### Commit Summary: Sculpt: Add Polyline Mask, Face Set, and Trim · 025df21a0f - blender - Blender Projects
### Commit Details:
This PR adds the *Polyline Mask*, *Polyline Face Set*, and
*Polyline Trim* tools.

## Limitations
* *Polyline Face Set* is not added to either of the *Sculpt*
or *Face Sets* menu as none of the other face set gestures are in
either.

#122248
-------
)
Polyline Trim
-
Manual
### Commit Summary: Trim Gesture Tools - Blender 4.2 Manual
### Commit Details:
Trim Gesture Tools
#
Reference
Mode
:
Sculpt Mode
Trim gesture tools add or remove geometry based on a selection area.
This tool is especially useful for sketching an early base mesh for further
sculpting with the
voxel remesher
.
Using Lasso Trim set to
Join
#
The symmetrized mesh.
#
Sculpting with voxel remeshing.
#
New geometry is assigned to a new
Face Set
.
When removing geometry, the new interior geometry along the selection will be assigned
a new face set instead.
Note
It is not recommended to use this tool on a mesh above 100k
vertices when using
Difference
or
Union
as the Trim Mode
with the
Exact
Solver.
This tool is using a Boolean operation so it might take a long time to process.
For higher resolution meshes it is recommended to instead use the
Line Project
tool or the
Fair Positions
mode of the
Edit Face Set
tool to trim geometry.
Box Trim
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Box Trim
Performs a Boolean operation based on the area defined by a
box gesture
.
Lasso Trim
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Lasso Trim
Performs a Boolean operation based on the area defined by a
lasso gesture
.
Line Trim
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Line Trim
Performs a Boolean operation based on the area defined by a
line gesture
.
Note
The Line Trim tool does not support adding geometry. Only
Difference
mode is supported.
Polyline Trim
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Polyline Trim
Performs a Boolean operation based on the area defined by a
polyline gesture
.
Tool Settings
#
Solver
Algorithm used to calculate the Boolean intersections.
Fast
:
Uses a mathematically simple solver which offers the best performance;
however, this solver lacks support for overlapping geometry.
Exact
:
Uses a mathematically complex solver which offers the best results and has full
support for overlapping geometry; however, this solver is much slower than the
Fast Solver
.
Trim Mode
Geometry can be either added or removed by choosing one of these modes.
Difference
:
Removes geometry, filling any holes that are created.
Union
:
Creates a geometry and joins any intersections with existing geometry.
Join
:
Similar to
Union
but joins the mesh as separate geometry,
without performing any Boolean operations with existing geometry.
Shape Orientation
The method used to orientate the trimming shape.
View
:
Use the view to orientate the trimming shape.
Surface
:
Use the surface normal to orientate the trimming shape.
Extrude Mode
Fixed
:
Aligns new geometry orthogonally for 90 degree angles in depth.
Project
:
Aligns new geometry with the perspective of the current view for a tapered result.
Use Cursor for Depth
Use cursor location and radius for the dimensions and position of the trimming shape.
If not set, the tool uses the full depth of the object from the camera view.
-------
(
025df21a0f
### Commit Summary: Sculpt: Add Polyline Mask, Face Set, and Trim · 025df21a0f - blender - Blender Projects
### Commit Details:
This PR adds the *Polyline Mask*, *Polyline Face Set*, and
*Polyline Trim* tools.

## Limitations
* *Polyline Face Set* is not added to either of the *Sculpt*
or *Face Sets* menu as none of the other face set gestures are in
either.

#122248
-------
)
Polyline Hide
Line Hide
-
Manual
### Commit Summary: Hide Gesture Tools - Blender 4.2 Manual
### Commit Details:
Hide Gesture Tools
#
Reference
Mode
:
Sculpt Mode
Hide gesture tools hide all selected vertices within the selection area and any of their connected
edges and faces.
Holding
Ctrl
while performing the selection reveals the vertices, edges, and faces.
Pressing
LMB
with any of these tools without also dragging reveals all elements of a mesh.
All hide gesture tools can be activated in the Toolbar and are comprised of the following:
Box Hide
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Box Hide
Hides vertices and connected edges and faces based on a
box gesture
.
Lasso Hide
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Lasso Hide
Hides vertices and connected edges and faces based on a
lasso gesture
.
Line Hide
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Line Mask
Hides vertices and connected edges and faces based on a
line gesture
.
Polyline Hide
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Polyline Mask
Hides vertices and connected edges and faces based on a
polyline gesture
.
Note
The Polyline Hide tool does not support showing all vertices via pressing
LMB
.
Tool Settings
#
Visibility Area
Determines whether all vertices inside or outside the selected area should be affected.
Inside
:
All vertices and connected elements inside the selection area will be hidden.
Outside
:
All vertices and connected elements outside the selection area will be hidden.
-------
(
6e997cc757
### Commit Summary: Sculpt: Add Line Hide tool · 6e997cc757 - blender - Blender Projects
### Commit Details:
This PR adds the *Line Hide* tool and the corresponding
`PAINT_OT_hide_show_line_gesture` operator to Sculpt Mode.

*Line Hide* supports common modal functionality including:
* Snapping to angles
* Flipping the selection area
* Moving selection area

Addresses one of the tools in
#80390
#119671
-------
)
Line Face Set
-
Manual
### Commit Summary: Face Set Gesture Tools - Blender 4.2 Manual
### Commit Details:
Face Set Gesture Tools
#
Reference
Mode
:
Sculpt Mode
Face Set gesture tools apply a single new Face Set to all faces within the selection area.
All Face Set gesture tools can be activated in the Toolbar and are comprised of the following:
Box Face Set
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Box Face Set
Creates a new
Face Set
based on a
box gesture
.
Lasso Face Set
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Lasso Face Set
Creates a new
Face Set
based on a
lasso gesture
.
Line Face Set
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Line Face Set
Creates a new
Face Set
based on a
line gesture
.
Polyline Face Set
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Polyline Face Set
Creates a new
Face Set
based on a
polyline gesture
.
Tool Settings
#
Front Faces Only
Only creates a face set on the faces that face towards the view.
-------
(
7726e7f563
### Commit Summary: Sculpt: Add Line Face Set Tool · 7726e7f563 - blender - Blender Projects
### Commit Details:
This PR adds the `Line Face Set` tool and adds it to the following
location:
* Sculpt Mode toolbar

## Limitations
None of the existing Face Set gesture operators exist in either the
Sculpt dropdown or the Face Set dropdown, this PR does not add the Line
Face set tool in either location as well.

#122245
-------
)
Line Trim
-
Manual
### Commit Summary: Trim Gesture Tools - Blender 4.2 Manual
### Commit Details:
Trim Gesture Tools
#
Reference
Mode
:
Sculpt Mode
Trim gesture tools add or remove geometry based on a selection area.
This tool is especially useful for sketching an early base mesh for further
sculpting with the
voxel remesher
.
Using Lasso Trim set to
Join
#
The symmetrized mesh.
#
Sculpting with voxel remeshing.
#
New geometry is assigned to a new
Face Set
.
When removing geometry, the new interior geometry along the selection will be assigned
a new face set instead.
Note
It is not recommended to use this tool on a mesh above 100k
vertices when using
Difference
or
Union
as the Trim Mode
with the
Exact
Solver.
This tool is using a Boolean operation so it might take a long time to process.
For higher resolution meshes it is recommended to instead use the
Line Project
tool or the
Fair Positions
mode of the
Edit Face Set
tool to trim geometry.
Box Trim
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Box Trim
Performs a Boolean operation based on the area defined by a
box gesture
.
Lasso Trim
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Lasso Trim
Performs a Boolean operation based on the area defined by a
lasso gesture
.
Line Trim
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Line Trim
Performs a Boolean operation based on the area defined by a
line gesture
.
Note
The Line Trim tool does not support adding geometry. Only
Difference
mode is supported.
Polyline Trim
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Polyline Trim
Performs a Boolean operation based on the area defined by a
polyline gesture
.
Tool Settings
#
Solver
Algorithm used to calculate the Boolean intersections.
Fast
:
Uses a mathematically simple solver which offers the best performance;
however, this solver lacks support for overlapping geometry.
Exact
:
Uses a mathematically complex solver which offers the best results and has full
support for overlapping geometry; however, this solver is much slower than the
Fast Solver
.
Trim Mode
Geometry can be either added or removed by choosing one of these modes.
Difference
:
Removes geometry, filling any holes that are created.
Union
:
Creates a geometry and joins any intersections with existing geometry.
Join
:
Similar to
Union
but joins the mesh as separate geometry,
without performing any Boolean operations with existing geometry.
Shape Orientation
The method used to orientate the trimming shape.
View
:
Use the view to orientate the trimming shape.
Surface
:
Use the surface normal to orientate the trimming shape.
Extrude Mode
Fixed
:
Aligns new geometry orthogonally for 90 degree angles in depth.
Project
:
Aligns new geometry with the perspective of the current view for a tapered result.
Use Cursor for Depth
Use cursor location and radius for the dimensions and position of the trimming shape.
If not set, the tool uses the full depth of the object from the camera view.
-------
(
d4a61647bf
### Commit Summary: Sculpt: Add Line Trim tool · d4a61647bf - blender - Blender Projects
### Commit Details:
This PR adds the *Line Trim* tool to Sculpt mode. It is exposed via
the toolbar along with the other *Trim* tools and as an entry in the
*Sculpt* menu.

## Technical Approach
Line gestures are represented as two points in screen space: the `start`
and `end` of the gesture. Trim tools work by taking a set of screen
points as the top face of a volume, projecting a copy of the face into
the scene, then using that as the operand shape for boolean operations.
To behave as users would expect, the *Line Trim* tool does the following
steps to make the initial face:
1. Take the sculpted object's bounding box.
2. Project the bounding box into screen space
3. Take the magnitude of the diagonal line made from the bounding box
4. Use the magnitude multiplied by an arbitrary factor to ensure the
   initial line is long enough to fully divide the object.
5. Create two points by moving in a perpendicular direction from start
   and end points.
6. Use the resulting four points as vertices of the quad in screen space.

## Differences with Other Trim Tools
* Line Trim **only** supports the **Difference** mode. As such, the
corresponding tool options have been disabled in the header.

## Alternatives
* Instead of using a boolean operation, this could be achieved by using
a bisect operation when using the *Fixed* projection mode. While this
may result in a better performing tool, it is not guaranteed and
requires extra work to integrate this approach.

#120845
-------
)
Lasso Hide
-
Manual
### Commit Summary: Hide Gesture Tools - Blender 4.2 Manual
### Commit Details:
Hide Gesture Tools
#
Reference
Mode
:
Sculpt Mode
Hide gesture tools hide all selected vertices within the selection area and any of their connected
edges and faces.
Holding
Ctrl
while performing the selection reveals the vertices, edges, and faces.
Pressing
LMB
with any of these tools without also dragging reveals all elements of a mesh.
All hide gesture tools can be activated in the Toolbar and are comprised of the following:
Box Hide
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Box Hide
Hides vertices and connected edges and faces based on a
box gesture
.
Lasso Hide
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Lasso Hide
Hides vertices and connected edges and faces based on a
lasso gesture
.
Line Hide
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Line Mask
Hides vertices and connected edges and faces based on a
line gesture
.
Polyline Hide
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Polyline Mask
Hides vertices and connected edges and faces based on a
polyline gesture
.
Note
The Polyline Hide tool does not support showing all vertices via pressing
LMB
.
Tool Settings
#
Visibility Area
Determines whether all vertices inside or outside the selected area should be affected.
Inside
:
All vertices and connected elements inside the selection area will be hidden.
Outside
:
All vertices and connected elements outside the selection area will be hidden.
-------
(
68afd22501
### Commit Summary: Sculpt: Add Lasso Hide tool · 68afd22501 - blender - Blender Projects
### Commit Details:
This commit adds the `SCULPT_OT_hide_show_lasso_gesture` and the
corresponding Lasso Hide tool.

* Exposes the selection type for both the lasso and box hide tools
  as a option in the header
* Adds functionality into `sculpt_gesture.cc` for handling lasso
  selections with the `Outside` selection type

For `SelectionType::Outside`, the current implementation opts to not
do any filtering on the PBVH node level due to cases where the node
is mostly covered by a single gesture.

Addresses one of the tools in
#80390
#119140
-------
)
Grow & Shrink Visibility
(
1ab3fffc1d
### Commit Summary: Sculpt: Add increase / decrease visibility operator · 1ab3fffc1d - blender - Blender Projects
### Commit Details:
This PR adds a new operator: `PAINT_OT_visibility_edit` to support
iteratively expanding or shrinking the visibility of a mesh, similar to
the *Grow / Shrink Mask* actions and the *Grow / Shrink Face Set*
options. This operator is exposed via two new entries in the *Sculpt*
toolbar entry as *Show More* and *Show Less* and have also been
assigned to Page Up and Page Down in the default Blender keybinds for
Sculpt Mode.

### Technical Details
Each of the PBVH types is solved slightly differently, though the
general principle for each is as follows:

1. Make a copy of the current mesh visibility state
2. Iterate over elements (faces & corners if available, otherwise
   vertices) to look at adjacency information
3. Apply appropriate visibility change to vertices
4. Sync face visibility

### Limitations
* Currently, like all other operators in the `paint_hide.cc` file. This
  new operator is limited to Sculpt mode only.

Based off of [this](
https://blender.community/c/rightclickselect/pz4y/
)
RCS request.

#120282
-------
)
Grow/Shrink Visibility
New Options
¶
Trim tools now can use either
Fast
or
Exact
solvers.
  (
documentation
### Commit Summary: Trim Gesture Tools - Blender 4.2 Manual
### Commit Details:
Trim Gesture Tools
#
Reference
Mode
:
Sculpt Mode
Trim gesture tools add or remove geometry based on a selection area.
This tool is especially useful for sketching an early base mesh for further
sculpting with the
voxel remesher
.
Using Lasso Trim set to
Join
#
The symmetrized mesh.
#
Sculpting with voxel remeshing.
#
New geometry is assigned to a new
Face Set
.
When removing geometry, the new interior geometry along the selection will be assigned
a new face set instead.
Note
It is not recommended to use this tool on a mesh above 100k
vertices when using
Difference
or
Union
as the Trim Mode
with the
Exact
Solver.
This tool is using a Boolean operation so it might take a long time to process.
For higher resolution meshes it is recommended to instead use the
Line Project
tool or the
Fair Positions
mode of the
Edit Face Set
tool to trim geometry.
Box Trim
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Box Trim
Performs a Boolean operation based on the area defined by a
box gesture
.
Lasso Trim
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Lasso Trim
Performs a Boolean operation based on the area defined by a
lasso gesture
.
Line Trim
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Line Trim
Performs a Boolean operation based on the area defined by a
line gesture
.
Note
The Line Trim tool does not support adding geometry. Only
Difference
mode is supported.
Polyline Trim
#
Reference
Mode
:
Sculpt Mode
Tool
:
Toolbar ‣ Polyline Trim
Performs a Boolean operation based on the area defined by a
polyline gesture
.
Tool Settings
#
Solver
Algorithm used to calculate the Boolean intersections.
Fast
:
Uses a mathematically simple solver which offers the best performance;
however, this solver lacks support for overlapping geometry.
Exact
:
Uses a mathematically complex solver which offers the best results and has full
support for overlapping geometry; however, this solver is much slower than the
Fast Solver
.
Trim Mode
Geometry can be either added or removed by choosing one of these modes.
Difference
:
Removes geometry, filling any holes that are created.
Union
:
Creates a geometry and joins any intersections with existing geometry.
Join
:
Similar to
Union
but joins the mesh as separate geometry,
without performing any Boolean operations with existing geometry.
Shape Orientation
The method used to orientate the trimming shape.
View
:
Use the view to orientate the trimming shape.
Surface
:
Use the surface normal to orientate the trimming shape.
Extrude Mode
Fixed
:
Aligns new geometry orthogonally for 90 degree angles in depth.
Project
:
Aligns new geometry with the perspective of the current view for a tapered result.
Use Cursor for Depth
Use cursor location and radius for the dimensions and position of the trimming shape.
If not set, the tool uses the full depth of the object from the camera view.
-------
)
  (
881178895b
### Commit Summary: Sculpt: Add fast solver option for trim operations · 881178895b - blender - Blender Projects
### Commit Details:
This PR introduces the ability for users to switch between boolean
solvers while using the sculpt *Trim* tools (*Box Trim* & *Lasso Trim*)
much like the mesh boolean modifier and geometry node. Because the
*Exact* solver has performance issues with larger meshes, the *Fast*
solver is set to be the default.

In my very rough timing tests on my laptop on a mesh with **1.7m**
vertices, a *Trim* operation with the *Fast* solver finishes in roughly
20 seconds as opposed to still being in progress after five minutes
with the *Exact* solver.

Addresses part of
#84229
#119699
-------
)
Other
¶
Sculpt and Weight Paint modes now use the global, customizable rotation
  increment for corresponding Line tools when snapping is enabled.
  For example Line Hide in Sculpt and Gradient in Weight Paint.
  (
1cf0d7ca6a
### Commit Summary: Sculpt: Add customizable increment for line tool snapping · 1cf0d7ca6a - blender - Blender Projects
### Commit Details:
Sculpt: Add customizable increment for line tool snapping

This PR exposes the snap increments introduced in
#118760
to the base
`WM_gesture_straightline` operators and exposes the increment menu to
allow users to change this value in both Sculpt and Weight Paint mode.

## Details
The full list of operators this affects:
* IMAGE_OT_sample_line
* PAINT_OT_weight_gradient
* MESH_OT_bisect
* PAINT_OT_mask_line_gesture
* SCULPT_OT_trim_line_gesture
* SCULPT_OT_project_line_gesture
* PAINT_OT_hide_show_line_gesture

## Compatibility
Previously, the hardcoded value for this snap increment was 15 degrees,
by using the toolsetting value, this changes the default to 5 degrees.

#121547
-------
)

'''''


15. Blender 4.2 LTS: User Interface¶

Blender 4.2 LTS: User Interface
¶
General
¶
Support for horizontal rules in vertical layouts, vertical rules in horizontal.
  (
4c50e6992f
### Commit Summary: UI: Configurable Layout Separators · 4c50e6992f - blender - Blender Projects
### Commit Details:
Ability to create vertical bar separators in horizontal layouts,
horizontal lines in popovers, and vertical (non-line) spacers in menus.

#117310
-------
)
Improved user interface scaling.
  (
85762d99ef
### Commit Summary: UI: Allow Some Buttons to Scale Width With Text Style · 85762d99ef - blender - Blender Projects
### Commit Details:
Allow some View3D buttons to change their width according to content
and Text Styles, rather than be fixed amount of UI_UNIT_X. Examples
include "Object Mode", "Transform Orientation", "Grease Pencil Layers",
"Texture Slots", "Vertex Groups", "Attribute", etc.

#119223
-------
,
f85989f5db
### Commit Summary: UI: Adjust template_ID Buttons Width For Content Length · f85989f5db - blender - Blender Projects
### Commit Details:
The Template_ID uses fixed widths for "new" and "open" buttons.
Although scaled by resolution scale, they do not take into account
language differences, Text Styles, etc and therefore frequently
overflow. This PR sets the buttons widths from the text size.

#119229
-------
,
196cd48aad
### Commit Summary: UI: Positioning of 3DView Sidebar Tab Titles · 196cd48aad - blender - Blender Projects
### Commit Details:
Improve the positioning of the tab titles in the 3D Viewport sidebar
by taking the Text Style size into consideration.

#119231
-------
,
23aaf88233
### Commit Summary: UI: Position of Current Frame Indicator Text · 23aaf88233 - blender - Blender Projects
### Commit Details:
Improve the positioning of the text on the current frame indicator
by taking the Text Style size into consideration.

#119236
-------
,
1f1fbda3ee
### Commit Summary: UI: template_ID button Width Minimums · 1f1fbda3ee - blender - Blender Projects
### Commit Details:
Use the prior fixed button widths as minimum sizes for the template_ID
new and open buttons. That way they will look the same as before under
most circumstances but will still adjust rather than overflow for
longer content or larger text sizes.

#119330
-------
)
Icon changes. (
42e7a720c9
### Commit Summary: UI: Add "Internet" Icon · 42e7a720c9 - blender - Blender Projects
### Commit Details:
Add an icon called INTERNET that looks like our current URL without the
mouse cursor, so it looks less specifically like a web document. So can
be used to represent other internet and cloud-based services.

#119186
-------
,
4e303751ff
### Commit Summary: UI: Some Icons Resized · 4e303751ff - blender - Blender Projects
### Commit Details:
21 icons slightly reworked to be a bit smaller. Icons like "solo", some
arrows including "file_refesh", etc are just a little large within the
bounds that they are displayed in. This gives them a bit more breathing
room.

#119425
-------
,
7b601464c3
### Commit Summary: UI: Add new TAG icon · 7b601464c3 - blender - Blender Projects
### Commit Details:
Introduce a new icon: `TAG`. A generic tag/label, to be used anywhere
there are tags.

Details and images in the pull request.

#122738
-------
)
Optimizations to the font shader. (
a05adbef28
### Commit Summary: BLF: optimizations and fixes to font shader · a05adbef28 - blender - Blender Projects
### Commit Details:
Simplifies/optimizes the "font" shader. It runs faster now too, but primarily
this is so that it loads/initializes faster.

* Instead of doing blur via individual bilinear samples (where each sample is 4
  texel fetches), do raw texel fetches of the kernel footprint and compute final
  result by shifting the kernel weights according to bilinear fraction weight.
  For 5x5 blur, this reduces number of texel fetches from 64 down to 36.
* Instead of checking "is the texel inside the glyph box? if so, then fetch it",
  first fetch it, and then set result to zero if it was outside. Simplifies the
  branching code flow in the compiled GPU shader.
* Avoid costly integer modulo/division for "unwrapping" the font texture. The
  texture width is always power of two size, so division/modulo can be replaced
  by masking and a shift. Setup uniforms to contain the needed data.

### Fixes

* The 3x3 blur was not doing a 3x3 blur, due to a copy-pasta typo (one of the
  sample offsets was repeated twice, and thus another sample offset was
  missing).
* Blur towards left/top edges of the glyphs had artifacts, because float->int
  casting in GLSL rounds towards zero, but the code actually wanted to round
  towards floor.

Image of how the blur has changed in the PR.

### First time initialization

* Windows 10, NVIDIA RTX 3080Ti, OpenGL: 274.4ms -> 51.3ms
* macOS, Apple M1 Max, Metal: 456ms -> 289ms (this is including PSO creation
  time).

### Shader performance/complexity

Performance I only measured on macOS (M1 Max), by making a BLF text that is
scaled up to cover most of screen via Python. Using Xcode Metal profiler,
drawing that text with 5x5 shadow blur: 1.5ms -> 0.3ms.

More performance analysis details in PR.

#119653
-------
)
Interface font updated to Inter 4.0. (
f235990009
### Commit Summary: UI: Updated Interface Font to Inter Version 4.0 · f235990009 - blender - Blender Projects
### Commit Details:
Upgrade Inter font from 3.019 (0a5106e0b) to 4.000 (a52131595)

#119720
-------
)
Inter font
Corrected coloring when hovering inactive UI items. (
5bed08fc56
### Commit Summary: Fix #120133: Incorrect BG color Hovering Inactive · 5bed08fc56 - blender - Blender Projects
### Commit Details:
Hovering on inactive menu items combines the colors in a way that does
not work correctly with light themes. This PR changes nothing but how
colors are mixed for hover + inactive, doing so similarly to hovering
active.

#120262
-------
)
Tooltip changes. (
3d85765e14
### Commit Summary: UI: Position of Tooltips for Labels · 3d85765e14 - blender - Blender Projects
### Commit Details:
Move tooltip position to mouse position rather than bottom of the
region for labels that are taller than one line.

#117879
-------
,
08cd80a284
### Commit Summary: Fix #118066: File Browser List View Tooltips · 08cd80a284 - blender - Blender Projects
### Commit Details:
In File Browser list view show tooltips for both the icon and the name
portion of the line to consistently show them no matter where you hover

#118071
-------
)
Improved square color picker when shown very wide. (
857341a7a7
### Commit Summary: Fix #118473: Glitches for Square Color Picker When Very Wide · 857341a7a7 - blender - Blender Projects
### Commit Details:
When using a square color picker you can drag it very wide in an RGB
node. Once over a threshold the round cursor in the color canvas will
turn into a vertical bar. Caused by (dumb) proportion test. Replaced
with a proper check for gradient type.

#118542
-------
)
Tooltips for colors featuring large sample and values. (
41bbbd2359
### Commit Summary: UI: Color Tooltips · 41bbbd2359 - blender - Blender Projects
### Commit Details:
Hovering over a color button shows a tooltip that includes the color
values and a large sample.

#117815
-------
)
Color tooltips
Asset Browser now supports Maximize Area. (
2d5a83f294
### Commit Summary: UI: Show Maximize Area on Asset Browser Header Context Menu · 2d5a83f294 - blender - Blender Projects
### Commit Details:
On the Header Context Menu, show "Maximize Area" for Asset Browser and
File Browser.

#118060
-------
)
Wavelength node now uses nanometer-scale inputs. (
cc541f2c07
### Commit Summary: UI: Add Wavelength unit for scene-independent nanometer-scale inputs · cc541f2c07 - blender - Blender Projects
### Commit Details:
Currently this is only used for the Wavelength node, but it will also be relevant for the Thin Film Interference support in the Principled BSDF.

#120900
-------
)
Status Bar
¶
Improvements to Status Bar keymap display. (
c4e5a70e07
### Commit Summary: UI: Optional Complex Layout for Workspace Status · c4e5a70e07 - blender - Blender Projects
### Commit Details:
Optionally allow complex layout instead of just plain text when using
ED_workspace_status_text.

#120595
-------
,
44606c5e4d
### Commit Summary: UI: Status Bar While Menus Are Open · 44606c5e4d - blender - Blender Projects
### Commit Details:
While menus are open display a nicer status in the Status Bar, whether
spacebar search or type to search.

#121502
-------
,
42a8947eb1
### Commit Summary: UI: Edit Mesh Inset Faces Status Display · 42a8947eb1 - blender - Blender Projects
### Commit Details:
Show changing values in the area header, but keymap entries on the
Status Bar.

#121504
-------
,
dfe060ea6f
### Commit Summary: UI: Edit Mesh Knife Status Display · dfe060ea6f - blender - Blender Projects
### Commit Details:
While using the knife tool show keymap entries and statuses in a more
informative and concise way.

#121506
-------
,
03cd8b359b
### Commit Summary: UI: Edge Slide Status Display · 03cd8b359b - blender - Blender Projects
### Commit Details:
While using Edge Slide show only changing values in the area header and
only keymap entries on the Status Bar

#121585
-------
,
3fbc603137
### Commit Summary: UI: Mesh Bevel Status Display · 3fbc603137 - blender - Blender Projects
### Commit Details:
While using the mesh Bevel operator, show the changing values on the
area header and keymap entries on the Status Bar using the new system
that shows icons and toggles. Approximately 30% shorter display.

#121796
-------
,
1391b7de41
### Commit Summary: UI: Loop Cut Status Display · 1391b7de41 - blender - Blender Projects
### Commit Details:
While using "Loop Cut and Slide" show the cut count and smoothness
values on the area header and the keymap entries on the Status Bar.

#121801
-------
,
02798f8438
### Commit Summary: UI: Mesh Shear Status Display · 02798f8438 - blender - Blender Projects
### Commit Details:
While using Mesh Shear, show only changing values in the area header and
only keymap entries on the Status Bar

#122341
-------
)
Status bar keymap
Status Bar now collapses multiple X/Y/Z operations to a more concise format. (
49bd285529
### Commit Summary: UI: Collapse XYZ Operations in Status Bar · 49bd285529 - blender - Blender Projects
### Commit Details:
Reduce the number of duplicated modal operator keymap entries by just
showing "XYZ Axis" rather than "X X Axis", "Y Y Azis", etc. This allows
more items to be shown on the status bar. Note this only does so if the
keymap contains all of X, Y, & Z.

Co-authored-by: Brecht Van Lommel
#120148
-------
)
Status bar keymap
Expanded Status Bar icons for keymap events. (
d1b6621903
### Commit Summary: UI: Complete Event Icon Coverage · d1b6621903 - blender - Blender Projects
### Commit Details:
This PR completes coverage of the event icons used to represent keymap
entries on the status bar. This adds 0-9, non-alpha keys, tablet, F13-
F24, NDOF buttons, etc.

#120117
-------
)
Keymap icons
Tighter Status Bar keymap spacing. (
65bfae2258
### Commit Summary: UI: Status Bar Keymap Spacing · 65bfae2258 - blender - Blender Projects
### Commit Details:
Adjustments to the spacing of keymap items shown in the status bar
while idle and during modal operators. Decreased space between icon
and related text makes each item have better separation.

#120124
-------
)
Status Bar mouse event icons are better aligned. (
9cb298f706
### Commit Summary: UI: Aligned Mouse Event Icons · 9cb298f706 - blender - Blender Projects
### Commit Details:
Existing mouse event icons altered to align vertically with other event
icons, made slightly wider to center align.

#121898
-------
)
Dialogs
¶
Improved large confirmation dialogs.
  (
00b4fdce2c
### Commit Summary: UI: Improvements to Confirmation of Load Factory · 00b4fdce2c - blender - Blender Projects
### Commit Details:
A more informative confirmation dialog to confirm that the user wishes
to load factory startup and settings.

#117153
-------
,
6618755912
### Commit Summary: UI: Improvements to Confirmation of Save Startup · 6618755912 - blender - Blender Projects
### Commit Details:
A more informative confirmation dialog to confirm that the user wishes
to save new default startup file.

#117152
-------
,
3bacd93ba6
### Commit Summary: UI: Improvements to Confirmation of Load Factory Preferences · 3bacd93ba6 - blender - Blender Projects
### Commit Details:
A more informative confirmation dialog to confirm that the user wishes
to load factory user preferences.

#117151
-------
,
2c8a3243ee
### Commit Summary: UI: Improvements to Confirmation of Apply Transforms · 2c8a3243ee - blender - Blender Projects
### Commit Details:
A more informative confirmation dialog to confirm that the user wishes
to apply transforms to an object with multiple users.

#117157
-------
,
5eda7c9fd3
### Commit Summary: UI: Improvements to Confirmation of Apply Modifier · 5eda7c9fd3 - blender - Blender Projects
### Commit Details:
A more informative confirmation dialog to confirm that the user wishes
to apply modifier to an object with multiple users.

#117156
-------
,
311e0270dd
### Commit Summary: UI: Improvements to Confirmation of Pack Resources · 311e0270dd - blender - Blender Projects
### Commit Details:
A more informative confirmation dialog to confirm that the user wishes
to pack resources.

#117155
-------
,
d379897019
### Commit Summary: UI: Improvements to Confirmation of Unpack Linked Libraries · d379897019 - blender - Blender Projects
### Commit Details:
A more informative confirmation dialog to confirm that the user wishes
to unpack linked libraries.

#117154
-------
)
Large confirmation
Improved small confirmation dialogs. (
443ea628c5
### Commit Summary: UI: Changes to Small Operator Confirmations · 443ea628c5 - blender - Blender Projects
### Commit Details:
Small operator confirmations get separate confirm and cancel buttons,
better descriptions and configurable confirm button text. But still
popup at cursor location and can be cancelled with mouse movement.

#118346
-------
,
529b8786f8
### Commit Summary: UI: Custom Text and Confirmation Button Text for Props Confirm · 529b8786f8 - blender - Blender Projects
### Commit Details:
For operators that use WM_operator_props_popup_confirm allow custom
title and confirmation button text.

#121287
-------
)
Small confirmation
Improved property dialogs.
  (
8fee7c5fc7
### Commit Summary: UI: Line Under Title for Properties Dialogs · 8fee7c5fc7 - blender - Blender Projects
### Commit Details:
When a popup dialog includes properties, add a line under the title.

#118051
-------
,
da378e4d30
### Commit Summary: UI: Changes to Props Dialogs · da378e4d30 - blender - Blender Projects
### Commit Details:
Improved titles and confirm button text for 15 props dialogs.

#118640
-------
,
615edb3f3c
### Commit Summary: UI: Props Dialog Default Properties · 615edb3f3c - blender - Blender Projects
### Commit Details:
Allow activating numerical buttons upon opening of props dialogs. Set
defaults for some dialogs where appropriate.

#119007
-------
)
Panels now supported in dialog popups. (
aa03646a74
### Commit Summary: UI: support layout panels in popups · aa03646a74 - blender - Blender Projects
### Commit Details:
Enables operators that uses `WM_operator_props_dialog_popup`
or `redo` popup to use layout panels.

Other popups would likely also support layout panels, only
they need to set its dummy panel with `UI_popup_dummy_panel_set`.
Popups don't normally use `Panel`, but that's the type that stores the
layout panel states. Therefore, to use layout panels in a popup, one
currently needs to create a dummy panel whose purpose is to store the
layout panel states for as long as the popup is open.

Alternatively, we could potentially also store the layout panel states
somewhere else in the future for popups, but that might be a more involved
change for now.

See
#119519
for an example script that uses layout panels in a popup.

#119519
-------
)
Some operator confirmations removed. (
6dd0f6627e
### Commit Summary: UI: Removal of Five Operator Confirmations · 6dd0f6627e - blender - Blender Projects
### Commit Details:
Removal of confirmation dialogs for the following five operators. For
each of these the UI module felt that they are all either very explicit
actions and/or are easily undone.
* ARMATURE_OT_separate (Move selected bones to a separate armature)
* CURVE_OT_separate - “Move selected points to a new object”
* OBJECT_OT_vertex_parent_set (Parent selected ob to selected vertices)
* OBJECT_OT_parent_no_inverse_set (Make Parent w/o inverse correction)
* FILE_OT_directory_new - (Create New Directory)

#120036
-------
,
7226b52728
### Commit Summary: UI: Removal of GRAPH_OT_keys_to_samples Confirmation · 7226b52728 - blender - Blender Projects
### Commit Details:
Removal of the dialog that pops up to confirm this operator. The
Animation & Rigging module feels this isn't needed since this action
is quite visual and hard to miss. This operator is also not often
used and might get removed in future as unnecessary.

#120074
-------
)
Improved confirmation when reverting the current file. (
75a9cbed24
### Commit Summary: UI: Improvements to Revert File Operator Confirmation Popup · 75a9cbed24 - blender - Blender Projects
### Commit Details:
Larger, more informative confirmation when reverting the current file
to saved version. Title of "Revert to the Saved File", content of
"Any unsaved changes will be lost." and button text of "Revert".

#119758
-------
,
8735a8a6be
### Commit Summary: UI: Different Warning for Revert if Unsaved Images · 8735a8a6be - blender - Blender Projects
### Commit Details:
Change to the confirmation when reverting the current blend file to
include a specific warning if there are unsaved images.

#121288
-------
)
Menus
¶
Recent Items context menu now supports opening file location. (
6789a88107
### Commit Summary: UI: Open Folder of Recent Items · 6789a88107 - blender - Blender Projects
### Commit Details:
Add an item to the context menu when right-clicking on an item in the
"Open Recent" file list for "Open File Location" that opens that
location in an OS Explorer/Finder window.

#119988
-------
)
"Select" menus reorganized to be more consistent. (
ede675705e
### Commit Summary: UI: Reorganize 'Select' menus in editors · ede675705e - blender - Blender Projects
### Commit Details:
Reorganizes (and in some cases add missing operators to) all 'Select'
menus in all editors except 3D Viewport (done in a separate patch).

The goal of this change is to make menus as consistent as possible, and
to group & sort items according to a certain logic, which should be easy to
remember and users can always expect certain items to be always at same
place in every editor.

More details and images in the pull request.

#121337
-------
,
4dbca26b5c
### Commit Summary: UI: Reorganize 'Select' menus in 3D Viewport · 4dbca26b5c - blender - Blender Projects
### Commit Details:
Reorganizes the "Select" menus in all 3D Viewport modes to create more
consistency and sort/group operators according to logic laid out in
#121337
More details and images in the pull request.

#121521
-------
)
Menus in mesh sculpt mode were reorganized after gaining new items (
1fe8fbd93a
### Commit Summary: UI: Reorganize mesh sculpt mode menus · 1fe8fbd93a - blender - Blender Projects
### Commit Details:
Reorganization of the mesh Sculpt mode menu for simplicity and consistency.

Changes include:

- Moved transform operators into its own menu, consistent with other modes.
- Group Box, Lasso, Line, and Polyline Show/Hide operators
- Box, Lasso, Line, and Polyline Trim/Add operators moved to a new "Trim/Add"
- Cleanup and simplification of labels

Detailed explanation and example images in the pull request.

#122437
-------
)
Changes to menu separator padding. (
48dee674f3
### Commit Summary: UI: Changes to Menu Separator Padding · 48dee674f3 - blender - Blender Projects
### Commit Details:
Add interior horizontal padding to menu separator lines.

#118227
-------
)
All Zoom menus now use a new consistent format. (
7e2075b809
### Commit Summary: UI: Changes to Zoom Menus · 7e2075b809 - blender - Blender Projects
### Commit Details:
For Image, Clip, Sequence editors, try to make their View menus a bit
more consistent. Changes to Zoom menus, including showing current level
if matching.

#121044
-------
)
Zoom menus
3D Viewport
¶
Ability to toggle Camera Guides in Viewport Overlays. (
392ac52ebb
### Commit Summary: UI: Toggle Camera Guides in Viewport Overlays · 392ac52ebb - blender - Blender Projects
### Commit Details:
Allow toggling camera composition guides in the 3DView Overlay popover.

#121923
-------
)
Ability to toggle Camera Passepartout in Viewport Overlays. (
2a287dc23c
### Commit Summary: UI: Toggle Camera Passepartout in Viewport Overlays · 2a287dc23c - blender - Blender Projects
### Commit Details:
Allow toggling camera passepartout in the 3DView Overlay popover while
in camera view.

#122337
-------
)
Corrected initial viewport tilt. (
913acaf395
### Commit Summary: Fix #86325: tilted viewport orientation in default startup · 913acaf395 - blender - Blender Projects
### Commit Details:
Since v2.5 Blenders viewport view has been tilted by around ~0.8
degrees to the right, resolve this using a lookup table to update
the the defaults.

Ref
!113751
-------
)
More improvements to overlay text contrast. (
3582e52f9c
### Commit Summary: UI: Improved overlay text contrast with new outline text decoration · 3582e52f9c - blender - Blender Projects
### Commit Details:
Overlay texts were previously drawn with two sets of shadows:
- 3px blur,
- 5px blur, slightly offset

But since the shadow color was always set to black, it was still
causing legibility issues when the text itself was dark (set
via theme for example).

This PR adds a new "outline" BLF text decoration, and uses that
for the overlays. And it picks text/outline color depending
on the "background" color of the view.

Details:

- Instead of "shadow level" integer where the only valid options
  are 0, 3 or 5, have a FontShadowType enum.
- Add a new FontShadowType::Outline enum entry, that does a 1px
  outline by doing a 3x3 dilation in the font shader.
- BLF_draw_default_shadowed is changed to do outline, instead of
  drawing the shadow twice.
- In the font shader, instead of encoding shadow type in signs of
  the glyph_size, pass that as a "flags" vertex attribute. Put
  font texture channel count into the same flags, so that the
  vertex size stays the same.
- Well actually, vertex size becomes smaller by 4 bytes, since turns
  out glyph_mode vertex attribute was not used for anything at all.

Images in the PR.

Co-authored-by: Harley Acheson
#121383
-------
,
3ee8a75e8e
### Commit Summary: Fix #122381: Changes to Text Overlay Colors · 3ee8a75e8e - blender - Blender Projects
### Commit Details:
Show white text and black outline when dark, black text and white
outline when light. Slight darkening of TH_TIME_GP_KEYFRAME and
the red used for slow FPS to better work with varying backgrounds.

#122449
-------
)
Reduced dead zone for 3Dconnexion SpaceMouse. (
d739d27a2d
### Commit Summary: Fix #119203: Change default NDOF Deadzone value · d739d27a2d - blender - Blender Projects
### Commit Details:
There is a Deadband built in the sensor of SpaceMouse,
therefore the default value of Deadzone field can be equal to 0.0
instead of 0.100.

#119522
-------
)
Object menu gains a Modifiers submenu. (
e63c8bb3c2
### Commit Summary: UI: Add Modifiers submenu to 3D view header · e63c8bb3c2 - blender - Blender Projects
### Commit Details:
Add a menu similar to the "Object > Constraints" menu that allows adding,
copying, and clearing modifiers. The "copy all modifiers to selected" and
"clear modifiers" operators are new, to mirror the functionality we already
have for constraints.

The "Add" menu is the same that's used in the property editor. In the 3D
view, modifiers are always added to all selected objects.

Part of
#120230
#121286
-------
)
Sidebar made a bit wider. (
068e624ebc
### Commit Summary: UI: Make sidebars slightly wider · 068e624ebc - blender - Blender Projects
### Commit Details:
The default width for sidebars was last updated for 2.80 when columns
didn't have headings and checkboxes were right-aligned.

Some strings no longer fit especially when using headings, and in
translations. Make it slightly wider while still being relatively out of
the way in a 1920 × 1080 setup.

Detailed images in the pull request description.

#121795
-------
)
Properties Editor
¶
Add, remove, apply, and reorder modifiers of all selected objects by holding alt. (
9a7f4a3b58
### Commit Summary: Modifiers: Affect all selected objects when holding alt · 9a7f4a3b58 - blender - Blender Projects
### Commit Details:
Support holding alt while invoking modifier operations for add, apply,
remove, and move to index in the property editor. This affects all selected
editable objects instead of just the active object.

Though the alt key is not that visible, it's consistent with the
existing multi-object property editing shortcut. If/when multi-
object editing is every made the default, the alt key could
be reversed here too.

Changes as part of
#120230
.

#120695
-------
)
Changes to Modifer pinning. (
7ee189416c
### Commit Summary: UI: Show modifier pinning with icon, adjust name · 7ee189416c - blender - Blender Projects
### Commit Details:
User feedback has been that the pinned modifier looks broken because
there is no feedback in the UI showing that it's pinned (related to the
recently reported
#121620
). It's also inconvenient to disable the pinning
if it's required to move the modifier up (before another modifier that
controls normals for example). Now the "Pin" icon is displayed here,
and clicking on it turns off the pinning.

Also, change the property name from "Stick to Last" to "Pin to Last".
"Stick" is a weird word in the UI, it sounds uncommon and strangely
physical. "Pin" is more associated with this concept.

---

![Screenshot from 2024-05-29 11-41-06](/attachments/4581d362-e2fb-4edf-83dd-7f1e1b71ec4d)

#122444
-------
)
Add eyedropper button to camera focus distance. (
7f8d4df410
### Commit Summary: UI: Add eyedropper button to camera focus distance · 7f8d4df410 - blender - Blender Projects
### Commit Details:
Blender already had the ability to sample the depth with an eyedropper
and fill the focus distance (see `"ui.eyedropper_depth"`). But this feature
was fairly hidden. You had to hover over the `focal_distance` property
in the camera data panel and then press `E` (then sample a distance
in the 3D viewport).

This patch adds a `prop_data_path` property to the `ui.eyedropper_depth`
operator to allow specifying the property that should be filled with the
depth value.

The idea for this is taken from `wm.radial_control`, which also uses this
approach to write to a property. This allows us to add the eyedropper
as a button.

#121486
-------
)
Focus distance eyedropper
Text Editor
¶
GLSL syntax highlighting. (
462c144f41
### Commit Summary: Text Editor: add support for GLSL syntax highlighting · 462c144f41 - blender - Blender Projects
### Commit Details:
The objective is to be able to create your own GLSL shaders in Blender.
This improves the workflow since all shader programming can be done
directly in Blender. In addition, the GLSL language is a very popular
language in the video games industry and even in general.

Ref
!116793
Co-authored-by: Clément Foucault
-------
)
Drop strings & URLs into the text editor and Python console
  (
64843cb12d
### Commit Summary: UI: support dropping text into the text editor & Python console · 64843cb12d - blender - Blender Projects
### Commit Details:
The Python console only supports dropping a single line of text,
see code-comments for details.
-------
)
Drag URLs and texts to text and console editors
Node Editor
¶
Input sockets that don't allow editing the value don't show up in the sidebar anymore.
  (
d27a1c47fa
### Commit Summary: Nodes: hide uneditable input sockets in sidebar · d27a1c47fa - blender - Blender Projects
### Commit Details:
This hides some labels from the sidebar which look a bit out of place.

#118264
-------
,
d9d9ff1dcd
### Commit Summary: Nodes: hide shader input in node properties panel · d9d9ff1dcd - blender - Blender Projects
### Commit Details:
This was missing in
d27a1c47fa
.
-------
).
Slightly improved sorting in search when adding nodes (
d1634b2a4a
### Commit Summary: UI: support adding a search weight to menu entries for menu-search · d1634b2a4a - blender - Blender Projects
### Commit Details:
The goal is to support better search experience in the cases where we want to
explicitly influence the ordering instead of relying only on general heuristics.
We used to support this already at some point I think, but not anymore since we
started using menu-search.

The implementation is fairly straight forward. It mainly just forwards the
search weight from the menu definition to the search code through various
required steps. The main annoying thing is that changing the signature of e.g.
`uiItemFullO_ptr` is fairly involved. Even using default parameters for these
functions is a bit annoying and becomes fairly unreadable and error-prone on the
call-site. For now, I worked around this by storing the search weight on the
`uiLayout` and to copy it to the `uiBut` from there. That seems preferable until
we have a better solution for adding parameters to all the `uiItem*` functions.

#120572
-------
,
22c6831f63
### Commit Summary: Geometry Nodes: improve search weights of some nodes · 22c6831f63 - blender - Blender Projects
### Commit Details:
No details found
-------
).
Show tooltip with node description when over node title (
749433f20b
### Commit Summary: UI: Add tooltips with node description to node titles · 749433f20b - blender - Blender Projects
### Commit Details:
These were already displayed in the node add menu. But it can also be
useful to see node descriptions when opening existing projects.

#119705
-------
).
Improved tooltips for dangling reroute nodes (
fa66b52d0a
### Commit Summary: Nodes: tooltips for value of dangling reroute node · fa66b52d0a - blender - Blender Projects
### Commit Details:
Dangling reroute nodes have no source of value. For that reason, such reroute nodes
are ignored by geometry nodes. Other node systems still have to handle this case
more explicitly. To users this behavior generally makes sense, but it's also not completely
obvious. Now, there is a new tooltip when hovering over dangling reroute nodes that
mentions how those work.

#120851
-------
).
Improved tooltips for multi-input sockets (
ed9921185a
### Commit Summary: Geometry Nodes: more detailed socket tooltips for multi-input sockets · ed9921185a - blender - Blender Projects
### Commit Details:
Tooltip for multi-input socket. This kind of inspection can help to
see what data are passed into a node. Any invalid, muted or dangling
link will not be taken into account. This feature reuse the already
existing tooltip formatting and just add column indentation in multi-line case.

#104468
-------
).
Display node label for tooltips on reroute nodes (
0bd6279504
### Commit Summary: Nodes: Display node label for tooltips on a free reroute · 0bd6279504 - blender - Blender Projects
### Commit Details:
It is not so informative to display `Input` (name of input socket)
tooltip for free reroute node. Instead, use label for this.

#120534
-------
).
Multiple images can be added at the same time using drag and drop (
615100acda
### Commit Summary: IO: Use FileHandler in Node Editors · 615100acda - blender - Blender Projects
### Commit Details:
Use `FileHandlers` to handle file drag-n-drop in Node Editors. Drop-boxes
still remain since they handle Images ID drag-n-drop.

This also allows to open/drag-n-drop multiple files at once.

Also this will allow add-ons to also support drag-n-drop for images and
movies in node editors while still providing access to Blender's native
support since File Handlers let users choose which to invoke if there's
multiple configured.

#121051
-------
).
Node groups can have descriptions now (
6176e66636
### Commit Summary: Nodes: add node group description · 6176e66636 - blender - Blender Projects
### Commit Details:
This allows node groups to have a description that is shown in the add menu
or when hovering over the node header.

This new description is stored in `bNodeTree.description`. Unfortunately, it
conflicts a bit with `ID.asset_data.description`. The difference is that the latter
only exists for assets. However, it makes sense for node groups to have
descriptions even if they are not assets (just like `static` functions in C++ should
also be able to have comments). In some cases, node groups are also generated
by addons for a specific purpose. Those should still have a description without
being reusable to make it easier to understand for users.

The solution here is to use the asset description if the node group is an asset,
and to use `bNodeTree.description` otherwise. The description is synced
automatically when marking or clearing assets.

A side benefit of this solution is that appended node group assets can keep their
description, which is currently always lost.

#121334
-------
).
Node group properties have been reorganized (
125afb20d3
### Commit Summary: Nodes: reorganize node group properties UI · 125afb20d3 - blender - Blender Projects
### Commit Details:
The initial motivation for this came from
#121334
, because now there
are two description inputs which look very alike and not's not obvious
at a glance where they belong to. Additionally, I find myself sometimes
looking for node properties in the group properties panel because of the same panel name.

This patch does the following changes to improve the situation:
* Reorder the node group properties and socket interface panel.
* Rename `Properties` panel to `Group` (similar to `Node` in the corresponding tab).
* Rename the `Interface` panel to `Group Sockets`.
* Add a `Name` field for the node group. This makes it even more obvious that
  one is looking at the group properties. Also it makes it possible to rename
  the group without having to go up one level to change the name in the group node.
* New layout-panel for the different usages. This only exists for geometry nodes.

#121564
-------
).
Node groups now have a color tag that affects the header color of group nodes (
f4b9ca758a
### Commit Summary: Nodes: add color tag to node groups · f4b9ca758a - blender - Blender Projects
### Commit Details:
This allows setting a color tag for node groups which affects the header
color of group nodes. With this, node groups can look even more similar
to built-in nodes. The only remaining difference is the node group icon in
the node header.

Blender has quite a few different built-in color tags. Most of those are
exposed with very few exceptions. For example, the layout, interface
and pattern categories are not exposed because they are only for built-in
nodes or are not used anymore.

It's generally agreed upon that the set of different color tags is likely too
large. Some differences between color make more sense in some contexts
than in others. In the interest of consistency, it was decided to expose all
these categories anyway. If we ever decide to consolidate them, the worst
that can happen is that a group looses it's category, which wouldn't be too bad.

#121385
-------
).
When adding a frame around the selected nodes (ctrl+J), the new frame will now be added to the common root frame of these nodes (
0f32291d15
### Commit Summary: Nodes: make new frame node child of common parent of selected nodes · 0f32291d15 - blender - Blender Projects
### Commit Details:
Previously, the new frame was always added as root frame and did not have a parent.
Now, the common root frame of all selected nodes is detected and the new frame is attached to it.

#121972
-------
).
Invalid (red) links now have some additional information for why they are invalid (
399f6a1c60
### Commit Summary: Nodes: add descriptions for why links are invalid · 399f6a1c60 - blender - Blender Projects
### Commit Details:
Blender shows invalid links in red in the node editor. However, it's not always
obvious why some links don't work, especially for beginners. This patch adds
additional information for every invalid link on the node that it links to.

The following error messages are added:
* Invalid link because of missing implicit conversions.
* Link cycle in node tree.
* A link from a field to a socket that does not support fields.
* Using the same menu on multiple Menu Switch nodes.

Currently, there are some per tree-type special cases in the link validation code.
In the future, this should be moved to tree type specific callbacks.

#121976
-------
).
Dragging a node onto a link does not remove the link anymore if it is incompatible. It's dimmed instead (
ebb61ef30f
### Commit Summary: Nodes: avoid removing link when inserting incompatible node · ebb61ef30f - blender - Blender Projects
### Commit Details:
Previously, when dropping a node on a link with incompatible sockets, the link
would be removed. While sometimes useful in super simple setup, it is generally
useless for most work. Even worse, users might not notice that they accidentally
removed a link (this has been reported in the recent geometry nodes workshop).

This patch changes this behavior in two ways:
* A node can't be inserted onto an incompatible link anymore.
* A link will be dimmed while dragging a node over it, if it is incompatible or if
  alt is pressed.

#121975
-------
).
Resetting socket values now actually works, instead of always setting values to zero (
6b6657405f
### Commit Summary: Fix #76704: resetting socket values always resets to zero instead of default value · 6b6657405f - blender - Blender Projects
### Commit Details:
The fundamental limitation here was that RNA did not support different default values
for the same property yet (and all sockets of the same type have the same property).
This patch solves this by adding a new callback to rna property types to retrieve a
default value dynamically. Together with the socket declarations it's fairly easy to get
this working nowadays.

This also works for group nodes, because they use the socket declaration internally too.

#122216
-------
).
Using the shortcut (ctrl+shift+click) to connect to a viewer now also moves the viewer closer to the node (
7be4d4f443
### Commit Summary: Nodes: automatically move viewer node to current node · 7be4d4f443 - blender - Blender Projects
### Commit Details:
This improves working with viewer nodes in geometry and compositor nodes.
Previously, the viewer node would typically stay at the position where it was first
inserted which leads to very long links in many cases. Now the viewer node
automatically moves to the place where the user ctrl+shift+clicked to view data.

The viewer is placed slightly to the right and top of the current node. It is moved
up a bit, so that it does not get in the way as quickly when the user wants to add
another new node. Furthermore, the viewer node position is chosen so that it
does not intersect with other nodes.

In the future we could implement animating the node position so that it slowly
transitions to it's new places.

#121951
-------
).
Some sockets can now be renamed directly in the node by Ctrl+Clicking on it (
cd5eb4aa03
### Commit Summary: Geometry Nodes: support renaming some sockets in the node directly · cd5eb4aa03 - blender - Blender Projects
### Commit Details:
This adds support for renaming some sockets in the node UI directly by Ctrl+Clicking
on them. This is sometimes more convenient than going to the sidebar. It affects the
Menu Switch and Bake node as well as the Simulation and Repeat zone.

Some related notes:
* The Group Input and Group Output node are not yet supported, because it currently
  breaks the right-alignment on the Group Input node. I couldn't find a workaround for
  this yet.
* Double-clicking on the socket name does not trigger renaming yet. This seems to
  be a deeper issue in the interface code.
* The highlighting when hovering over sockets that can be renamed is very dim
  making it hard to see. Alternatives like drawing a box around the label when hovering
  it (like in list views) have been discussed but seem to be much more difficult to get to work.

Despite these limitations, it seems reasonable to add this already, as it shouldn't affect
anyone negatively. The nodes still look like before.

Co-authored-by: Hans Goudey
#121945
-------
).
New overlay to reroute labels that are derived from upstream reroute nodes (
db5d410164
### Commit Summary: Node Editor: add overlay to automatically label reroute nodes · db5d410164 - blender - Blender Projects
### Commit Details:
Add an overlay option to automatically display a label on reroute nodes.

This automatic label is propagated through chained reroute nodes and
is based on the explicit label of linked reroute nodes.

The automatic label is dimmed to distinguish it from manually set ones.

#113368
-------
).
Outliner
¶
Ctrl-F can initiate Outliner filtering. (
f5fdda776c
### Commit Summary: UI: Outliner Ctrl-F To Start Filter · f5fdda776c - blender - Blender Projects
### Commit Details:
New operator OUTLINER_OT_start_filter bound to Ctrl-F to move keyboard
focus to the Outliner search filter box. And OUTLINER_OT_clear_filter
bound to Alt-F to clear the search box. Both similar to Properties.

#122126
-------
)
Orphan Data mode renamed to Unused Data. (
72be662af4
### Commit Summary: UI: Change UI Name of Outliner "Orphan Data" mode to "Unused Data" · 72be662af4 - blender - Blender Projects
### Commit Details:
Change of name and tooltip for Outliner display mode "Orphan Data" to
"Unused Data"

#118758
-------
)
Blender File mode now supports managing user counts. (
d8f6ae7919
### Commit Summary: UI: Outliner "File Mode" Manage User Count · d8f6ae7919 - blender - Blender Projects
### Commit Details:
In Outliner "Blender File Mode" view, show user counts, and allow
removing and adding fake user, requested in
#118655
.

#118691
-------
)
Blender File mode
Unused Datablocks
¶
The Purge operator now pops up a dialog where user can choose which options to apply,
and get instant feedback on the amounts of unused data-blocks will be deleted.
(
PR#117304
) (
0fd8f29e88
### Commit Summary: IDManagement: Update the Purge operator to display an interactive popup. · 0fd8f29e88 - blender - Blender Projects
### Commit Details:
Make the 'purge' operation show an interactive popup by default, with
a preview of the type and amount of data-blocks to be deleted.

Idea and initial UI/UX design are from
@Harley
(see PR
!117242
).

#117304
-------
)
New purge popup
The File > Cleanup menu has a new Manage Unused Data operation to open the outliner
in Unused Data mode. (
f04bd961fd
### Commit Summary: UI: Manage Unused Data Operator · f04bd961fd - blender - Blender Projects
### Commit Details:
An operator that brings up a window with Outliner in "Unused Data" mode
to allow users fine-grained control over protecting and purging.

#118435
-------
)
Preferences
¶
New button to save custom themes. (
ee38a7b723
### Commit Summary: UI: Button to Save Custom Themes · ee38a7b723 - blender - Blender Projects
### Commit Details:
Add a new "Save" to the Themes list in Preferences to save (overwrite)
custom themes. The operator has a poll function to disable for built-in
themes. Shows a confirmation when overwriting.

#119491
-------
)
Save theme
Improved operators for adding/deleting custom themes. (
a0a2e7e0dd
### Commit Summary: UI: Improved Operator to Delete Custom Themes · a0a2e7e0dd - blender - Blender Projects
### Commit Details:
Changes to python operators that add and remove custom themes. Removal
gets poll function, separate name and description, and confirmation.

#118775
-------
)
Improved operators for adding/deleting custom key configurations. (
57729aa8bb
### Commit Summary: UI: Improved Operator to Delete Custom Keyconfigs · 57729aa8bb - blender - Blender Projects
### Commit Details:
Changes to python operators that add and remove custom keyconfigs.
Removal gets poll function, separate name and description, and
confirmation.

#118778
-------
)
Preferences "Translation" section changed to "Language". (
73d76d4360
### Commit Summary: UI: User Prefs Language Section · 73d76d4360 - blender - Blender Projects
### Commit Details:
Change Preferences panel "Translation" to "Language" and replace
"Affect" with "Translate".

#119430
-------
)
Splash
¶
Changes to Splash Screen for new versions. (
d2d810f11a
### Commit Summary: UI: Splash Screen Import Changes · d2d810f11a - blender - Blender Projects
### Commit Details:
Removal of "What's New" button, addition of a section divider, and many
very small changes to the text, some reordering of items.

#118224
-------
)
Splash screen changes
Platforms
¶
Linux: Registering & unregistering file-type associations is now supported on Linux.
  This can be accessed via the system preferences "Operating System Settings" or via
  command line arguments (
--register
,
--register-allusers
), see
--help
for details.
  (
9cb3a17352
### Commit Summary: Linux: freedesktop support for file type association · 9cb3a17352 - blender - Blender Projects
### Commit Details:
Support freedesktop file association on Linux/Unix via the command line
arguments: `--register{-allusers}` `--unregister{-allusers}` as well
registration actions from the user preferences.

Once registered, the "Blender" application is available from launchers
and `*.blend` files are assoisated with the blender binary used for
registration.

The following operations are performed:

- Setup the desktop file.
- Setup the file association & make it default.
- Copy the icon.
- Setup the thumbnailer (`--register-allusers` only).

Notes:

- Registering/unregistering for all users manipulates files under
  `/usr/local` and requires running Blender as root.
  From the command line this can be done using `sudo`, e.g.
  `sudo ./blender --register-allusers`.
  From the GUI, the `pkexec` command is used.

- Recent versions of GNOME execute the thumbnailer in a restricted
  environment (`bwrap`) requiring `blender-thumbnailer` to be copied
  into `/usr/local/bin` (synlinks don't work).
  So thumbnailing copies the binary rather than linking and only works
  when registering for all users.

Ref
!120283
-------
).
Linux: Image copy and paste now works in Wayland. (
692de6d380
### Commit Summary: GHOST/Wayland: copy & paste image to clipboard support · 692de6d380 - blender - Blender Projects
### Commit Details:
Adds copy and paste images functionality to and from the image editor
in Linux/Wayland clipboard.

Currently the only format supported is PNG.

Ref:
!119117
-------
)
Windows: Fixed pixel shift in clipboard image paste. (
a677518cb5
### Commit Summary: Fix #118351: Pixel Shift with Win32 Clipboard DibV5 Image Transfer · a677518cb5 - blender - Blender Projects
### Commit Details:
My misreading of the Microsoft BITMAPV5HEADER specification causes a
shift of three pixels when transferring between applications using this
format. This does not occur when moving within or between Blender
instances. This PR just removes the incorrect 12-byte offset. Note
that many applications prefer PNG transfers over DibV5 so testing this
might be non-obvious.

#118417
-------
)
Translations
¶
The ability to edit PO files directly from the user interface has been removed. (
details
,
b143cc1885
### Commit Summary: I18N: Remove 'edit translation' features from the Blender UI. · b143cc1885 - blender - Blender Projects
### Commit Details:
This feature was not maintained for a long time already, and would have
required a lot of work to make it sensible and usable after 'recent'
changes (like the move to weblate translation platform).

For details see also
https://devtalk.blender.org/t/ui-translation-tools-remove-edit-translation-feature-from-blender-ui-in-4-2lts-release/34947
-------
)

'''''


16. Blender 4.2 LTS: Sequencer¶

Blender 4.2 LTS: Sequencer
¶
Performance
¶
Reduced stalls when new movie clips start playing by caching FFmpeg RGB<->YUV conversion contexts
  (
ffbc90874b
### Commit Summary: ffmpeg: cache swscale contexts instead of re-creating them · ffbc90874b - blender - Blender Projects
### Commit Details:
ffmpeg's libswscale is used to do RGB<->YUV conversions on movie reading
and writing. The "context" for the scale operation was being created
and destroyed for each movie clip / animation. Now, maintain a cache
of the scale contexts instead.

E.g. in Gold edit, it only ever needs two contexts (one for reading
source movie clips since they are all exactly the same resolution
and format; and one for rendering the resulting movie).

During playback, on some of the "slow" frames (camera cuts) this
saves 10-20ms (Windows, Ryzen 5950X). Rendering whole movie goes
from 390sec to 376sec.

#118130
-------
) and reducing amount of redundant work that is done for FFmpeg
  initialization
  (
b261654a93
### Commit Summary: VSE: Reduce playback stalls when new video clips start playing · b261654a93 - blender - Blender Projects
### Commit Details:
When starting to play back a movie strip, there was a "oh, let's figure out if
this is a video file?" check, immediately followed by "let's initialize the
machinery to decode a video file". The first one is kinda redundant, since if
it will happen to not be a video file, the latter check will nicely fail.

Addressed that by removing (seemingly unused at all?) functionality from
`ImBufAnim`, now it is only used for video file playback. Details:

- It looks like `ImBufAnim` is only ever used to play back "video files", so
  remove all the other modes of operation from it ("image sequence").
- Which makes `ImBufAnim::curtype` be not needed, it only needs to store state
  of whether it's initialized already.
- Which means there's no need to call `imb_get_anim_type` (which does very
  costly `isffmpeg`) when starting to play ImBufAnim.
- Remove some other variables from `ImBufAnim` that were just flat out unused.

In Gold previs playback between 1:41-1:55, on Windows/Ryzen5950X:
- Slowest 3 frames went from 276, 195, 168ms -> 222, 174, 147ms (saves 20+ ms
  per frame). All of these frames are camera cuts where multiple new video
  clips start playing.
- In the whole playback, total amount of time taken by `imb_get_anim_type`:
  234ms -> zero! Since that is no longer used.
- There are still stalls when starting to play a movie clip, and that is
  actually initializing ffmpeg things. But now at least right before
  "initialize ffmpeg" there's no additional redundant work.

#118503
-------
).
Reduced amount of temporary image clears when rendering VSE effect stack
  (
b4c6c69632
### Commit Summary: ImBuf: do not clear newly allocated image pixels when not needed · b4c6c69632 - blender - Blender Projects
### Commit Details:
In some/many cases, an `ImBuf` is allocated, and all the pixels are
immediately filled by some code. Doing the memory clear within allocation
is just memory traffic for no good reason.

Add a flag to skip initialization of ImBuf pixels (IB_uninitialized_pixels)
and use that in some parts of VSE effects/rendering/cache/scopes, as well
as image loading code.

Rendering out VSE movie, on Windows/VS2022/Ryzen5950X:
- Sprite Fright: 443sec -> 414sec (takes 93% of previous time)
- Gold previs: 367sec -> 325sec (takes 88% of prev time)

#118321
-------
)
VSE already had an optimization where an Alpha Over strip that is known to be fully opaque and
  covers the whole screen, stops processing of all strips below it
  (since they would not be visible anyway).
  Now the same optimization happens for some cases of strips that do not cover the whole screen:
  when a fully opaque strip completely covers some strip that is under it,
  the lower strip is not evaluated/rendered.
  (
f4f708a54f
### Commit Summary: VSE: Skip rendering lower strips that are behind opaque strips above them · f4f708a54f - blender - Blender Projects
### Commit Details:
Often in previs setups, you have several "variations" of image/movie strips
for review, where the topmost one completely covers the others under it. VSE
rendering already had an optimization where if there's a fully opaque strip
that covers the whole screen, then the lower strips are skipped from
processing/rendering. However, it was not handling the case of non-fullscreen
strips (e.g. you'd have a Color strip near top & bottom for letterboxing, and
an opaque strip "in the middle").

This adds a simple "occluder tracking", and skips strips that are completely
covered by any single opaque strip that is above it (like outlined in
#117790
task).

Playback of Gold previs between 1:42 and 1:55, on Windows/Ryzen5950X:
- Average frame time 28.5ms -> 23.8ms
- Median frame time 24.1ms -> 21.5ms
- Two slowest frames: 263->189ms, 194->178ms

Rendering the Gold previs movie: 325s -> 304s (93% of previous time)

#118396
-------
)
User Interface
¶
Strips in the timeline received a visual overhaul:
Rounded corners to better tell where a strip begins and ends. (
PR#122576
)
Thicker outline for active/selected strips, including an additional outer and inner dark edge to provide contrast.
Theme: Strip colors have been updated to improve readability (
abb233dd1e
### Commit Summary: VSE: Update theme colors for strips · abb233dd1e - blender - Blender Projects
### Commit Details:
Some of the existing colors were hard to read with the new
strips design.

Tried following the concept from 2.83 redesign rationale:
* Same saturation for regular strips.
* Lower saturation for effect strips.
* Tried to reduce the hue shift between certain similar effects.

Other changes:
* Match saturation of all regular strips.
* Reduce value and saturation (mostly value) of color tags so
  they are readable in both light and dark text.
* Image: Follow node editor Image node socket color.
* Color: Use the same hue as the color node socket.
* Text: Change it so it doesn’t use the same as Image.
* Sound: Use a greener color, less movie-like blue.
* Scene: Light gray, similar fashion to Collections.
* Other strips had minor adjustments.

Images and details in the pull request.

#123446
-------
)
Strips with missing media files are displayed with red tint and an icon overlay in the VSE timeline. (
PR#116869
)
Tweaking of handles was streamlined (
f98b01e49
### Commit Summary: VSE: Improved handle tweaking · f98b01e492 - blender - Blender Projects
### Commit Details:
This commit changes how users can interact with handles:

Unselected handles are not drawn anymore by default. Handles are bit
thinner. If handle can't be selected, because strip is too small,
it is not drawn.

When hovering over strip handle a cursor is changed to represent a
handle shape. It is possible to select 2 handles at once if strips are
adjoined.

When tweak event happens on unselected handle, handle selection is lost
ater tweaking.

This behavior can be disabled in preferences:
Editing > Video Sequencer > Tweak Handles.

Moving strips with G key works same way as before.

#109522
-------
):
Unselected handles are not drawn, but mouse cursor will change when hovering over handle.
Adjoined handles can be selected with one click.
After moving unselected handle, the handle will be deselected.
This behavior can be disabled in preferences - Editing > Video Sequencer > Tweak Handles.
Overlays: New cache line overlay (previously only available when using "Developer Extras") (
221951657b
### Commit Summary: VSE: Make cache overlay visible to non "Developer extras" users · 221951657b - blender - Blender Projects
### Commit Details:
This also moves the option to be a per editor space setting so you can
have different cache visualization options in different editor spaces
at the same time.

A quick toggle for the cache visualization is now available in the
overlays popover.

#119428
-------
)
Overlays: Waveforms are now displayed as half-size by default, for space efficiency (
a4dce75123
### Commit Summary: VSE: Make waveforms half size by default · a4dce75123 - blender - Blender Projects
### Commit Details:
Make half-size waveforms default in new files and Video Editing template.
They are more space efficient and display more detail at small sizes.

This does not change existing files.

#123511
-------
)
Overlays: The popover has been reorganized for clarity. (
6e42c3d920
### Commit Summary: UI: Sequencer Overlays layout improvements · 6e42c3d920 - blender - Blender Projects
### Commit Details:
Follow the layout closer to the 3D Viewport overlays.

* Wider, to fit two-column layout and translations.
* Move general settings on top.
* Move strips-related overlays into their own subpanel.
* Move `Thumbnails` higher up so it's more easily reachable.
* Rename `F-Curves` to `Animation Curves`.
* Remove redundant labels.
* Gray out "Waveform Style" when set to Off.

#121591
-------
)
Preview: "Separate colors" option for Luma waveform was replaced by "RGB Parade" scope. (
740c9f220d
### Commit Summary: VSE: Add RGB Parade Display Mode for sequencer · 740c9f220d - blender - Blender Projects
### Commit Details:
This PR implements
#120479
by adding a new Waveform Display Mode
"RGB Parade" that will essentially be the Luma Waveform but with
"Separate Colors" turned on.

#120615
-------
)
Text Strips: New options for shadow placement and blur level, as well as text outline. (
PR#121478
)
Multiple files from external file browser can be added at once using drag and drop. (
89c1f7e0c3
### Commit Summary: IO: Use file handler in space VSE · 89c1f7e0c3 - blender - Blender Projects
### Commit Details:
Uses `FileHandlers` to handle file drag-n-drop in the space Sequencer, drop-boxes
still remain since they handle Images ID drag-n-drop.

This also allows to open/drag-n-drop multiple files at once.

When drag-and-drop is performed with a single image/movie/sound
file and only the internal `FileHandler` can be used, is used
the internal drop-box api for drag and drop, since it has a nice
drag-and-drop preview.

#119927
-------
)
New operator in the View (regular + pie) menu: "Frame Scene Range" (
95966813ae
### Commit Summary: Anim: add 'Frame Scene/Preview Range' to animation editors · 95966813ae - blender - Blender Projects
### Commit Details:
blah

Add a new operator 'Frame Scene Range' to the Dope Sheet, Graph Editor,
NLA, and VSE 'view' menus. It is added both to the regular menu and the
pie menu (by default on the ` hotkey).

The operator will only change the horizontal view, to show the scene
range or the preview range, depending on whether the preview range is
active or not.

The label of the operator switches between "Frame Scene Range" and
"Frame Preview Range" to indicate what will happen.

For the VSE this operator is quite similar to the 'Frame All', as that
by default also frames the scene range. There are a few notable
differences though:

- Frame All includes any strip that extends beyond the scene end frame.
- Frame All ignores the preview range.

#122311
-------
).
  This changes the horizontal view to match the scene range. If the
preview range
### Commit Summary: Timeline - Blender 4.2 Manual
### Commit Details:
Timeline
#
The
Timeline
editor is used to jump to different frames, manipulate keyframes,
and control animation playback.
The Timeline.
#
Main View
#
The X axis represents time, with the numbers 0/50/100/… being frame numbers.
The blue line is the
Playhead
indicating the current frame,
and the diamond shapes are
Keyframes
, points where you specified
a certain value for a certain property at a certain time.
Adjusting the View
#
Panning is done by dragging
MMB
.
Zooming is done by dragging
Ctrl
-
MMB
, rolling the mouse
Wheel
,
or pressing
NumpadMinus
/
NumpadPlus
.
You can also use the scrollbars located at the bottom and the right of the editor.
Playhead
#
Playhead.
#
The
Playhead
is the blue vertical line showing the current frame number.
It can be moved to a new position by clicking or
dragging
LMB
in the scrubbing area at the top.
You can also move it in single-frame increments by pressing
Left
or
Right
,
or jump to the beginning or end frame by pressing
Shift
-
Left
or
Shift
-
Right
.
Frame Range
#
The
Frame Range
determines the length of the scene’s animation.
By default, it’s set to start at frame 1 and end at frame 250.
You can change this using the Start/End inputs in the Timeline header,
or in the
Output Properties
.
Keyframes
#
By default, the timeline only shows keyframes for selected items.
You can make it show all keyframes by unchecking
View ‣ Only Show Selected
.
You can click a keyframe to select it (and deselect all others),
or click it while holding
Shift
to add it to the selection
(or remove it if it was already selected). You can also drag a box
to select multiple keyframes in one go.
To move the selected keyframes, simply drag one of them. Alternatively,
you can press
G
, move the mouse, and click
LMB
to confirm
(or
RMB
to cancel). You can also press
S
to scale the keyframes
in relation to the Playhead.
Markers
#
See the
Markers page
for more information.
Header
#
Popovers for Playback and Keying; transport controls; and frame controls
#
Popovers
#
Playback Popover
#
Sync
3D Viewport red FPS.
#
If animation playback can’t keep up with the desired
Frame Rate
,
the actual frame rate (shown in the top left corner of the 3D Viewport) will turn red,
and the
Sync
option determines how the situation should be handled.
Play Every Frame
Play every frame, even if this results in the animation playing slower than intended.
Frame Dropping
Drop frames if playback becomes slower than the scene’s frame rate.
Sync to Audio
Drop frames if playback becomes too slow to remain synced with audio.
Audio
Scrubbing
Play bits of the sound in the animation (if there is any) while you drag the Playhead around.
Play Audio
Uncheck to mute all sound.
Playback
Limit to Frame Range
Don’t allow moving the Playhead outside of the Frame Range using the mouse.
Follow Current Frame
Automatically pan the view to catch up when the Playhead goes off screen.
Play In
Which editors to update on each animation frame. If an editor is unchecked,
it’ll only be updated once playback stops (with some exceptions where it’ll
update on each frame anyway). When starting playback in either the
Graph Editor
,
Dope Sheet
or the
NLA Editor
,
all editors will play back regardless of the settings.
This is a feature requested by animators to easily play back all views.
Show
Subframes
Display and allow changing the current scene subframe.
Set Start/End Frame
Set the scene’s start/end frame to the current frame.
If the Preview Range is active (see
Frame Controls
), that one is changed instead.
Keying Popover
#
The
Keying
popover contains options that affect keyframe insertion.
Active Keying Set
Timeline Keying Sets.
#
A
Keying Set
is a named collection of animatable properties. If you select
one and then press
I
while not hovering over any input field,
Blender will create keyframes for the properties in that keying set.
If you don’t have a keying set selected, you’ll get keyframes on a default
set of properties instead (e.g. Location/Rotation/Scale for objects).
There are a number of predefined keying sets, but you can also create your own
in the
Keying Sets
panel.
Insert Keyframes (plus icon)
I
Insert keyframes on the current frame.
Delete Keyframes (cross icon)
Alt
-
I
Delete keyframes on the current frame.
New Keyframe Type
The
keyframe type
for newly created keyframes.
Cycle-Aware Keying
When inserting keyframes into
trivially cyclic curves
,
special handling is applied to preserve the cycle integrity (most useful while tweaking an established cycle):
If a key insertion is attempted outside of the main time range of the cycle,
it is remapped back inside the range.
When overwriting one of the end keys, the other one is updated accordingly.
In addition, when adding a new curve into an action with a
Manual Frame Range
and
Cyclic Animation
enabled, the curve is automatically made cyclic with the period matching the frame range.
For convenience, this check and conversion is also done before adding the second keyframe to such a curve.
Auto Keying
#
Auto Keying button.
#
When the record button (⏺) is enabled, Blender will automatically create keyframes on the current
frame whenever you transform an object or bone in the 3D Viewport (or change one of its transform properties
in the
Properties Editor
).
One special use case is to record a camera path as you fly through the scene.
See
Fly/Walk Navigation
.
Note
Auto Keying only works for transform properties (Location, Rotation, Scale).
It won’t create a keyframe if you change, say, the color of a material –
you still have to do that manually.
Mode
Add & Replace
Add or replace keyframes as needed.
Replace
Only replace existing keyframes.
Only Active Keying Set
By default, Auto Keying will create keyframes even for properties that are not in the
active keying set
. Use this checkbox to change that.
Layered Recording
Adds a new
NLA Track
for every pass made over the animation
to allow non-destructive tweaking.
Menus
#
View Menu
#
Adjust Last Operation
Displays a pop-up panel to alter properties of the last
completed operation. See
Adjust Last Operation
.
Channels
Show or hide the Channels region (the tree of objects and animatable properties on the left).
Frame All
Home
Pans and zooms the view so that all keyframes are visible.
Frame Scene/Preview Range
Reset the horizontal view to the current scene frame range,
taking the preview range into account if it is active.
Go to Current Frame
Numpad0
Centers the Timeline to the Playhead.
Show Markers
Shows the Markers region (if any markers are defined).
When disabled, the
Marker Menu
is also hidden and marker operators are not
available in this editor.
Show Seconds
Ctrl
-
T
Shows the time on the X axis and the
Playhead
as timestamps instead of frame numbers.
A timestamp such as
01:03+02
means “1 minute, 3 seconds, 2 frames.”
Sync Visible Range
Synchronizes the horizontal panning and scale of the editor
with other time-based editors that also have this option enabled.
That way, they always show the same section of time.
Only Show Selected
Only show keyframes related to the selected items.
This could be objects, bones, nodes, and so on.
Only Show Errors
Only show curves and drivers that are disabled or have errors.
Useful for debugging.
Cache
Show Cache
Which simulation caches to show on the timeline.
Baked simulations will be shown as fully opaque, cached simulations will be slightly transparent,
and invalid caches will be slightly transparent with dark diagonal stripes.
Timeline Cache.
#
Area
Area controls. See the
user interface
documentation for more information.
Marker Menu
#
Markers
are used to denote frames with key points or significant events
within an animation. Like in most animation editors, they’re shown at the bottom of the Timeline.
Markers in an animation editor.
#
For descriptions of the different marker tools, see
Editing Markers
.
Transport Controls
#
These buttons are used to set the current frame and control playback.
Transport controls.
#
Jump to Start (❙⏴)
Shift
-
Left
Sets the Playhead to the start of the frame range.
Jump to Previous Keyframe (◆⏴)
Down
Moves the Playhead to the previous keyframe.
Rewind (◀)
Shift
-
Ctrl
-
Spacebar
Starts playing the animation in reverse.
Play (▶)
Spacebar
Starts playing the animation.
Jump to Next Keyframe (⏵◆)
Up
Moves the Playhead to the next keyframe.
Jump to End (⏵❙)
Shift
-
Right
Sets the Playhead to the end of the frame range.
Pause (⏸)
Spacebar
Stops playing the animation.
Frame Controls
#
Current Frame
Alt
-
Wheel
The number of the frame that’s currently being displayed in the 3D Viewport.
This is also the location of the Playhead.
Use Preview Range (clock icon)
The Preview Range is an alternative Frame Range that you can use for focusing on a
particular part of the animation. It lets you repeatedly play a short segment without
having to manually rewind or change the frame range of the entire scene.
This range only affects the preview in the 3D Viewport; it doesn’t affect rendering.
The boundaries of the Preview Range are shown in dark orange. You can quickly configure
and enable it by pressing
P
and dragging a box. To disable it,
you can press
Alt
-
P
.
Start/End Frame
The start/end frame of the scene (or the preview range, if active).
-------
is active, the operator will be re-labeled as "Frame Preview Range" and zoom to that instead. This
  was added to the Dope Sheet, Timeline, Graph Editor, NLA Editor, and Video Sequence Editor.
Video
¶
"AVI RAW" and "AVI JPEG" movie file output types are removed.
  Existing scenes using them will be updated to "FFmpeg Video" type with default options (H.264).
  (
f09c7dc4ba
### Commit Summary: Video: Remove non-ffmpeg AVI support · f09c7dc4ba - blender - Blender Projects
### Commit Details:
Blender had a very limited (only uncompressed or MJPEG frames) .avi file
support, for both reading and writing. This is something that ffmpeg can
fully do.

This removes all of that. 3500 lines of code gone, primary motivations being:
- ffmpeg can read and write .avi files just fine, including ones with
  uncompressed or MJPEG frames.
- Blender's ffmpeg integration could also be taught to produce uncompressed or
  MJPEG .avi files, but TBH I don't see a particular reason to do that. Modern
  formats like H264 are better in every way, and already support "lossless"
  option if needed.
- The "Lite" blender build configuration was excluding both ffmpeg and avi
  anyway, so that config is something that can't read nor write any movies.

User visible changes:

- In scene image output type, under Video section now there's only Ffmpeg Video
  (AVI Raw and AVI JPEG are gone)
- Whenever loading an existing file, if output was one of AVI Raw / AVI JPEG,
  it is set to Ffmpeg Video.

#118409
-------
)
Redundant timecode types were removed. "Record Run" and "Record Run No Gaps" are kept. (
69472c88ee
### Commit Summary: IMB: Cleanup timecode options · 69472c88ee - blender - Blender Projects
### Commit Details:
Remove options that are duplicate and change description of options, so
they describe bit better, how timecodes are actually used.

Timecodes in Blender have pretty much nothing in common with more widely
known term "timecode". This confused users (and developers).
There were 5 options of which 3 were exactly same. This commit leaves
user with 3 options:
 - Use timecodes for normal seeking/playback - Record Run
 - Ensure, that no frame is duplicated or skipped - "Record Run No Gaps"
 - Do not use timecodes - "None"

More verbose description was added to the definition in code.

Naming of these timecode types was kept, even if it is incorrect to not
break scripts and habits.

#121001
-------
)

'''''

